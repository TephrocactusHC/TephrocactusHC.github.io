<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>最小危险部门</title>
      <link href="/post/a28c55f4.html"/>
      <url>/post/a28c55f4.html</url>
      
        <content type="html"><![CDATA[<h1>书评</h1><p>没整个读完，评不了，只能针对第一章、第四章、第六章评价了。</p><h2 id="第一章">第一章</h2><p><code>合宪性审查</code>是最高法院最重要的权力，但是却并没有在宪法李规定。</p><p>马歇尔法官提出，问题并不在于违宪的法律能否被当作法律，问题在于谁能决定这部法律是违宪的。</p><p>但是，很多时候<strong>违宪</strong>这件事表现得并不是那么明显，那么应该由谁来判断违宪呢？</p><p>马歇尔认为如果把权力交给立法机关，那么本应受到限制的立法机关就是自己限制自己，这比较荒唐。但是司法机关也应该受到限制。</p><p>马歇尔也认为法官有权判定违宪。但他的论证好多都经不住推敲，无论是誓言还是至上性条款。</p><p>事实上州法官也能进行违宪审查。而且违宪审查交给国会也行。但是，最重要的是，最高法进行违宪审查<code>它是从归因于整个计划的理想目的中暗示出来的</code>，而不是在文本之中写出来的。</p><p>也就是说，制宪先贤们实际上是欢迎这一现状的到来的。</p><p>反对最高法进行违宪审查的人，并没有充足的证据证明制宪先贤们反对这些观点。</p><h3 id="反多数主义的难题">反多数主义的难题</h3><p>司法审查是非代议性的，因为代表多数人的立法机关的意志被妨碍了。</p><p>宪法隐含着司法审查的意思。</p><p>尊重那些长久的意义和精神。</p><p>最高法是个教育机构。</p><p>只能解释为假定了人民不适合维持长久的那种体系和价值，因此法院来做。</p><p>但是民主意味着多数人可以撤销与他们意见相左的政策的权利。</p><p>民主社会有赖于道德式的统一。</p><p>司法审查具有维护少数、缔造共识的力量，更有对多数迟疑的决策的推动力量。</p><p>人们会变得依赖于司法审查，立法水平开始下降。</p><h2 id="第四章">第四章</h2><p>法院解释宪法的权力，只能在案件之中行使。</p><p>其他任何情况都不可以。与其说是对司法审查的限制，不如说是对马歇尔观点的支持。联邦法院不能提供<code>建议性意见</code>。</p><p>**法院的判断，是在事后做出的。**这一点不同于立法机关。因此，法院可以看到在事前看不到的东西，能够引发国民的第二次思考。</p><p>当然，由于立法在前，当其被广为接受，也使法院的反对力量变小。</p><p>没有实质性损害，就无法作出司法审查。</p><p><code>被授予的管辖权</code>是否应该被行使。</p><p>最高法的权威，是否来自马伯里案之后？也就是说，是先有的权威，还是先有的案例？</p><p><code>提卷令</code></p><p>事先审查是压制民主，因为事后审查会进入陪审团审理，这是保护多数的方式。</p><p>拒绝签发，就是回避实质性问题。</p><p><code>时机不成熟的基于管辖权的驳回</code><br>案件成熟，但<code>宪法性</code>问题本身没有成熟。</p><p>最高法未必要解决在政治上陷入僵局的案件。</p><p>含糊性的制成法非常危险，应该禁止。和废弃学说联系起来。一部法律长期不被执行，本身就反映了政治上的妥协。立法机关不负责，但是行政负责了。</p><p>这里的关键是<strong>对政治机构及其选民的责任感和自主性的影响</strong></p><p>国会的权利被宪法限制，也就是被最高法限制。</p><p>处理案件但又回避宪法争议点。</p><p>p200给出四个理由。事实上最高法也害怕会造成失衡。而且由于自己是非民选的，也有自我怀疑。</p><p>最高法靠近政治，但又于政治隔离，刨除了一切个人的主观的偏见。</p><h2 id="第六章">第六章</h2><p>最高法是一个治理的机关。</p><p>最高法要考虑社会效果。</p><p>最高法依赖于行政分支的执行。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 法学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权力与意图</title>
      <link href="/post/50dcf957.html"/>
      <url>/post/50dcf957.html</url>
      
        <content type="html"><![CDATA[<h1>书评</h1><p>本书重点考察了冷战结束后的前十年美国对苏的外交政策以及其中很多决策背后的细节。当然，值得注意的是本书原书出版于2003年，但遗憾的是中文版在2017年04月才出版，不得不说本书部分内容已经有些过时了。在阅读时要注意甄别。</p><p>本书的核心内容较为精炼地被总结在译者序当中。作者的核心观点是，<strong>冷战后美国对俄政策，主要取决于国家领导者的个人理念</strong>。而在作者所考察的三位美国总统之中，布什和小布什都属于<code>权力平衡者</code>，而克林顿则是较为典型的<code>制度变革者</code>。</p><p>所谓<strong>权力平衡者</strong>，一般与<strong>现实主义者</strong>联用。这一类观点主要认为，俄罗斯内部的制度、政策等都不会影响国际秩序，更为关键的是国家间的权力要维持平衡，无论俄罗斯是否实现民主，其实力将会决定其对美国的外交政策。而<strong>制度变革者</strong>主要是<strong>威尔逊主义</strong>的支持者，认为民主国家之间不会爆发战争，俄罗斯变得民主有利于美国的国家安全，因此这一派致力于支持俄罗斯的内部改革，积极推动使其进行制度改革、政治改革。</p><p>在<code>老布什</code>时期，苏联正处在最后时期。当时老布什的首要任务，是保证不会出现新的混乱、维持国际秩序。当时的苏联领导人戈尔巴乔夫，由于在国内推行改革、在国际战略收缩，因此被老布什政府信任并支持，他们认识到一个会赞同西方并且在国际上收缩的苏联领导人对他们很有意义。因此在最开始他们并不决定颠覆苏联，并且由于南斯拉夫的混乱，他们害怕民族主义浪潮带来更严重的问题。然而可惜的是，最终戈尔巴乔夫没能控制住局面，苏联解体、叶利钦上台。老布什认为，他更多是与一个国家领导人的外交政策而不是内部政策打交道，因此在整个苏联解体时期持观望态度，虽然很多NGO深度参与了在俄推动民主的过程，但老布什行政分支并未过多参与其中，当然，批评者认为这也使美国失去了更好的塑造俄罗斯的机会。</p><p>国务卿贝克积极推动无核化，当时可见的是美国在东欧甚至俄罗斯的受欢迎程度，所有人都致力于满足美国的要求，最终无核化获得成功。叶利钦致力于和平转型，希望向外界展示其是西方可信赖的合作伙伴，并且美国开始认为叶利钦是一位可靠的俄罗斯领导人。</p><p>西方学者很少有人算准苏联解体的时间，甚至连苏联会解体都没想到。因此老布什行政分支在当时如何处理苏联解体的事情完全没有预料和头绪，只能保持观望态度。虽然在老布什行政分支时期，已经开始着手对俄援助，但当时有太多担心：俄罗斯仍然有太多核武器，这都是对准美国及其盟友的；苏联完全没有市场经济的经验，如何从零建立一个经济制度甚至是民主制度？在尼克松和克林顿的“谁失去了中国”“谁是去了俄罗斯”的压力之下，老布什行政分支开始着手一些援助，然而由于老布什的理念以及美国国内包括经济危机在内的诸多问题，援助最终到来的又少又晚，没有起到理想的效果。经济改革的机会在某种程度上就这样错过了。</p><p>在<code>克林顿</code>时期，克林顿奉行康德哲学，认为民主国家之间不会发生战争，俄罗斯的民主有利于美国安全，当然，他们也想成为历史的创造者。虽然面临现实主义者的压力，克林顿行政分支尽可能减少自由主义的说法和理想主义的标签，代之以强调国家安全，但当时困难很多，很多承诺的援助并没有最终交到俄罗斯或者交付很晚，而且俄罗斯内部的问题，比如仍然保留部分原苏联时期官员、内部腐败混乱、民主改革不彻底等诸多原因，在很多经济改革的问题上，最终由于采取折中策略而导致效果非常不理想。具体到援助哪方面，克林顿并没有坚持在俄罗斯的社会福利上有大力度的投入，仅仅在促进民主、市场援助、减少威胁的三个方面投入信心。当然，他们最关心消除威胁和经济改革，在民主上投入的最少。</p><p>在最初几年，休克疗法持续的时间很短，民主陷入混乱、民族主义、独裁主义、法西斯主义在俄罗斯兴起，但叶利钦仍然被信任，因为他会坚定支持西方的政策。值得注意的是车臣问题在当时被担心会影响民主进程，但从未被克林顿行政分支放在重要的范围。</p><p>由于安全问题，克林顿甚至放弃了民主的支持，只因为叶利钦更加支持解决安全问题。解决这类问题，主要通过经济援助的支持方式，同时美国也发现民主陷入混乱的情况。</p><p>北约问题是一个很重大的问题，叶利钦不理解为什么北约仍然将俄罗斯视为威胁并违反承诺不断东扩。本书也没有给出一个特别合理的解释，可能的解释是美国自身的惯性以及东欧国家的不安全感。为了安抚叶利钦，只能给予经济援助和军事保证。</p><p>98年俄罗斯经济出现重大问题，虽然陷入严重混乱，但最终没有出现灾难性的后果。美国当时承诺给予援助，但并没有及时、充足。实际上在克林顿行政分支的执政后期他们已经发现，俄罗斯无力影响美国的政策，因此往往在恫吓之后妥协。这促使了北约的更多行动，并最终导致科索沃问题激起了俄罗斯的不安全感。</p><p>小布什是现实主义者，关注大国及其外部政策。因此又回到了一种僵持或者说平静的状态。</p><p>事实上每一届政府，权力平衡者和制度变革者均在其中有任职，尤其是小布什后期，也受到更多威尔逊主义者的影响。考察三届政府，可以看出美国从外部致力于改变俄内部的效果是相当有限的，然而俄罗斯的发展虽然没有走上美国预期的路线，但他们担心的灾难性后果缺都没有发生。因此很难评估美国的很多政策是否起到积极作用，也许比起经济援助，民主观念和西方经济学知识的传播起到了更大影响。总而言之，俄的改革确实改变了世界的格局，如何正确评估美国的力量、俄罗斯的地位，未来俄罗斯将会向何处走，只能有待历史进行证明了。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 社科 </tag>
            
            <tag> 历史 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>書法審美系列一</title>
      <link href="/post/78b0f154.html"/>
      <url>/post/78b0f154.html</url>
      
        <content type="html"><![CDATA[<p>openai/deployments/stopvicky/completions?api-version=2023-03-15-preview</p>]]></content>
      
      
      <categories>
          
          <category> 审美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美学 </tag>
            
            <tag> 书法 </tag>
            
            <tag> 审美 </tag>
            
            <tag> 艺术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>書法審美系列二</title>
      <link href="/post/78b0f154.html"/>
      <url>/post/78b0f154.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 审美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美学 </tag>
            
            <tag> 书法 </tag>
            
            <tag> 审美 </tag>
            
            <tag> 艺术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OPTEE</title>
      <link href="/post/12345678.html"/>
      <url>/post/12345678.html</url>
      
        <content type="html"><![CDATA[<hr><h1>关于本次实验</h1><p>来自论文：《Trusted-DNN: A TrustZone-based Adaptive Isolation Strategy for Deep Neural Networks》</p><p>项目的<a href="https://gitee.com/PaintZero/alexnet-tee/tree/master">gitee代码地址</a></p><h1>Ubuntu上运行</h1><h2 id="编译op-tee">编译op-tee</h2><p>首先要去<a href="https://optee.readthedocs.io/en/latest/">op-tee官方文档</a>安装依赖，相当多，略慢（取决于网速）。</p><p>学长的项目之中的编译过程如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">repo init -u https://github.com/OP-TEE/manifest.git -m qemu_v8.xml</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">repo <span class="built_in">sync</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make toolchains</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make run</span></span><br></pre></td></tr></table></figure><p>有几个问题：</p><ol><li class="lvl-3"><p>repo大概率不好用，即使挂着梯子也无法下载。这时候需要换源。<a href="https://blog.csdn.net/GooTal/article/details/123196199">可供参考的方法</a></p></li><li class="lvl-3"><p>repo sync开始需要挂梯子运行，而且需要编译的包比较大，下载也许需要2-5G的流量，如果是梯子要提前看好。</p></li><li class="lvl-3"><p>第一条命令如果想要指定OP-TEE的版本，可以指定指定分支。具体可以看<a href="https://blog.csdn.net/weixin_44728238/article/details/104625347">这里有指定版本的命令</a>。不过我个人用的最新版本命令，也没事儿。</p></li><li class="lvl-3"><p>可以使用 <code>-j</code> 命令，但是我个人并不建议，因为在编译过程中很容易出问题，使用了这个命令很难确定到底断在哪里以及出了什么问题。</p></li><li class="lvl-3"><p>如果不能科学上网需要自己下载每一个包然后手动编译，比较麻烦，还是尽量找梯子。</p></li><li class="lvl-3"><p>make run 的运行速度<strong>极慢</strong>，我的电脑大概跑了5H才跑完，再加上前面的试错时间，难蚌。。。</p></li></ol><h2 id="运行程序">运行程序</h2><p>本项目的代码，之下的很多子目录并不能同时编译，只能一次运行一个。操作很简单，就是把程序放到examples之下然后重新make run，这次就快了。</p><h2 id="关于数据集">关于数据集</h2><p>首先，需要自己下载Tiny ImageNet数据集。然后自行下载 alexnet人家训练好的参数。然后运行tools里的程序做好划分。</p><p>然后，重点来了，如何上传数据集：</p><p>项目地址之下的方法貌似并不好用，至少和我这个最新的optee和qemu不太匹配，更好的方法是参考这个<a href="https://github.com/mofanv/darknetz">仓库</a>。</p><p>直接把数据集拷贝到out-br/target/root之下。</p><p>但是我遇到的问题是一旦数据集和参数超过了467MB就不成功了，因此只进行了压缩以后的参数进行实验。</p><p>一旦超过467MB提示如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ end Kernel panic - not syncing: VFS: Unable to mount root fsunknown-block(0,0) -]</span><br></pre></td></tr></table></figure><p>而通过df -h命令查看的结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Filesystemdevtmpfs Size       Used       Available       Use% Mounted on</span><br><span class="line">devtmpfs           474.3M      0            474.3M       0% /dev</span><br><span class="line">tmpfs              498.4M      0            498.4M       0% /dev/shm</span><br><span class="line">tmpfs              498.4M      40k          498.4M       0% /tmp</span><br><span class="line">tmpfs              498.4M      16k          498.4M       0% /run</span><br></pre></td></tr></table></figure><p>看起来我的数据集和参数加在一起只有467MB的时候应该还可以，不知道为什么会有这个问题。</p><p>此问题暂时无解。</p><h2 id="整体情况">整体情况</h2><p>由于数据集的图片过多，因此在重新 make run 之后，编译速度还是比较慢，应该是有一些链接的过程，导致的特别慢。因此需要等待。</p><p>最后就可以顺利跑起来了。</p><h1>树莓派</h1><p>首先，我拿到的是树莓派3B+。</p><p>硬件安装步骤基本上看官网就好，B站也有。其实就两步，一是贴散热片，二是安装到亚克力板子里(<em>这玩意儿到底咋拆啊</em>)。</p><h2 id="格式化原来的SD卡">格式化原来的SD卡</h2><p>我拿到的SD卡里面有人家之前的系统，要先格式化。</p><p>确实遇到了一些小问题，就是插上卡以后并不是一个16G的盘，而是一个2G和一个260MB的盘。。。</p><p>然后我使用的是这个教程：<a href="https://www.cnblogs.com/hilary0614/p/reformatdisk.html">此处是一个格式化教程</a></p><p><strong>注意，无论是使用工具还是命令，格式化都万分危险！务必谨慎，并做好数据备份，不然万劫不复！</strong></p><p>然后顺利格式化，终于看到了一个14.8G大小的盘了:)</p><p>理论上树莓派自己的官方烧录镜像软件也会替你格式化，但是据说有风险hhh</p><h2 id="烧录镜像">烧录镜像</h2><p>主要过程来自这个<a href="https://zhuanlan.zhihu.com/p/147061445">参考</a></p><p>在探索的过程中发现<a href="https://xuanxuanblingbling.github.io/iot/2021/09/10/rpi3/">有个更好玩儿的？</a>这个没进行尝试，未来有时间可以看看。</p><p>烧录镜像直接采用 Raspberry Pi Imager</p><p>默认镜像，烧录很快，大概一刻钟就完成了。</p><p>遇到问题<a href="https://blog.csdn.net/weixin_42792088/article/details/121657463#fn6">1</a></p>]]></content>
      
      
      <categories>
          
          <category> 审美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 美学 </tag>
            
            <tag> 书法 </tag>
            
            <tag> 审美 </tag>
            
            <tag> 艺术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美的历程</title>
      <link href="/post/1ed30d8c.html"/>
      <url>/post/1ed30d8c.html</url>
      
        <content type="html"><![CDATA[<h1>美的历程</h1><h2 id="写在最前">写在最前</h2><p>我看的第一本美学书籍。</p><p>万幸这本书的书评写晚了，在和哲学院的冯原老师聊了聊之后，才得知这本书是李泽厚先生在以康德的美学思想为基础所写的一本书.</p><p>这本书我一开始以为是一本以历史为基础的对中国美学的梳理，然而在经过与冯老师的交流，这本书应该是以（哲学）思想的变迁为脉络，梳理的美学变化，并不完全是以历史为脉络的，具体应该是体现在一些阶段划分和相关概念解释上的不同。这一点由于目前知识过于匮乏，只能等未来读书更多以后再细细体会了。</p><h2 id="书评">书评</h2><p>本书共有十个章节，龙飞凤舞、青铜饕餮、先秦理性精神、楚汉浪漫主义、魏晋风度、佛陀世容、盛唐之音、韵外之致、宋元山水意境、明清文艺思潮。比起美学鉴赏和美学理论，本书更像作者以自己的审美视角和美学理解，阐述了关于中华文化的美学的相关问题。本书涵盖甚广，话题宏大，但又以点带面，选取了很多典型，介绍了美学的发展和变化。在作者眼中，<code>美</code>就是“<code>有意味的形式</code>”和“<code>积淀</code>”，也就是说<code>美</code>并不仅仅是一种官能上的体验，其背后一定有<code>人的实践</code>，意即有想象、思想、理念、信仰、社会关系等诸多象征意义，才构成了“美”这个观念。而从内容到形式的“积淀”，是美学发展的一大脉络。以这个观点为根基，作者梳理了中华文化的美学发展历史。</p><p>作者认为美的起源，在于原始巫术，其中原始人的幻想、对世界的理解、巫术仪式等，构成了最原始的审美。后来随着时代发展，神秘色彩褪去，政治色彩显现。而随着有意味的形式因为重复编程规范化，就失去了特定的审美而只是一般的形式美了。<code>色彩</code>与<code>线条</code>，是造型艺术中两大因素。其中，线条比较特殊，一方面要以精神层面去理解，另一方面作者把线条在空间的变化解释为时间的流动。后来，汉字以及书法，则是线条艺术的另一大体现。青铜时代的美，是一种狰狞的、带有威严和神圣意味的美，这种美带有了时代特征，后来随着社会发展，政治的意味不再突出，这种美也就渐渐变为玩赏的美了。到了先秦时代，以儒道两家，分别对美作出了进一步发展，儒家注重功能性的美，强调内在，引入了伦理、心理等因素于美学之中；道家则注重独立的人格与个性，强调逍遥和精神自由。楚的浪漫主义，则表现与儒道二家不同，<strong>以丰富的想象和炽热的情感为美</strong>。这种丰富不羁的想象与自由，却又恰恰是个体发展、人格独立得到承认时才能得到体现。而到了汉，艺术的主体则是人对世界的征服。时代背景是强汉的发达，因此在浪漫神话之中，人的世界也得到展现。**汉的气象是最开阔的。**这里产生了一个中华美学的概念——<code>古拙</code>。魏晋时代，发生重大变化。这个时代开始出现探讨世界等内容的哲学，也出现了与实用性关联更少的文艺。<code>这是人的觉醒</code>。正是对人格的追求，对人的超然的风度和超脱的精神的追求，对气韵和风神的追求，构成了这一时期的主题。佛教的发展则严格按照社会变迁为主线，由于社会的动荡，宗教才能兴起。但又由于社会的变化与发展，宗教之中人的地位、世俗的地位也在发生变化。神秘、超然、美好、亲切、世俗，都是不同时期宗教的体现。<code>艺术从属于现实生活</code>。盛唐时期，<strong>积极进取是艺术的基调</strong>。那种欣欣向荣，体现在一切艺术形式之中。中晚唐时期开始出现艺术个性，并且审美更加细腻在，对日常生活和世俗更加亲切了。并且，从这一时期，**艺术之中的意境和情趣开始成为美学中心。**宋元时期，商品经济发展，艺术一方面继续中晚唐沉浸在世俗的繁华，另一方面由于士大夫的崛起，将农村牧歌化、理想化的美学开始兴起。并且趣味、情感的抒发，都开始占据主流，最典型的就是水墨画。至于明清，<strong>世俗人情是核心</strong>。市民文学、对人性解放、对封建的批判、对腐朽制度的感伤等，构成了中华传统文化最后的美。</p><p>美学的范围很广，在文学上，赋比兴开始强调“不道破一句”的“言有尽意无穷”的美学，建筑艺术强调配合、空间感，以生活的舒适与环境的和谐为美，威严的青铜器、六朝的华丽文学、矛盾的魏晋风度、唐代开始的标准化、中晚唐时期诗词、书法、绘画开始出现的艺术个性、无我之境的宽泛与旷达的山水、有我之境的主观心绪的文人画，都应该如何与现实生活、历史背景相结合去欣赏。</p><p>作者的语言比较优美，可以说以较短的篇幅，讲述了中华古代美学的脉络，使读者领略到了中华古代文化的成长与美学变迁。由于是美的历程，本书更像一本关于美学的“游记”，在浅显易懂的同时也让读者对美学有了基本的了解。整个美学发展史，在作者看来都要结合社会政治、经济的发展，以此思考美学的变迁。在书的最后，作者提出了令人感兴趣的问题，美学既然是社会的产物，那么为什么久远的作品却仍然有着永恒的、当代的美感？这是我们应该去思考的。</p><p>如同一些豆瓣书评所说，本书前两章引人入胜，一方面是作者开篇就提出了很多美学根本问题，并且做了抒发与阐述，另一方面是探讨的是很少有人关注的史前等美学文化，后面由于历史的发展，任何一个美学、艺术领域都十分宏大，不免陷入了很多内容一笔带过的问题。并且，本书由于成书较早（1982年），据说是作者本人在1950年代的美学笔记，因此无论是内容、美学思想上，都存在一定不足，不仅是陷入马克思审美体系之中，陷入一种经济（社会）单一决定论的叙事体系，导致部分观点在现代美学理论中不被采纳，也有很多东西没有说透，尤其是在诗歌、绘画内容上，大量的引用，没有自己的话作为观点进行解释，仅仅代表了一些作者的倾向性。这本书的成功，部分得益于特殊的历史时代，那时中国属于美学荒漠，也部分得益于康德的哲学体系，当然也得益于作者本身的功力。总而言之，虽有不足，但是一本好书，值得推荐，在增长谈资的同时也能陶冶情操。</p><h2 id="关于康德">关于康德</h2><p>我当然不了解康德的美学思想，不过这里简单说一下为什么本书是以思想为脉络来谈。因为很多我们认为的美，在当时并不认为是美的，这一点作者在书中也有写，但没有明确点破，比如陶潜，比如杜甫、颜真卿，比如唐伯虎，在当时并没有成为艺术主流，甚至没人关注，所谓“王杨卢骆当时体，轻薄为文哂为休”，如果从历史的角度讲他们并不是当时那个时代的美学代表，相反是后世重新发掘并解释他们的美学价值，才使得在分析那个时代的美学的时候，以他们为典型。西方的梵高也是同理。因此本书乍一看是以历史为脉络，但其实又是以美学、哲学思想为脉络进行梳理的。</p><h2 id="一些具体缺点">一些具体缺点</h2><p>我的习惯就是每本书挑一些毛病，这本也不例外。这本书有几处我觉得有很根本的问题的，一是关于作者对春秋时期孔子思想的所谓“理性主义”的说法；二是对中外的对比，比如荷兰小画派、埃及金字塔、西方教堂等。</p><p>对于第一点，<code>理性主义</code>是一个专有名词，特指17-18世纪兴起的思潮，与西方的文艺复兴、启蒙运动、宗教改革等密切相关，康德就著有《纯粹理性批判》。如果单纯以孔子不敬鬼神、不信鬼神来说，可以称之<code>唯物</code>，但是碰瓷理性，特别是作者反复使用<strong>理性主义</strong>一词，个人感觉不妥，这完全是两个概念。我们生活中当然有理性与感性这种用法，但是理性主义可不能乱用。这一点我不知道是不是因为出版年份过早，那是启蒙思想也许还没引进国内？而后又不断提出什么<code>实践理性</code>等多种理性，主要是论述中国的无神论的历史现象，这如果是作者自创概念，又没有丰富论述，如果是引用，也找不到出处，十分离谱了。</p><p>对于第二点，我个人也有些许不解。比如对荷兰小画派和汉代艺术对比，作者认为汉代艺术更加宏大，是因为&quot;（汉）是一个幅员广大、人口众多······的中华帝国，······强有力地表现了人对物质世界和自然对象的征服主题&quot;。但是这里有段历史背景，17世纪，荷兰被誉为海上马车夫，是当时世界上最强大的国家，殖民地遍布全球。如果以幅员、人口、经济、军事，以及作者所说的汉代的&quot;人对世界的征服&quot;，那毫无疑问17世纪的荷兰都更胜一筹，只偏居东亚和中亚一隅的汉代如何与世界霸主相提并论呢？汉代艺术中着力体现的“征服”“一往无前的气势”被作者认为是汉代“美”的核心，如果这样解释，西班牙、荷兰、英国、美国在各自巅峰时期的艺术成就都是非凡的。尤其在对比的时候，都应该远超汉和唐才对。而对于建筑艺术的理解也一言难尽，一方面是西方的小教堂很多，不知道为什么非要说为了让人信仰给人渺小感，这很明显说的是科隆大教堂之类的，但是一礼拜去一次的小教堂非常生活化，不会给人负面的情绪。这又和作者解释中国建筑群的部分相矛盾。 <s>(你以为西方宗教都是守序邪恶呢？)</s> 如果你要比科隆大教堂，那应该挑出故宫来，因为西方建筑都是“供养神的庙堂”，而中国都是“供世上活着的君主”，那为什么去强调中国建筑的生活化的例子呢？其他类似瑕疵也有不少。</p><p>其实最近越是读书，越觉得<code>学在西方</code>，不只是理工科，人文社科这一点也许比理工科还严重，唉。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 名著 </tag>
            
            <tag> 读后感 </tag>
            
            <tag> 社科 </tag>
            
            <tag> 美学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事实：用数据思考，避免情绪化决策</title>
      <link href="/post/95b31654.html"/>
      <url>/post/95b31654.html</url>
      
        <content type="html"><![CDATA[<h1>书评</h1><p>作者以一些关于世界的现实问题为起点，向公众收集答案，比如贫困情况、教育情况等，然而，可悲之处在于包括相当多专家在内的人们，几乎无法得到正确的答案。作者描述，大猩猩随机选择正确的概率都有三分之一，而公众回答正确的概率则低于大猩猩，甚至在部分发达国家回答正确的概率则远低于大猩猩。</p><p>当作者在数十年前认识到人们对世界的认知存在系统性偏差之后，便长期致力于以事实和数据为基础，力图扭转人们的情绪化决策。因此，作者致力于教会人们如何防止十种情绪化本能以及由此产生的情绪化的世界观，并且回归事实做到实事求是。正如作者所言，本书讲述的是：“如何以数据作为根治无知的良方，以理性作为心灵平静的源泉。因为这个世界并没有你所感觉到的那么糟糕。”</p><h2 id="一分为二">一分为二</h2><p>人们习惯于一分为二地看待问题，这是一种本能的冲动。然而，大多数人处在一个中间的阶段，我们无法完美地一分为二看待整个世界。在这一章，作者提出了<code>四个收入等级</code>的概念，将人们的生活水平划分为四个等级。这一观点对传统理论应该是有所冲击，甚至迫使了联合国在相关标准上的修订。不同国家之中，处于同一个收入等级的人的生活水平其实是差不多的。</p><p>那么，如何防止这种本能？作者提出了注意只关注平均数、只比较极端情况、只俯视不仰视的做法。对很多欧美国家来说，大多数人都处在第四等级，即最富有的等级之中，因此在他们眼中前三个等级的人一样贫穷，他们也会忽略前三个等级的人的生活水平的提高。这也是欧美国家的公众比较普遍的问题之一，他们看不到别的国家的进步。</p><h2 id="负面思维">负面思维</h2><p>世界正在变得更好，作者列举了32项重大进步，详细阐述了世界在各方面的进步。然而，由于我们对过去糟糕情况的错误记忆、媒体的选择性报道和人们的感性思维，我们总是得出相反的结论。</p><p>因此，对抗此种思维要学会区分状态和趋势、学会理解新闻中坏消息总是更多以及警惕刻意美化历史的三种现象。</p><h2 id="直线思维">直线思维</h2><p>人们总是有一种线性思考的倾向，然而生活中除了直线，还有S形曲线、滑梯曲线、驼峰曲线或者倍增曲线的规律。</p><h2 id="恐惧本能">恐惧本能</h2><p>“理性思考永远是困难的，尤其当我们恐惧的时候。当我们的思想被恐惧填满的时候，我们的大脑就没有空间来思索事实了。”事实上，这是我们的大脑的一种过滤机制，使我们免于噪声的干扰。但是，要学会区分恐惧和危险这两个不同的概念。恐惧很多时候来自我们的本能，那会是我们把注意力放在错误的地方。</p><p>因此，我们需要计算真实的风险。风险=危险程度*发生的可能。在采取行动之前，先让自己冷静下来。</p><h2 id="规模错觉">规模错觉</h2><p>所谓规模错觉，就是注意局部而忽略整体。因此我们会针对单一的数据得出错误的结论。</p><p>注意将单一数字与其他数据进行对比，并试图得出某种比例，比例往往更有意义。同时，二八定律也是不容忽视的。</p><h2 id="以偏概全">以偏概全</h2><p>人们其实会自动地进行归纳、演绎，这是下意识的行为，但是归纳往往会扭曲我们的世界观，因为我们常常会得出错误的分类。</p><p>因此，我们要质疑自己的分类方法，注重在同一类别中寻找不同、在不同类别中寻找相同、在不同类别中寻找不同，也要注重大多数和极端案例，并且，不要假设别人是傻瓜！</p><h2 id="命中注定">命中注定</h2><p>我们会有一种倾向，认为事物的某些内在属性会决定其命运，比如文化、民族性之类的东西。然而这种思想是错误的。事实是很多内在属性并不是不可改变的，而是一直变化的。</p><p>因此，我们要注意那些缓慢但是持续的变化，时刻更新自己的知识，通过与老人对话和收集案例来认识文化和价值观的变化。</p><h2 id="单一视角">单一视角</h2><p>人们有一种倾向就是喜欢简单的、单一化的想法，特别是这个想法可以解释很多问题的时候。认为所有的问题都有单一的原因和单一的解决方案当然是一个错误的想法。</p><p>要检查自己的想法，多与不同想法的人沟通有。对未知的领域要保持谦逊。如果熟练使用某种工具，切忌把所有问题都用这种方式解决(锤子和钉子)。正确关注数字，并当心简单的想法和解决方案。</p><h2 id="归咎他人">归咎他人</h2><p>人们总是会找到一个清晰且简单的理由去责怪他人。这一思想的问题在于，我们会夸大被归咎的人的重要性。</p><p>我们要注重寻找原因而不是坏人，要寻找系统而不是英雄。</p><h2 id="情急生乱">情急生乱</h2><p>在紧迫感之中，人们往往很难全面思考，但这种情况很容易作出错误决定。</p><p>我们要保持冷静，坚持了解基础数据，警惕故意渲染紧迫感的带有偏见的预言家，并谨慎采取过激行为。</p><h2 id="总结">总结</h2><p>汉斯·罗斯林是一位伟大的瑞典医生，他为人类的健康做出了自己的贡献。同时，他本人热衷于公益事业，先后担任联合国组织的顾问，是“开启民智”基金会的创始人。平心而论，本书的阅读难度并不高，语言平实、通俗易懂，偏向口语化和故事化。作者自述这是有意为之。本书所面向的读者，应该是发达国家特别是西方世界的读者，他们长期生活在优越的物质条件之中，自认为有一种对全人类特别是落后国家的责任感，希望改善这个世界，但又活在媒体、教育、社会所渲染的氛围之中，忽视了真实的世界的变化。当然可以简单的称这类读者为“圣母”，但却又更多的人在日复一日地付出行动，单单称为圣母并不妥当。这本书重点就在于通过数据，举例说明世界并没有西方左派眼中那么糟糕，人类整体上是在进步的。作者的影响力很大，本书也被比尔盖茨等知名人士推荐。重点就在于作者的演讲、图书对于那些活在虚幻的世界观和有偏见的媒体之中的西方人，算是当头棒喝。实际上以一个中国人的视角去看，由于我们很熟悉我国脱贫攻坚的努力，因此我们很清楚世界，至少是中国，是在变好的，不至于那么飘在云端。当然，我自己其实并不知道印度、非洲的进步，也是从本书的数据中才有所初步了解。</p><p>当然，本书的内容实际上有些浅显，没有更多思考的厚度，也许是因为主要面向的读者并不是发展中国家的人导致的。因此，本书被归入畅销书还是比较合理的。无论如何，避免情绪化思维，以更加理性的方式去思考，是正确的事。</p><h2 id="一些其他">一些其他</h2><p>作者由于是一位社会活动家，因此其人生经历十分丰富。他的描述让我知道，瑞典这样富足的国家也曾贫穷和落后，而世界上落后的国家和地区曾经面临想象不到的困难。当今大多数国家都在飞速发展，人们是时候走出自己熟悉的社会去开眼看世界了。最后，我真心向努力付出行动的人致敬，作者曾经去极度贫困的地方成为十万名居民之中唯一的医生，单这一点就足以令人敬佩了。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 社科 </tag>
            
            <tag> 畅销书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作 巨变时代的现状、挑战与未来</title>
      <link href="/post/6d1820cf.html"/>
      <url>/post/6d1820cf.html</url>
      
        <content type="html"><![CDATA[<h1>工作</h1><h2 id="本书目录">本书目录</h2><ul class="lvl-0"><li class="lvl-2">序幕 坚不可摧</li><li class="lvl-2">第一卷 美国的工作乱局<ul class="lvl-2"><li class="lvl-6">第一章 少吃苦头</li><li class="lvl-6">第二章 爬出棺材</li><li class="lvl-6">第三章 机器人该交税吗</li><li class="lvl-6">第四章 让他们去吃APP吧</li></ul></li><li class="lvl-2">第二卷 抉择<ul class="lvl-2"><li class="lvl-6">第五章 激情悖论</li><li class="lvl-6">第六章 心灵的习性</li></ul></li><li class="lvl-2">第三卷 学做工<ul class="lvl-2"><li class="lvl-6">第七章 儿童的功课</li><li class="lvl-6">第八章 注意(技术)鸿沟</li><li class="lvl-6">第九章 凝视千里之外</li><li class="lvl-6">第十章 当鬼怪抓住你</li></ul></li><li class="lvl-2">第四卷 重新思考<ul class="lvl-2"><li class="lvl-6">第十一章 芬兰之路</li><li class="lvl-6">第十二章 取消人力出租</li><li class="lvl-6">第十三章 朋克创客</li><li class="lvl-6">第十四章 能工巧匠</li></ul></li></ul><h2 id="本书评价">本书评价</h2><p>作者在书中详细探讨了<code>工作</code>，包括工作给人的心理带来的正面和负面的影响，工作对社会、经济、政治的影响。经过作者分析，“后工业时代没有带给我们预想的充裕丰富的工作机会，恰恰相反，更多人的实际感受是，工作，它不顶用了”。因此，本书着重分析了目前工作所面临的种种困境和挑战，包括工作机会的减少、工资的缓慢增长、工作条件的逐步恶劣，甚至更进一步工作对人的心理、收入分配等内容，都做了详细的讨论。可以说现状不容乐观，挑战空前巨大。在工作机会减少、薪资增长缓慢的同时，现在很多工作很难给人带来幸福，很难使人实现自我价值，这引发了更多问题。当然，作者主要考察的是美国，可见即使是在世界上GDP最高、最强大的国家，也没能完全消除工作的问题。当然，美国的民族性(在很多其他书中都有介绍，比如<a href="https://tephrocactushc.github.io/post/6b2a63.html">《为什么美国没有社会主义》</a>)等就认为美国人更加追逐财富。同时也要注意，美国并不是世界上最幸福的国家，作者在书中考察了芬兰，第十一章题为<code>芬兰之路</code>，芬兰人的幸福、自我实现，令美国人都很向往。</p><p>核心问题就是如何使工作得到意义，如何在工作之中得到幸福。这一点作者在本书最后几章得出一些可行的办法，比如合理利用数字技术，激发人的创造力等等。同时作者也呼吁社会、学校、公司、职工合作起来，营造更好的工作环境。</p><p>书中其实观点比较简单，大多数篇幅在于实证分析。关于实证分析，大体可以认为是将自然科学的实验的方法引入人文科学，即并不特别强调说理，相反非常强调有充分的论据支持，在法学、社会学中，实证的书籍近两年开始占据主流。这是一种正确的潮流，毕竟人不能主管臆想，来论证社会问题。</p><h2 id="丽泽书评">丽泽书评</h2><p>本书是一本讨论<code>工作</code>这一内容的作品。我们现在有个词叫<code>内卷</code>，事实上随着全球化面临危机、经济衰退，世界大多数国家都在面临类似的问题。那么，我们现在面临的现状，可以说是令人不满的，现在的工作报酬低、机会少、压力大、保障差，在面临被机器、计算机、AI替代的同时工作还大幅度侵占我们的生活，几乎让我们没有闲暇时间。而且，不光是我们以前认为的劳动力密集型工作，在书中作者着重考查了金融、房地产等高工资行业，以及STEM行业等技术型行业，却发现这些行业也面临同样甚至是更严重的问题。</p><p>但是，工作俨然已经成为了现代生活的一部分，事实上一份良好的工作，可以给人们带来更多<code>激情</code>等精神价值，而失业则会让人们的精神陷入空虚和消沉。因此，心理因素也需要被考虑进来。</p><p>而尤为重要的，则是我们的教育。工作的压力早已一步步地传导到我们的教育上，孩子们需要一路考上好学校，才有可能得到好工作。而另一些人则在拼命进行职业培训，以此希望增强工作实力。但本不该是这样，至少教育的目的不应该是培养合格的员工。</p><p>最后，作者探寻了一些可能的解决方案，虽然我们无法找到一条可行的道路，但是如果我们能够尊重员工、尊重每个人的价值并使其发挥出来，那么我们就会朝着好的方向发展了。</p><h1>本书内容</h1><blockquote><p>工作的最高意义在于，它应是人类的仆人，而非主人。——Edmond Bordeaux Székely，匈牙利语言学家、哲学家、心理学家。</p></blockquote><blockquote><p>然而，尽管数字能够说明许多问题，却无法解释我们之中很多人在当下的一个感受——工作不顶用了。 pii</p></blockquote><p>现状是如下的样子：</p><blockquote><p>美国的立国基础就是“关于职业的宏大叙事”：通过个人的不懈努力和群体的齐心合作，几乎所有人都能顺着职业阶梯爬到中产阶层，甚至更高。当然，并非每个人都有这样的人生轨道，但进入这一轨道的人数，足以说明该愿景的合理性。这样的稳定进程让人期许一代更比一代强，在20世纪的大部分时间中，这种期许也大多变成了现实。</p></blockquote><blockquote><p>后工业时代的数字经济虽然创造了些许高薪好职，但这只是一股涓涓细流；与之相比，那些乏善可陈的低薪工作才是滔滔洪波。由此，数字经济导致不平等的急剧扩大，对自由市场民主制度的前提——努力工作会带给我们需要的、想要的结果——构成极大威胁。pii</p></blockquote><p>不平等被加剧。而更可悲的则是人们的心态的变化：</p><blockquote><p>于当下令人晕眩的不确定性，职业生涯中的进展不再如以往那样是顺着牢固阶梯稳步上升，而是如同在光滑的冰崖上惊心攀爬，一失足就将万劫不复。甚至幼儿园小朋友都已对此了然于心。得克萨斯大学的教育研究员克里斯·布朗（Chris Brown）告诉笔者，5岁孩童很快就“学会了他们不该只想着现在，而要担心后面的事——一年级、初中、高中和大学，而这一切都指向他们在未来将要从事的、也就是我所说的‘工作’”。pii</p></blockquote><p>进步的代价</p><blockquote><p>事情本不该如此。数据时代赠予我们获得信息、使用网络的无限便利，提供了帮助我们把握自身命运的各类市场。这一切似乎都在承诺，我们的人生将会丰富充裕。当然，对一些人而言，这个承诺兑现了。然而，技术并没有像人们预见的那样打造出平等竞争的平台，相反地，技术的巨轮碾过，在我们的竞技场上轧出了更陡的山峰、更深的沟壑。我们一直被灌输这样一个理念：通过正规教育或培训，或二者结合，就能够磨炼本领，成为赢家。而现在我们将看到，这个理念并非无懈可击，因为它忽略了进步的代价。piii</p></blockquote><p>书中恰好关注到了一个悖论，后续我们会反复看到这一观点，就是人工智能很难做一些低端的劳动，却对很多需要高水平训练、推理的工作产生了极强的替代能力</p><blockquote><p>于人工智能的核心议题之一就是，有许多对人类轻而易举的任务，对机器则为难关；反之亦然。比如，修剪指甲和将水杯放上餐桌这样的动作，对很多人来说是小菜一碟，对机器却殊为不易；另一方面，那些涉及高水平推理的工作，如簿记、做账、各类银行操作，还有法律档案的分析和医学扫描，机器做起来更为拿手。由于这点和其他原因，中等薪酬的熟练工作和低薪工作相比，其被削减乃至淘汰的风险更大。“中产”遭遇困境，这对于甜蜜的美国梦而言可不是个好兆头。······互联网掏空了中间部分，提升了高低两极。麻烦的是高不成低不就的。piii</p></blockquote><p>因此，产生了一个极为可怕的现象：</p><blockquote><p>我们的时代咒语“告别平庸”当中暗含着某种威胁：中间层不复存在——你不在顶层，就在底层，或即将堕入底层。piv</p></blockquote><p>社会的不公平已经到了难以想象的地步：</p><blockquote><p>就卓越、或至少接近卓越的压力与日俱增，让人们陷入惨烈的你争我夺。在收入方面，大多数人距离顶层如此遥远，以至于所谓的“赢家”似乎居住在另一星球之上：1600名美国超级富豪拥有的财富，相当于后90%美国人的财富总和。这种戏剧化的差异使得我们格外渴望通过工作来告别平凡，使得我们更倾向于采用甚至合理化“赢者通吃”（winner-take-all）的手段与政策。这样做的后果就是，我们丧失了从工作中获得快乐与意义的能力。piv</p></blockquote><p>然后，全世界都卷起来了：</p><blockquote><p>在为数众多的儿童身上，我看到了深深的困惑和令人无力的焦虑；我也目睹了芸芸青年积聚着越来越强烈的憎恨和愤怒。我看见那些无耻的托儿在怂恿，让人们及其下一代“为工作做好准备”，而这背后是教育系统的衰败和信念的动摇。我看见，任何“成就”，只要它能够让简历更加光鲜，那么无论其目的多么琐碎无聊，人们都为之鼓掌欢呼；我也看见，许多发自内心的努力，只因不能带来明确的镀金效果，就被人轻视甚至嘲笑。**我亲眼看见对工作日积月累的焦虑将很多人——尤其是年轻人——变成了生怕走错一步的冒险恐惧者。**pv</p></blockquote><p>然而，目前面临的问题是：</p><blockquote><p>第一个障碍是如下假设：可量化的效率是进步的首要推手。·····然而，进入数字时代，这种逻辑出现了漏洞。我们对效率的追求有时不容置疑，这让我们低估了工作和生活质量的重要性。······另一个让人不安的趋势是，工作者的收入与其付出不成比例。pvi-vii</p></blockquote><blockquote><p>因此，本书的目标之一，即重新校准以下二者平衡的度量仪：其一为对工作效率和生产力的无尽要求；其二为人自身固有的生产意愿及获得对等报酬的需要。pvii</p></blockquote><blockquote><p>我们或可达成一个共识：<strong>好工作的意义可以超出市场价值，而且事实也常常如此。</strong>······没有人生来就具有从事一份职业的倾向。pviii</p></blockquote><p>然后，第一部分我们得到了就如下的内容:</p><blockquote><p>工作因其丰富、复杂、欢乐和痛苦而成为人类繁荣兴旺的不可或缺之物。px</p></blockquote><p>第二部分主要是心理学的内容：</p><blockquote><p>耶鲁大学管理学院的心理学家艾米·瑞斯尼维斯基（Amy Wrzesniewski），她的研究领域就是人们如何理解自己。她指出，我们做什么来谋生并不总是决定我们如何看待这个谋生之道，至少不是以我们所认为的方式来决定。pxi</p></blockquote><p>最终作者自己认为本部分会得到如下问题：</p><blockquote><p>我们即将明白，理解工作的意义最终在很大程度上是一个DIY命题。</p></blockquote><p>本书第三部分考察了教育，而第四部分考察了未来。</p><h2 id="序幕">序幕</h2><p>分析了马林塔尔的社会调查报告，描述了1929年大萧条时期的工人失业的状态。</p><p>他们得出了一些可怕的结论：</p><blockquote><p>被剥夺了生计的村民既没有团结起来进行抗议，也没有诉诸其他任何政治行动。他们只是逆来顺受。p3</p></blockquote><blockquote><p>在马林塔尔，失业本身已经变成了一种“工作”，人们从事的不是反对体制，而是一种苦不堪言的相互对抗的工作。他们孤立无援而又刻薄悲观。他们窥探彼此，动辄举报彼此······p3-4<br>更可怕的是，人们无所事事，整天在虚无之中度日。然而，马林塔尔最古怪的现象不是餐盘里的狗肉，而是人们抛弃了他们的时间观念。p4</p></blockquote><blockquote><p>事实却是，社区原子化，每个人都争先恐后地为自己抢夺一点好处。研究人员做了如下总结：靠救济金生活，既不是社会主义学者们所认为的那种振奋人心的经历，也不是穷人批判者们所说的“不事生产、享受闲暇”的借口。失业本身就是一个打击斗志、扼杀灵魂和制造危机的魔鬼。1971年发表的美国版研究报告中，研究者在前言部分做了如此概括：“闲暇被证明是一份悲剧性的礼物。”p4</p></blockquote><p>然而有趣的是<code>失业</code>对男女不同：</p><blockquote><p>他们写道：“严格意义上的‘失业’一词只对男性适用，因为女性只是没有报酬，而不是真正地失业。”p5</p></blockquote><h2 id="第一卷">第一卷</h2><h3 id="第一章">第一章</h3><p>第一章从失业开始，首先说明<code>合适</code>这个现象，意即雇主更喜欢三观相和的人而不是工作能力更强的人。同时说明了当今工作的压力不断增大，尤其反直觉的是高薪工作反而更累、更没有闲暇。最后，人们出现了不去劳动的现象。</p><blockquote><p>将每一次挫折归咎于自身而非体制。这种自责让太多人深受其害。我们固执地相信一个神话：职业轨道的操控在于个人。p11</p></blockquote><blockquote><p>在以色列，如果求职者被拒，他们往往归咎于制度。在美国，被拒的求职者更加倾向于自责。p12</p></blockquote><blockquote><p>他们必须塑造这样的人设：既有团队精神，又有个人主动性，并且对公司提供的任何服务或产品永远充满热情。p13</p></blockquote><p>我们在找工作时，总会遇到“<strong>合适</strong>”这个词，但是作者并不认为“合适”一词是真的意味着某个人适合某个工作，而是:</p><blockquote><p>但是，当雇主谈到“适合”时，他们并不一定是在谈论个人的偏好和倾向，更多是有意无意地描述与他们自己一致的行为和态度。p15<br>因此，会产生这样一种现象：社会学家劳伦·里维拉（Lauren Rivera）:这些公司的评估者不仅寻找同事，还寻找灵魂伴侣：和他们具有同样价值观、思想和血统的人。面试官往往会把个人的感受放在首位：应聘者是否让他们感觉舒适、合适、兴奋。他们并不那么重视应聘者是否具备卓越的认知和技术能力。在许多方面，他们聘用的方式并不像社会学家所描述的雇主挑选雇员的方式，而更像是在选择朋友或情侣。p16-17</p></blockquote><blockquote><p>现实是，就业市场已经越来越像折扣店，许多人根本无法获得一份配得上他们的能力、才华和教育水平的工作。然而这一现实太令人不安了，以至于大多数人无法面对。所以，我们只能埋头苦干，努力使自己成为一个“合适的人”。p20</p></blockquote><p>因此，很多人开始<code>逃离工作</code>：</p><blockquote><p>社会科学家为这种所谓的“逃离工作”（flight from work）提供了多种理论，但并不是所有的理论都令人信服。然而大多数人同意，**这归根结底是经济和社会福祉的明显恶化，特别是在曾经繁荣的美国工人阶级中的恶化。**p21</p></blockquote><p>然后，人们失去了希望：</p><blockquote><p>凯斯和迪顿提出了一个令人信服的理论：原因在于希望——或者更确切地说，缺乏希望。p22</p></blockquote><blockquote><p>一个人要具备对工作的“心理所有权”p22</p></blockquote><blockquote><p>这些发现在很多方面是反直觉的。在更早的时代，与这种奴隶般的工时捆绑最紧密的不是精英，而是低收入工种——文员、工厂工人和农场雇工，因为他们在这件事上别无选择。富人享受他们的闲暇时光，并以此为荣。他们认为“挣扎求生的阶层”很可怜。如果你已拥有一切所需和大部分所欲，为什么还要流汗苦干呢？如经济学家索尔斯坦·凡勃伦（Thorstein Veblen）在《有闲阶级论》（The Theory of the Leisure Class）中所言：“放弃劳动……是业已获取卓越经济成就的传统标志。”p24-25</p></blockquote><blockquote><p>老板满足他们的每一个需要——吃饭、干洗衣物、汽车保养——简直就是全天候的支持。咖啡和糖果无限量供应，咖啡因和糖结合，激发出米歇尔所说的“持续的神经应激状态”。p26</p></blockquote><blockquote><p>雇主们越是谈论工作与生活的平衡，这个问题就越是严重。他们本来就不去区分工作和生活，越是把二者混为一谈，就越容易榨取员工的劳动。p26</p></blockquote><blockquote><p>精力优先于经验，全天候上班，以及工作和家的合并，这些都是当今高压工作场所的特征，无论是在纽约的摩天大楼还是在孟菲斯的仓库中。即便是看似无害的开放式办公室（令人想起交易大厅或投资银行），也已成为实施控制的武器。p28</p></blockquote><blockquote><p>广为流传的“颠覆性创新”一词，源于哈佛商学院的经济学家克莱顿·克里斯滕森（Clayton Christensen）。他在1997年出版的畅销书《创新者困境》（The Innovators Dilemma）中提出这一概念，随即风靡商界，尤其是科技行业。p29</p></blockquote><blockquote><p>神经学家发现，当我们察觉被人拿来与其他人做比较时，我们天生的“战斗或逃跑”（fight-or-flight）的反应就会起作用，释放出与压力有关的荷尔蒙，导致易怒、失眠和焦虑。p31</p></blockquote><h2 id="第二章">第二章</h2><p>现在雇主要求员工为工作奉献自己的一切。工作给人带来越来越多的痛苦。</p><blockquote><p>“零阻力员工”（zero-drag employee）——专注工作，不受家庭、公民责任或其他任何事物的干扰。《在云端》提醒我们，“得到一切”可能意味着为工作交出一切，而工作并不会给我们好的回报。p34</p></blockquote><blockquote><p>进化人类学家马歇尔·萨林斯（Marshall Sahlins）就已提出这样的观点：如果可以选，大多数人会选择休闲而不是劳动。p35</p></blockquote><blockquote><p>德国哲学家黑格尔用了大半生为自己的报酬而奋斗。他认为，出于非必要的苦干不是人类的自然倾向。p35</p></blockquote><blockquote><p>新教工作伦理·····抱团赞颂工作的“尊严”，把“无所事事的富人”连同他们的统治阶级势利推出老远。p35</p></blockquote><blockquote><p>马克斯·韦伯所说的“拯救焦虑”（salvation anxiety）。那是一种持久的不安，唯一的治愈方法就是充满信心的艰苦劳动。这种理念认为，既然懒惰是一种罪，那么勤劳工作就为通往天堂的道路扫清了障碍。p36</p></blockquote><blockquote><p>**除了帮助支付账单和迫人劳碌，工厂将剥夺工作本身内在的人类价值。**p36</p></blockquote><blockquote><p>在这个星球上，没有任何其他国家的国民能像美国人一般乐在其中。活跃的职业生涯不仅是他们幸福的主要来源，也是他们民族之所以伟大的基础。如果缺少工作的支撑，美国人就是绝对悲惨的。p37</p></blockquote><p>美国人认为一切都可以靠奋斗实现，但现实不是这样</p><blockquote><p>美国人似乎“不欠任何人任何东西，他们对任何人都不抱任何期望；他们养成了一个习惯：总是认为自己是独立作战，想象整个命运掌握在自己手中”。美国人“倾向于”想象命运掌握在自己手中，托克维尔认为这有点天真得可爱。他说，如果他们真有这样的控制权，他们早就个个发财了，然而事实上“［美国］大富豪的数量却很少”。p38</p></blockquote><p>但更重要的是：</p><blockquote><p>但我们也意识到，真正重要的不是我们付出多少劳动，而是付出什么样的劳动，后者在很大程度上取决于我们出生的环境。p38</p></blockquote><p>比起技能培训，我们更需要掌握批判性思维</p><blockquote><p>最突出的是分析技能——批判性思维、逻辑思维和推理。······现在重要的不是固定技能本身，而是发现、抓住并充分利用机会的能力。p39</p></blockquote><p>然后来到了本书的一个比较重要的结论：</p><blockquote><p>令人震惊的是：总体而言，数字技术导致了对高薪、高技能工作需求的下降。p41</p></blockquote><p>更进一步，很多中间的职位减少了，相反底层的工作岗位迅速增加。</p><blockquote><p>数字时代的资本主义似乎由于对就业机会进行两极分化威胁到了数字时代的民主——在高层增加了一些工作岗位，在底层增加了更多工作岗位，同时挤掉了许多稳定的中层工作岗位。p42</p></blockquote><p>这里有一个形象的比喻：</p><blockquote><p>仿佛一波来势汹涌的浪潮席卷了我们的海岸，退潮时，留在岸上的是数百万个糟糕的工作岗位，而数以百万计的好工作则被卷进海水中。p42</p></blockquote><p>事实上，没有什么找不到员工的，给人极低的工资，怎么会招到员工呢？</p><blockquote><p>雇主们抱怨他们找不到足够的“好员工”，但这通常并非真的因为好员工匮乏，而是因为好员工受不了那些低收入的不稳定工作。英国经济学家盖伊·斯坦丁（Guy Standing）撰写了大量文章，阐述他所说的20世纪那种个人财富主要来自工资的收入分配体系的崩溃。如今，与之形成鲜明对比的是，财富从工薪阶层流向“食利者”，即金融、实物或知识财产（比如软件）的所有者。他创造了“朝不保夕族”（precariat）这个词，用来描述一个饱受“4A”毒素煎熬的新工人阶层，这4个A即焦虑（anxiety）、失范（anomie）、异化（alienation）和愤怒（anger）。p42-43</p></blockquote><blockquote><p>基本的经济原则表明，劳动力过剩而不是短缺，才会使得雇主有底气提出低于标准的条件。一旦这些条件获得改善从而导致大量就业申请，“劳动力短缺”的说法就站不住脚了。p45</p></blockquote><p>为自己工作也并不一定是好现象。</p><blockquote><p>所谓为自己工作的人实质上是在为暴君工作——你的价值仅仅在于你最终的工作表现。你总在被评估、被打分。一直要担心下一块面包在哪里，这意味着对自己的生活失去了控制。p43</p></blockquote><p>同时，人们开始渴望稳定。p46-47</p><blockquote><p>**如何使自己适应一个日益不稳定的工作时代？这不是一个容易回答的问题，也不适合一概而论。没有放之四海而皆准的路径，也没有一个确定的解决方案，但对许多人来说，第一步是质疑一个深入人心的假设，即我们必须让自己去适应工作，而非创造我们能掌控的、适合自己的工作。**p47</p></blockquote><h3 id="第三章">第三章</h3><p>这一章着重分析了信息化、自动化带来的找工作困难的情况，这当然不是新鲜的观点。同时本章有大量的实证分析，因此不详细赘述。</p><p>事实上，除了老生常谈的极其不会劳累、效率高之外，有一个很重要的点就是机器和AI会很好地使人避开处理人际关系，这一点非常重要。</p><blockquote><p>如果你曾经在生产车间与人打过交道，你就会知道原因。机器不会耍态度，没有状态起伏，没有‘问题’。······我们会感到疲倦、饥饿、分心、愤怒、困惑。我们会犯错，有时会犯大错。机器没有人类的弱点和偏见，能够排除偏见和错误假设从而更好地权衡。p58-59</p></blockquote><p>从chatgpt的出现，我们更加感受到某些需要长期训练的、依赖于经验和推理的工作，会很快被取代。</p><blockquote><p>我们都以为，最受威胁的是常规性工作（特别是那些高薪的常规性工作），比如簿记和文件检索等一些“知识”工作。我们确信，在可以预见的未来，那些需要决策和个人主动性的“创造性”工作将继续留在人类领域。但在访谈数十位计算机科学家、工程师和经济学家之后，我意识到，风险最大的并非总是复杂性最小的工作。在某些情况下，风险最大的恰恰是最复杂的工作。p62</p></blockquote><h3 id="第四章">第四章</h3><p>本章讲述了科技公司无法创造大量高薪岗位，但它又干掉了很多低薪的岗位。</p><p>在这里我们又看到了美国的民族性。</p><blockquote><p>事实上，整个美国都对那些为创造商机而不惜赌上一切的冒险家情有独钟。在欧洲，学童们被教育要尊敬诗人和哲学家；在美国，他们学到的则是崇拜像史蒂夫·乔布斯、比尔·盖茨和埃隆·马斯克这样的企业家。“商业英雄”这个词本身就有明显的美国味儿。对我们而言，“英雄”通常意味着“创新者”，无论这种创新会给个人和国家带来怎样的未来。现在的问题是，创新什么？为谁创新？p68</p></blockquote><p>在69-71，作者得出了另一个结论，就是start-up本身并不一定会提供更多就业，相反只有那些快速扩张的公司才会。</p><blockquote><p>创造更高效的机器以缩小对人类劳动力的市场需求，我们在这方面的能力几乎是无限的；利用数字技术以减少对人类思考力的市场需求，我们在这方面的能力更是无远弗届。我们正处于一个关键的转折点，过去的经验不再是未来的可靠指南。我们急需重新考虑工作的前景和目的，并制订一项不是基于自由放任的万灵药，而是真正有据可依的计划。第一步是找出需要保留的工作要素，这些要素可以正本清源，扩展对于“工作”意义的狭隘厘定。也就是说，这些要素不仅对我们的经济和民主，而且对我们的人性至关重要，它们需要被甄别出来，大力保护。p72-73</p></blockquote><h2 id="第二卷">第二卷</h2><blockquote><p>一个人要想生存就得工作。若他想要好好生活，他的工作必须富有成效和意义。——Langdon Gilkey，美国神学家。</p></blockquote><h3 id="第五章">第五章</h3><p>本章作者开始考察工作的意义，其中包括了<code>激情</code>，就是人们如何去看待自己的工作。</p><blockquote><p>在每一个职业中，工作的意义不仅在于做了什么，更在于这一过程带给人的成长。——Edward Howard Griggs，美国作家、教育家p77</p></blockquote><blockquote><p>看来，专注于任务并保证其成功完成，给他带来了一种在生命的其他领域——无论是在智力层面、人际关系层面，抑或精神层面——难以复制的满足感。这份工作给了他所需要的东西。p78</p></blockquote><p>工作其实也给人一种归属感。</p><blockquote><p>工厂让数以百万的人实现了稳定、专注，并获得了生命中的群体归属感。······在一起工作则可以为某种更大的目标做出贡献。当然，工会放大了这种团结的感觉······对于许多工人来说，工厂可以成为第二住所，而同事则是第二家庭。p79</p></blockquote><p>那种在工作之中相互链接得到的感情，也是相当一部分人热爱工作的关键。</p><blockquote><p>重要的不是工作这种行为，而是一起工作的人。······消防员不一定通过有些人所声称的方式——自主性，复杂性和直接奖励——从他们的工作中获得意义。相反，他们获得的意义似乎来自相互联接，这种类似“兄弟连”的情感为他们带来意义。对警察、士兵及许多其他行业的人也是如此。p88</p></blockquote><p><strong>心流，也许是享受工作的关键！</strong></p><blockquote><p>他们能够进入所谓的“心流”（flow），它是这样一种心理状态：人们被一项工作本身深深吸引，以致忘却自我，并不觉时间流逝。而且，不仅像艺术家和外科医生这样的高级专业人士在工作中找到了心流，达到这种境界的还有蓝领工人。p81</p></blockquote><p>但是，心流很难进入，有三个条件：</p><blockquote><p>实现心流的3个关键前提：保持明确的目标和进步意识；将精神能量集中在项目上；保持挑战和能力的平衡，即任务应该具有挑战性但不至于令人生畏。p82</p></blockquote><p>然而，“被他人监视、评判并规定时间的情况下，很少有人能够达到心流状态”p82，相反:</p><blockquote><p>事实上，玩电子游戏是进入心流最可靠的方法之一，因为电子游戏可以满足齐克森米哈利强调的实现心流的所有要求——激发专注和进步感，以及不断加码但仍可对付的难度。p82</p></blockquote><p>心流的概念可以追溯到尼采:</p><blockquote><p>心流的概念或许可以追溯到哲学家弗里德里希·尼采，他强调保持乐观和建设性态度的重要性。尼采写道：“对必须要做的事情，不仅要忍受，还要爱它。”但在此，尼采并不是说我们可以学会爱工作。p83</p></blockquote><p>然后，作者开始考察<code>热爱</code>，人们普遍都强调要热爱工作是获得幸福的关键，然而遗憾的是，大多数人没有热爱或者热爱并不高雅。</p><p>同样的，人们更需要的也许是稳定。并且，热爱是一种强烈的、近乎疯狂的情感，但职场并不需要这种情感。p89</p><p><code>PASSION</code>（热爱，激情）的源头到底来自于哪里？本书认为可以上溯到马斯洛。他的<code>需求层次</code>理论。当然，分析后，发现蓝领工人更注重稳定性、人际关系、福利和职业安全感，也就是说，大部分人并没有什么自我实现，但是他们拥有了安全感和归属感，也就会感到幸福了。</p><h3 id="第六章">第六章</h3><p>本章开篇介绍了两种心理学家，消极心理学家比如弗洛伊德，更加关注绝望、偏执等病态心理，而积极心理学家比如马斯洛更加关注乐观、勇敢、坚韧等心理。</p><p>《心灵的习性》（Habits of the Heart）总结了人们对工作的3种定位：饭碗（job）、事业（career）和神召（calling）。它实际上描述的是一种态度和性情，它并不指向特定职业，而是一个人如何对待工作。</p><p>然而，神召会导致剥削，甚至有人筛选神召者，并用算法找出他们。</p><p>并且，随着监督的推广，大多数人在工作中也不感到快乐，因为他们不被信任。这也会导致信任危机。</p><blockquote><p>大多数相关研究表明，监督极大地增加了工作压力，导致员工对工作的疏离，降低他们的工作满意度，并传达了这样一种理念：工作的量比质更加重要。p105</p></blockquote><blockquote><p>当人们被信任，能够从所做的事情中获得意义而不是被迫将工作本身视为有意义，这种情形下的工作表现最好。p105</p></blockquote><p>我们也更应该去关注员工的尊严。</p><blockquote><p>作为需求层次范式的奠基人，心理学家马斯洛曾在日记中坦言，自己的理论是一种折中方案，试图在不冒犯主流意识形态的前提下，从组织精密的官僚层级中突围。他的目标不是直接帮助员工，而是帮助雇主创造一种将个人需求与组织需求自然融合的环境。对于马斯洛及其20世纪的许多同代人来说，这是一个双赢的策略——他们认为，如果员工感到幸福，则企业繁荣，个人也会从中受益。p107</p></blockquote><p>而且，越是热爱，越难以从工作变差之中走出，而不热爱，却能很好地接受。书中举了艺术家的例子。</p><blockquote><p>如今所有人都面临着要“做到最好”的压力。她告诉我：“雇主要求我们全力以赴，让我们和自己的岗位融为一体。他们希望员工通过专攻一个非常狭窄的领域来实现卓越。我们的价值取决于为组织所做的贡献。但这是一个非常危险的模式。今天你或许还是人上之人，如果明天被解雇或降职，你就将一无是处。如果——由于之前的工作——你是个特别专业化的人，你的技能无法应用到其他地方，你就失去了你的整个工作身份。这会是个可怕的精神打击。”p109</p></blockquote><blockquote><p>好的岗位（job）越来越少，我们的应对措施不应是试图“创造”更多“有意义的岗位”，而是应该打消在岗位中寻找意义的想法。显而易见，工作（work）是无穷无尽的。如果每个人都能按照自己的自然天性去工作，我们将会拥有一个美好得多的世界。p110</p></blockquote><h2 id="第三卷">第三卷</h2><blockquote><p>教育不是注满一桶水，而是点燃一团火。——W. B. Yeats，爱尔兰诗人、作家。</p></blockquote><p>第三章是本书的核心部分了，考证了教育和工作之间的关系。</p><p>有啥用？当年是日本，现在是越南。看看现在日本啥B样。这样的国家真的能够强大幸福吗？</p><blockquote><p>大小企业主都在抱怨，我们的高中毕业生缺乏就业准备。另外，全国足有1/4以上的年轻人没有读完高中。许多高中毕业进了大学的人仍需要补习阅读和写作课程，目前全美约有2/3的大学提供这些课程。所有仍在上学的17岁少年中，近13%是功能性文盲，44%几乎不能读写。在辍学的学生中，约60%是功能性文盲。而在美国最重要的竞争对手——日本，高中毕业率和识字率全球最高，接近100%。日本学生学业更重，学到的也更多……在科学和数学方面，日本学生的考试成绩居世界第一。哦，那些狡猾的日本人！他们的车更时髦，食物更健康，现在连他们的孩子都比我们的更聪明了！把美国的教育“危机”视为对经济的威胁，有助于工业巨头们重拾他们在学校教育上的思想领袖地位，尽管他们当中的许多人对教育知之甚少。p114-115</p></blockquote><p>教育的目的从成为一个合格的公民，转变为为进入职场做准备。哪怕是美国，也没能保持住理想情况。</p><blockquote><p>如今，将教育和就业准备混为一谈已成为惯例，但当初美国的创立者们认为，教育并不是岗位培训，而是成为公民至关重要的准备。18世纪70年代，托马斯·杰斐逊起草了《知识普及法案》（“A Bill for the More General Diffusion of Knowledge”），他开宗明义地写道：“那些被赋予权力的人一步一步地将权力变成了暴政。我们相信，防止这种情况发生最有效的方法是，在切实可行的范围内启蒙广大人民的思想。”p117</p></blockquote><blockquote><p>随着工业的兴起，公立学校的工作重心开始转为就业准备。（为教育而教育的模式仅限于精英阶层，他们中的大多数人把孩子送到私立学校。）埃尔伍德·克博莱（Ellwood Cubberley）曾在1917—1933年担任斯坦福大学教育学院院长，他不无赞许地将公立学校描述为“一个工厂，在那里，初级产品（儿童）经过设计和加工，成为能够满足生活中各种需要的产品”。美国国家制造商协会（National Association of Manufactures）主席西奥多·瑟奇（Theodore Search）衷心赞同这一观点，声称公共教育的主要产品是“为各行各业培养出的熟练双手和训练有素的头脑”。老约翰·D.洛克菲勒的顾问、德高望重的弗雷德里克·T.盖茨（Frederick T. Gates）曾表扬过一所“明日的乡村学校”，在那里，“人们完全顺服于我们对他们的塑造。我们并不试图让这些人或他们的子女成为哲学家、学者或科学工作者，也不试图从中培养出演说家、诗人或作家。我们丝毫不指望从中发现艺术家、画家，或是音乐家，也不需要他们成为律师、医生、传教士、政治家，这些行业的人才已经绰绰有余”。到了20世纪初，许多公立学校都建立了赤裸裸的科层制，学校负责人（大多为男性）相当于企业CEO，对普通教师（通常为女性）进行管理。p118</p></blockquote><blockquote><p>许多有远见的改革者认为，教育不是要把孩子变成工业原料，而是要引导他们学会独立思考。然而，时至今日，将学校当作工厂的依然大有人在，因而也一直有人在抨击这种迷思。p119</p></blockquote><p>但是，如果把学生视作商品，那么由于供需关系，学生越多，反而议价能力越低。</p><blockquote><p>一个几乎可说是残酷的反讽：只有在接受高等教育的机会最为稀缺的年代，高等教育的市场价值才是最大的。p120</p></blockquote><blockquote><p>随着越来越多的人接受教育，教育的市场价值相对下降了。简单地说，技术发展导致对受过教育的工人的需求增加，但这种需求总是被准备满足它的人数超过。p121</p></blockquote><blockquote><p>教育对收入不平等的影响有限。p122</p></blockquote><p>社会学家研究了这样一个问题：是精英教育本身会增加收入，还是追求精英教育的学生更可能成为高收入者？</p><blockquote><p>发现在控制野心和动机等变量之后，精英与非精英学校毕业生的终身收入大致相同。有抱负、有驱动力的学生更有可能进入精英大学，而正是这些人格特质——不一定是他们就读的学校——能更好地预测未来的成功。p122</p></blockquote><p>而且，有一个更加残酷的现实：</p><blockquote><p>相对而言，寒门之子获得的大学文凭价值不是更高，而是更低，不管他读的是哪一类大学。是的，你没看错，大学学位对弱势群体的平均价值比对其他群体的平均价值要低。p124</p></blockquote><p>因此，产生了如下一种诡异的“内卷现象”：</p><blockquote><p>学校正在培养我们的公民去做那些现在根本不存在，或是未来将不复存在的工作。如果是这样的话，所谓的大学学位溢价究其实质恐怕是一种对“没有大学学位”的惩罚，也就是说，学位本身并不能给我们创造更好的工作生活，但没有学位却会更糟。这种区分不仅仅是语义上的诡辩，而是理解教育成就和就业之间日益拉大、令人不安的鸿沟的关键。对大多数人而言，预测就业轨迹的决定性因素并非教育本身，而是和教育相关的社会经济地位。p126</p></blockquote><p>我们可以发现美国人也卷起来了：</p><blockquote><p>在本书写作之际，近年的大学毕业生接近一半都在从事实际上不需要大学文凭的工作，从这个意义上说，他们并没有充分就业。p127</p></blockquote><p>太熟悉了这个画面，越南用几十年走完了发达国家上百年的路，发达国际前面正确的路还没走，直接走后面错的，厉害厉害：</p><blockquote><p>大学文凭很可能只是一些雇主使用的分类机制，而这个机制未免有失偏颇。p128</p></blockquote><p>事实上，我们的教育出了什么问题：</p><blockquote><p>体制扭曲了教育成功的标准，这个体制旨在满足雇主需求，而非促进个人能力和长处的发挥，或是建立个人的价值观。p128</p></blockquote><blockquote><p>这是一种欺诈：大多数人被骗相信了一个只对少数人真正有意义的东西。······他们反对的不是教育本身，而是这样的教育：它已经沦为继承特权的委托书，而不是建造更好生活的脚手架。p128</p></blockquote><p>其实，之所以内卷起来，主要是因为分配不公平，而教育，只是成了替罪羊。</p><h3 id="第八章">第八章</h3><p>着重讨论了供需关系，也就是说，很多工作并不真的需要很高的技能，仅仅是因为供需关系导致的。同时，雇主还会做虚假招聘，一方面是碰运气，另一方面也是表示经营成功。</p><blockquote><p>一个削弱了他们所有努力的制度。p133</p></blockquote><p>现在工作越来越不把人当成人了。</p><blockquote><p>将工人与家畜相比如今已不再可接受，但人们又接受了另一种说法：没有足够多的美国人能满足数字时代对工作的严格要求。按照这种说法，美国人如此愚笨以至成了阻碍创新的绊脚石，这种创新原本可以刺激经济并最终创造更多的就业机会。据此推理，工人们没有工作都是他们自己的错，只能怪他们自己没能努力跟上。p135</p></blockquote><p>然而，虽然“技术鸿沟”被广泛应用，：</p><blockquote><p>问题不在于工人缺乏技能，而在于雇主找不到足够的工人去从事只需要最基本技能的低收入工作。p137</p></blockquote><p>而STEM学生的现状同样不容乐观，STEM学生太多了，以至于没有那么多岗位。实际上，从来没有什么不能胜任的说法，就是内卷起来了。</p><blockquote><p>经济学家保罗·克鲁格曼（Paul Krugman）曾经创造了“僵尸观念”（zombie idea）一词，用以表示“被一再证明错误，却拒绝死亡”的理念。技能差距就是僵尸观念中的一个，它是一个非常恶毒的模因，正如克鲁格曼所说，“吞噬了我们的大脑”。p141</p></blockquote><blockquote><p>我们教育人们更用力地挤压橘子去榨汁，而不是栽种新的树。p142</p></blockquote><blockquote><p>如果工作环境中确实存在差距，与其说那是技能差距，不如说是机会差距，p144</p></blockquote><p>如何解决？追求个性，为员工赋能，让他们独立思考也许可行。</p><h3 id="第九章">第九章</h3><p>这一章描写了产业链的龙头破产后，整个产业链发生断裂，产生大面积、规模性返贫的社会情况。</p><blockquote><p>真正的沮丧，是凝视千里之外.p149</p></blockquote><p>社区大学开始做职业培训，他们希望培训出足够多有技能的人员，以此发展某个产业。然而，很多人还是没有工作，即使他们有学位也一样。</p><p>事实上，还是供需的问题。</p><blockquote><p>他们相信，失业和就业不足并非因为好工作短缺的系统故障，而是因为个人未能跟上市场不断变化的需求p158</p></blockquote><blockquote><p>如果太多人接受了某个特定工种的培训，当他们大量涌入就业市场时，该工种的工资就会下降。p159</p></blockquote><p>目前，美国没有找到出路，人们发现了职业培训的问题，但不知道如何走出。</p><h3 id="第十章">第十章</h3><p>本章开篇就介绍了人们已经卷起来了。很多学生非常优秀，仍然在拼命学习。社会经济体系在很多地方显得陈旧，不能适应21世纪的要求，两极分化越来越严重，农村制造业比起城市更容易受到全球化的冲击。一些人开始探索新的模式，比如将传统手工转型为艺术，以及通过互联网教学普及教育。</p><p>最后，引出了不确定性，而芬兰，则很好解决了不确定性。</p><h2 id="第四卷">第四卷</h2><h3 id="第十一章">第十一章</h3><blockquote><p>工作给予人的最高奖赏，不是让他们得到什么，而是让他们经由工作，成长为怎样的人。——John Ruskin，英国作家、艺术家、哲学家。p179</p></blockquote><p>芬兰与美国不同。其实芬兰的基础条件很差，知道1960年代，都是欧洲的阿巴拉契亚，以农业为主的贫穷落后之地。芬兰没有自然资源，大部分城市在北极圈里，自然环境恶劣，芬兰语和印欧语系都不相同，没人愿意学，资源全靠进口。但是它的贸易伙伴苏联在解体后，芬兰出现了工业化国家所遭受的最严重衰退。<strong>但是为什么一切都改变了？芬兰成为了世界上最幸福的国家。芬兰人不用担心住房、医疗、教育问题，这几乎是越南人最关心的问题。主要在于以下的方面：</strong></p><blockquote><p>他们特别奉行平等主义，逐渐采取措施，使多数人而非少数人收益。他们投票赞成大幅度增加公共服务，如教育、失业救济、医疗保健、基础设施、学术研究和社会发展。随着时间的推移，这种对人力资本的稳定投资，将曾经孤立、能源匮乏、语言受限的闭塞之地，变成了世界上最具生产力和创新能力的国家之一。p183</p></blockquote><blockquote><p>芬兰人并不依靠向上流动的愿景来捍卫低工资，而是将每一份工作本身当作一个目的，不管这份工作的前景如何。在芬兰，“认真工作、合理取酬”所言不虚。p183</p></blockquote><p>而重点在于芬兰的教育：</p><blockquote><p>我们是一个小国，所以我们不能失去任何人。我们的经济是研发驱动的，所以我们特别在乎劳动力。芬兰的研究人员与工人比例居于全球首位，我们也是创新率最高的国家之一。部分原因在于我们实行的员工保护措施，如果没有这些保护，他们就不会冒险，而创新需要冒险。无论以前来自哪里，每一个生活在这个国度的人，都具有做出贡献的潜力，我们要做的就是尽一切可能帮助他们实现这个潜力。”他继续说道，芬兰并不花太多注意力来预测未来的工种或是为其进行培训，他们更加注重帮助公民获得相关的知识、工具和资源，以求在变幻莫测的世界经济中走出自己的路。“重要的是停止那种行业划分的思维模式——生物技术、纳米技术、IT，各行各业将如何如何。一旦某个行业的工作数字化，它的岗位就可以去任何地方。因此，让一个国家专攻某一行业没有意义。在我们看来，更加有效的是鼓励人们成为通才，赋予人们内在的能力，让人们为自己的将来开创新的工作。”p186</p></blockquote><p>芬兰注重教育，重视每一个学生，一个学生的小问题足以让教育专家、学生、家长坐在一起长谈80min。在芬兰，师范学校竞争极大，老师地位很高。</p><blockquote><p>校长的职责是满足老师们的需要，而老师们要努力满足学生和家长的需要。p188</p></blockquote><p>芬兰的学校就像小联合国，哪里的人都有，<strong>到初三毕业，每个学生都能至少流利讲三门外语</strong>。当然，七八门的大有人在。</p><p>并且，芬兰鼓励学生说出自己的想法，这不像弱势群体的学校，更像美国的精英教育。</p><p>为什么芬兰的教育这样，原因好像很简单：</p><blockquote><p>我们之所以要关照每一个学生，只是出于如下计算：如果不早点帮助他们，今后就要付出更大代价，因为他们将来是要为社会工作的。就这么简单。p191</p></blockquote><p>连美国人都认为自己的教育不鼓励学生冒险和独立思考，那么远远不如它的朝鲜呢？</p><blockquote><p>芬兰的成功归根结底是让学生免于恐惧。······这就是美国教育系统对许多学生所做的：惩罚那些勇于冒险但可能给出‘错误答案’的学生，结果就是大家都视学习为畏途。p191</p></blockquote><blockquote><p>他们认为，帮助学生为未来的不确定做好准备的最好方法，就是鼓励他们去问问题，最好是老师无法回答的问题。191</p></blockquote><p>以下又是一些可怕的现状：</p><blockquote><p>他们不确定别人对他们的期望是什么，他们认为对自身价值最好的证明就是展示耐力——坚持长时间工作。当一天漫长的劳动结束，他们却拿不出什么成果。······如前面几章所述，每个人都以自己的方式从工作中获得意义。但在许多工作环境中，意义的创造变得很难，甚至根本不可能。持续被迫分心破坏我们努力实现的“心流”，持续的监控削弱了我们的控制感。波哈卡利奥谈到一种“黑客”心态，就是鼓动员工先行动、后思考，或者根本不要思考。p193</p></blockquote><blockquote><p>团队合作带来力量可能是一个错误的信念。事实上，从几十年前就开始有研究表明，头脑风暴很少会产生新的解决方案，反而可能阻碍创新思维。群体压力往往会把团队成员推到由组织者预先设定的思维模式中。许多人在自己的工作中经历过这种令人沮丧的“群体思维”，在这种情况下，由于大家急于达成符合管理目标的共识，任何真正新颖的想法都会被推到一旁。p194</p></blockquote><blockquote><p>工作/生活平衡是一个过时的概念。‘平衡’这个词本身就意味着冲突：好像在一端是一种叫作生活的奇妙东西，另一端是一种破坏生活、名为工作的可怕玩意儿。现在根本就不是这么回事。让我们忘记工作/生活的平衡，因为它几乎总是导致内疚，总让我们苛责自己，在工作和家庭方面都感觉不妙。我们不能再把投入时间作为衡量成就的标准；它带来的压力不会让我们更有效率或创造性，只会让人发疯。p197</p></blockquote><p><strong>因此，关键在于：</strong></p><blockquote><p>真正的创新，往往出现在我们放松大脑、思考貌似和主题无关的内容的时候——也就是说，在我们看上去最没有效率的时候。很明显，思想本身并不是“破坏性的”，具有破坏性的是思想的实现，那是一个像思想产生一样的创造性过程。p194</p></blockquote><p>雇主要鼓励员工找到自我，提升自我，提升整体的人生。帮助员工自己创造意义。大多数人在工作中就是通过细微而稳定的成就获得满足感和目的感，而不是被宏大却模糊的期望所束缚。p196-197.政府也要改善公共福利，消除人们对贫穷的恐惧，让他们从事自己认为有意义的工作。p198</p><p>因此，信任很重要，同时芬兰的不平等程度非常低，政府极为透明，任何公民都可以和总统电话约谈：</p><blockquote><p>芬兰的现代成功故事建立在一个非凡的社会信任水平之上，这种社会信任是将公民团结在一起、从事共同事业的黏合剂。p199</p></blockquote><blockquote><p>社会学家创造了“团结的个人主义”（solidaristic individualism）这个词用以描述一种系统，在这个系统中，人们即使彼此观点不一致，也愿意互相支持。他们的想法是这样的：我的目标和价值观可能与你不同，但我相信你有权坚持你的信仰；只要你支持我的信仰，我就会支持你的。这样心照不宣的默契激励着芬兰人容忍分歧、互相支持，同时以健康的心态看待他人的努力和成就。他们的高度信任并非来自中立——他们并不认为所有人都头脑开放、没有私心——而是来自实话实说、坦诚相待。芬兰人重视坦率，鄙视谄媚奉承。p200</p></blockquote><blockquote><p>通过解放思想和相互信任，芬兰人得以直面工作问题，他们的政策是提升弱势者，保护中产，并鼓励真正的创新。芬兰的故事告诉我们，预言工作的未来并不比预言任何事物的未来更加容易，“共同智慧”会把我们引入歧途。显然，是时候重新思考和行动了。p201</p></blockquote><h3 id="第十二章">第十二章</h3><p>先是介绍了历史，空想社会主义者欧文的相关内容。</p><blockquote><p>当人们没有机会和手段去运用自由意志时，“自由意志”就是句空话。除非有人愿意付钱来找人工作，否则任何数量的培训或教育都不会产生对工作的需求。p208</p></blockquote><p>很多公司告诉员工要有“主人翁”精神，但是，要让他们真的做主人，给他们股权，让他们有决定权。</p><blockquote><p>在一个网络化的世界里，普通人的好工作可以通过当地的需求来驱动和维持，同时，产生的利润能够留在当地社区。p209</p></blockquote><p>历史表明，合作社等形式在欧美也出现过多次，团结起来度过难关是伟大民族的特征。重点在于<code>员工所有权</code></p><blockquote><p>自殖民时期以来，农民们就成立了合作社，以集中资源、增强市场竞争力，让自己即便逢上灾年也能渡过难关。p213</p></blockquote><blockquote><p>历史表明，美国对工人所有制的热情与经济的起伏有关：当经济不景气时，我们就会对它格外感兴趣。p215</p></blockquote><p>而工人所有权的关键，是保证了分配更加公平，缩小了贫富差距。p220虽然这会带来公司倒闭员工同时失去工作和退休金的问题p225，但这仍是一条好的道路。还需要更深入的探索。</p><h3 id="第十三章">第十三章</h3><p>介绍了一种朋克空间。这是一种新的创新形式。出人意料的伙伴关系，共享的思想、空间、视野和关系，以及——最关键的——共享的材料、技能和工具。p230</p><p>另一方面，对政府来说：一个同样重要的因素：政治态度。她告诉我：“德国就在不遗余力地维持工业部门，并愿意为之投资。但美国正在远离制造业，让自己在该领域的能力萎缩，因为美国已经接受了精英主义的观点，即我们的人力资本要派上更加高级的用场。p232</p><p>同时，创新往往不经意地产生于研究、开发和生产的协同作用，以及工程师、设计师、工厂经理和他们服务的客户之间的持续对话。心理学家已经证明，工作的个体若彼此相距较远，会是个相当大的劣势，因为面对面的交流非常重要。p233</p><p>关键问题在于：</p><blockquote><p>关于制造业最迫切的问题就是，不能再培训更多的人以更便宜的价格来制造产品——这个对我们已经不再构成挑战。我们所面临的真正挑战是，重新启动“良性循环”，以此支付工人公平的报酬，以我们能够买得起的价格生产出高质量的商品，从而刺激需求，创造更多值得做的工作。p237</p></blockquote><p>为此，可行的解决办法是彰显个性和人性化的产品，通过对生产过程的精细控制，对抗大批量生产。p238-239而且，在分配财富方面，这种小而精的方式也做的更好。</p><blockquote><p>很多人都知道，19世纪的哲学家、散文家爱默生曾公开反对严格的功利主义价值标准，它对人的评判不是基于性格，而是基于生产力。爱默生把这比作“面朝大海，却只关注鱼的价格”。他的洞见是，新兴公司及其工厂系统已经使工作原子化，剥夺了工人的人性。他写道：“当今社会的现状是，人们被硬生生地肢解了。四处行走的都是些怪物——一根好的手指、一个脖子、一个胃、一个胳膊肘，但没有一个完整的人。p246</p></blockquote><blockquote><p>**创客运动代表了对这种过程的逆转。在理想状况下，数字制造技术允许个人将自己的“完整自我”带到工作中并充分发挥自身天赋和本能，同时在发展过程中获得知识和技能。制造行动形塑思维，同时思维也形塑制造。**p246</p></blockquote><h3 id="第十四章">第十四章</h3><p>目前，工会形势的集体谈判已经日渐衰落，因为工人们无法聚集在一起。新的趋势是谈判指定跨行业的标准。p249人们需要在空间上真正聚集在一起，也就是说跨行业的人在同一个空间内工作。这带来了一些同志情谊和新的思想。</p><blockquote><p>科技的进步已经让一部分人宣布了工作独立，展望未来，它将为更多人团结起来创造更好的工作生活铺平道路。p251</p></blockquote><p>工作幸福，也来源于自主感、能力感，以及和他人的关系。</p><p>由于联合工作，</p><blockquote><p>唐·鲍尔（Don Ball）把这描述为“充裕心态”（abundance mentality），它是一种信念，相信大家需要的东西供应充足，对你有好处的事情对我也会有好处。p256</p></blockquote><p>我们要抵制商界的个人崇拜，尤其反对把风险转嫁给工人和纳税人，企业应该肩负更多的社会责任。很多重大问题都是不良商业行为造成的，尤其是他们低价竞争来压榨劳动力。这就是<code>坏工作策略</code>p258-263</p><blockquote><p>千禧一代大多希望在工作中发挥作用。他们谈论的不是工作和生活的平衡，因为对他们来说，二者之间的关系不是平衡，而是相互融合。p261</p></blockquote><p>然而，<code>好工作策略</code>则是，提升员工工作条件和幸福度，以此增强企业竞争力。因为，信任至关重要，应该让真正关心客户的人来为他们服务。</p><blockquote><p>正如19世纪中叶德国经济学家阿道夫·瓦格纳（Adolph Wagner）所观察到的那样，只有在繁荣的自由市场社会中，社会福利才会获得真正的关注。他的观点后来被称为“瓦格纳定律”（Wagner’s Law）。p268</p></blockquote><blockquote><p>**正如我们所看到的，没有一个自由的国家能够在不充分利用其人力资本的情况下蓬勃发展。这不是慷慨与否的问题，而是建立一个公民社会的问题。**p268</p></blockquote><p>又有一些税收减免、缩短工时、甚至根本不工作直接发钱的建议。而且，一个叫<code>基本收入保障</code>的研究也支持了这一观点，拿钱的人反而更容易去工作。</p><blockquote><p>要想解决全国性的工作乱局，第一步是认识一个事实：对工作的需要是人性的一部分。······但是，对创新的过度宣传，会导致我们把每一种损害都误认为是“进步”，并且依据这样一种理念行事：似乎公司和个人只要赚了大钱，就可以免除偿还社会赋予他们的特权的责任，而他们之所以能够享有特权，正是因为工人们的工作。美国的工作失调并不是因为真正的机会稀缺，总有足够多的好工作需要人做。它也不是技术导致的，正确应用技术只会改善我们的生活。<strong>工作失调的病根在于，我们缺乏明确而真诚地应对挑战的政治意愿</strong>。p274-275</p></blockquote><blockquote><p>**寻找更好的方法来支持和维持良好的工作，可能会成为企业和政府发挥互补作用的公共政策的核心。我相信，激励那些为此努力的人，鼓励他们在这些方面的政治和经济创新，这本身就将是未来最重要的创新.**p275</p></blockquote><blockquote><p>工作的未来与其说取决于我们的数字化创造，不如说取决于我们的集体想象力。······公众能够认识到工作不是赢家和输家的零和游戏。相反，之所以在自由市场民主制度下工作，是为了缩小而不是扩大不平等。······找到新的方法来利用技术，调动人们自己的力量从工作中创造真正的价值。与其称赞雇主“赠予”我们“有意义的”工作，不如让我们同意，我们从工作中获得的意义不是赠礼，而是我们自己努力的产物。p276-277</p></blockquote><blockquote><p><strong>启蒙主义的理想是，人类社会的进步将把我们从劳碌求生提升到有目的、有意义的生活，如今这个理想已近在我们的门阶。要想回答它的敲门声，我们只需拿出政治意愿和信任。我希望你和我一样，都渴望着打开大门。因为归根结底，确保所有人都有好工作，不仅是公民社会的最高宗旨，也是最具颠覆性的创新</strong>。p278</p></blockquote><h1>一些其他</h1><p>本书翻译真烂，我头一次见把 video game 翻成 视频游戏 的，太离谱了。</p><p>另，由于本书引用了大量的专有名词和新的概念，未来也许会考虑去查一下这些内容，补充在本笔记后面。同时，本书也有一些我不知道的历史典故（好吧，事实上美国人写书的引用我不知道的实在是太多了），也许也会跟着一起查一查。未来有机会再更新。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 社科 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么美国没有社会主义</title>
      <link href="/post/6b2a63.html"/>
      <url>/post/6b2a63.html</url>
      
        <content type="html"><![CDATA[<h1>作者</h1><p>维尔纳·桑巴特(Werner Sombart)，1863-1941.比 Max Weber 大一岁。早年支持马克思主义，万年转投纳粹的法西斯主义。哈耶克在《通往奴役之路》第十二章认为他是导致德国纳粹的思想根源之一。直接或间接继承了德意志经济史学派。</p><h2 id="对资本主义起源的理解">对资本主义起源的理解</h2><p>他认为，资本主义的产生，是因为1600-1800年间富人们渴望通过奢侈消费来获得上流社会认同的强大动力。（p6）</p><p>他认为资本主义精神或者说资本主义的精神特质才是这一具体的社会现实的源泉。</p><p>反对关于人类进步必然性的单线历史进化理论。(p8-9)</p><h1>核心观点</h1><ol><li class="lvl-3"><p>美国工人对资本主义持友好态度</p></li><li class="lvl-3"><p>美国工人对美国政治制度和不同寻常的公民整合度（civic intergration）持友好态度</p></li><li class="lvl-3"><p>在运作良好的两党制下，新的政党很难成立起来</p></li><li class="lvl-3"><p>美国工人阶级潜在的激进主义倾向因为美国资本主义所提供的物质报酬而消亡了。</p></li><li class="lvl-3"><p>美国工人拥有更多的向上流动的机会</p></li><li class="lvl-3"><p>美国存在着一个开放的边疆地区，它起到了消解美国工人好斗性的作用</p></li></ol><p>在1、2、3、5观点上，学姐趋于认同，而4、6遭到质疑。</p><h1>本书内容</h1><blockquote><p>美国是资本主义的黄金国度。(p1)</p></blockquote><p>在导论之中，作者介绍了美国丰富的自然资源，包括矿产、港口、土地。同时，作者介绍了一个叫做<code>资本主义精神</code>的东西，这一内容在整本书里写的挺乱的，只能大概认为美国人都有充沛的精力、顽强的奋斗和对利润的追求，促使了资本主义的发展。</p><blockquote><p>在美国，马克思主义发展理论的模型正在被实践最准确地验证着，由于资本积累已经达到了（如《资本论》 在倒数第2章所描述的那样）资本主义世界的最终变革马上到来的阶段。(p7)</p></blockquote><p>罗斯福新政以前，还是托拉斯当道。</p><blockquote><p>目前，整体财富的最终分布正在形成之中，但有一点可以肯定，在这个世界上，没有哪一个国家的贫富差距会像美国这么悬殊。一方面是因为美国的有钱人要远比德国的有钱人富裕很多。······另外一方面，只有英国伦敦东部才可以与美国大城市中贫民窟的穷困相提并论。(p13)</p></blockquote><p>作者也注意到了美国的贫富悬殊。所以那本《深渊居民》应该反复阅读</p><blockquote><p>美利坚民族实际上是居住在一个大陆上而不是在一个单一的国家里(p14)</p></blockquote><p>欧洲好小啊。。。</p><blockquote><p>可是，人们无法忽略的一个事实是，这种摧毁所有“质”的价值观，将它们与可量化的货币价值观联系在一起的习惯还会对无法采用金钱标准的情况下的价值观判断产生影响。这样的习惯只能够让人们对量的关注越来越高，这也成为美国核心精神的一种价值观。(p18)</p></blockquote><p>此后是一些很琐碎的内容，大意是美国人习惯用金钱、数量去评判事物。因此，美国人喜欢竞争。</p><blockquote><p>对每一个普通的美国民众而言，成功的第一个要素就是变得富有。(p21)</p></blockquote><h2 id="社会主义在美国">社会主义在美国</h2><blockquote><p>社会主义仅仅是对资本主义的一个反应(p23)</p></blockquote><p>美国人根本不选社会主义政党，得票率低的可怜。</p><p>而后，描述了美国人不反对资本主义、对国家感到骄傲和乐观，作者甚至认为“工人热爱资本主义”(p31)</p><h2 id="工人的政治地位">工人的政治地位</h2><p>美国拥有夸张的移民数量。</p><blockquote><p>美国作为唯一拥有真正民主政府体制的大国，这里的政治事务因为其联邦制的组织结构变得更加复杂。(p42)</p></blockquote><p>美国人一年要参加22场选举，选举官员。（p45）</p><h2 id="两大党">两大党</h2><p>作者认为，首先政治选举需要耗费大量钱财，只有两党拥有这么多钱。其次，就是作者经过论述，认为美国两党并没有意识形态上的区别，仅仅是作为选举后分享官职的集团，这里作者指出<code>政治分肥制</code>和<code>赢者分肥</code>（p53-54）。最后，由于政治分肥制，两党可以轻易吸收第三党的政治主张，并且通过官职回报来分化第三党的领导人。同时，两党会对工人阶级进行实质性让步，“具有强烈的人民性的一面”(p77)。因此，工人阶级也能够“通过对古老的两党政治的熟练利用，工人阶级能够为自己争取到它渴望的一切好处”(p83)</p><h2 id="工人的经济状况">工人的经济状况</h2><p>这一部分作者给出了极其详尽的数据，这在1900年感觉是很难想象的。主要通过数据对比了美国工人和德国工人的经济状况。</p><p>最后作者得出了一些结论：</p><ul class="lvl-0"><li class="lvl-2"><p>美国工人的货币工资是德国工人的2-3倍。至少是2倍(p113)</p></li><li class="lvl-2"><p>许多情形甚至是3-4倍，比如制糖业而后，作者又比较了物价、花费导致的生活水平的不同。有两点原因：</p></li><li class="lvl-2"><p>国家的殖民的特征使得劳工的价格很高</p></li><li class="lvl-2"><p>殖民地的特征又使土地的价格很便宜，从而地租价格在总价格中占据重大比例的商品都比较便宜。而后作者比较了住房、饮食、穿衣。得出的结论是美国人住房更便宜、家具更多、暖气更足；美国人主要吃肉、水果、布丁和精致白面包，而德国人吃土豆、香肠和粗糙的黑面包(p133)；美国人的衣服更多，而且质量好，非常时尚，工人也像绅士，女性也像贵族小姐一样。</p></li></ul><p>最后，作者得出关键性结论：“<strong>在烤牛肉和苹果派上，一切社会主义的乌托邦都烟消云散了</strong>。”(p163)</p><h2 id="工人的社会地位">工人的社会地位</h2><p>美国没有特别明显的阶级差异（这部分我认为是相比于德国的封建阶级残余的对比），因此工人地位还是比较高的。在这里，“工人也是受到尊重礼遇的”(p166)。</p><p>同时，美国在那时候，不降低工人的单位工资率，积极改善工人的工作环境。并且设置建议箱，欢迎工人提出建议。从数据来看，也不是摆设，是真的会被采纳。</p><h2 id="一些争议">一些争议</h2><p>作者描述了美国西部具有广袤的土地，因此可以让人逃离资本主义去当农场主，并且列出详细的数据证明确实有很多人去了西部当农场主。但是很难解释，如果资本主义真的这么好，这些人为什么要逃亡西部。这部分论述比较乱，整合以后我的看法是也许逃到西部是一种可以逃离压迫的方式，这是一种选择的权利，即选择参与或者退出资本主义社会。因此“每一种敌对态度都从积极的形式转化成了消极的形式，它拔去了敌视资本主义的锋芒”(p182).</p><p>更加疑惑的是，作者在书中最后一页说：“所有这些迄今为止阻碍了社会主义在美国发展的因素都将消失或转向他们的反面，其结果是，在下一代人那里，社会主义在美国很有可能出现最迅速的发展”(p184)然后作者并没有详细阐述，就是扔了一个结论在这，让人摸不到头脑，貌似本书在这一点上被人诟病很多。</p><h1>一些摘录</h1><blockquote><p>在美国，人们对资本主义以外的任何一种谋生方式都一无所知，正是一种欧洲国家从来没有过的纯粹经济理性，让人们攫取利润的欲望得到了前所未有的满足。哪怕通往资本主义的道路是由无数尸体堆砌而成的，也无法阻挡资本主义继续前进的脚步。这一点，我们从美国铁路事故发生情况的数据中就可以看出。《纽约晚报》（Evening Post）的一项统计显示，从1898年到1900年，已经有21，847人在铁路事故中丧生，这与发生在同一时期的布尔战争 （Boer War）中丧生的英国人总数相当（其中包括在战地医院因病丧生的人数）。仅1903年一年，就有11，006人命丧于铁路事故中，而在奥地利(7) ，这一年仅有172人丧生于铁路事故中。假如我们将这些数据按每百公里和每百万乘客进行标准化计算，就会发现，美国每百公里的铁路事故发生率为3.4，而奥地利仅为0.86，美国每百万乘客的事故发生率为19，而奥地利仅为0.99。(p5)</p></blockquote><p>看来那时候美国火车就这样了，和前些日子那个危险品火车脱轨呼应上了。</p><blockquote><p>我所指的是一种与自发成长的居住方式完全不同的形态，它依赖于纯粹理性的基础，单纯地由数量角度去界定，这好像要比“城市”这个词所具有的意义更加深刻。(p10)</p></blockquote><blockquote><p>整个乡村不过是缺少了像城市里那样的单独划分出的居住区。一种理性的智慧创造了盒子一般的城市，为了让所有城市有一个统一的规划，测绘人员拿着测绘工具穿过了大大小小的乡村，将一整片平坦的土地划分成几乎大小完全相等的方格。在最初阶段，一定得排除自然或自发形成的居住方式。(p10)</p></blockquote><p>城市是规划的产物？</p><blockquote><p>对一个政党来说，一旦其赖以生存的理由都没有了，那么政党必然会面临着解散的命运——如果他们确实只想为了独特的政治原则进行斗争的话。但是，他们实际上并没有解散，因为他们有自己的打算，他们找到了一个政党可以在民主共和国里为之服务的另一个目标——捞取官职。(p73)</p></blockquote><blockquote><p>他在权利方面的任何合理要求事实上都得到了宪法的保障，因为他是人民的一份子</p><p>整个宪法是建立在人民主权的基础上的</p><p>造就了普遍的民主观念(p85)</p></blockquote><blockquote><p>每个人对人民意志的效力都有一种不可思议的信任，并且以一种宗教狂热的态度提起它。(p87)</p></blockquote><blockquote><p>一个美国工人，当他看到自己的地位时，完全有资格骄傲地拍着胸脯高昂着头说：“我是美国公民”(p89)</p></blockquote><blockquote><p>因此，他应该比德国工人生活得好得多。······他比他的德国同事住得更好，穿得更好，吃得更好。(p147)</p></blockquote><blockquote><p>美国人更有利的社会地位在很大程度上是他的政治地位和经济状况的结果，即政府的激进民主体制和舒适的生活水平的结果.(p164)</p></blockquote><blockquote><p>即使从外表上看，也没有人能够把他与共和国的总统区分开来。(p165)</p></blockquote><blockquote><p>一个欧洲的孩子，当他长大成人时，他将发现人生盛宴的坐席上都打上了“此座有人”的标记，他只能与自己的同伴争夺剩下的残羹冷炙，连抢夺和偷窃一个未知的千分之一的机会都没有。(p183)</p></blockquote><h2 id="参考">参考</h2><p><a href="https://news.ifeng.com/history/zhuanjialunshi/qinhui/200907/0713_7322_1246913.shtml">秦晖</a></p><h1>丽泽书评</h1><h2 id="写在最前">写在最前</h2><p>这本书是考察桑巴特的思想一部较为重要的作品。从内容上来讲，本书应该是桑巴特在杂志和期刊上发表过的文章编纂而成，详细阐述了桑巴特在这个问题上的看法。我开始读这本书完全是被书名所吸引，迫切地想要得知为什么美国没有建立起社会主义制度。尤其有未来学色彩的是，桑巴特写就此书时是1906年，桑巴特在1929年著名的大萧条没有来临之前，就断定美国不会产生社会主义，应该说是有一定思想深度的。其针对书名（即本书所要探讨的问题）所给出的理由，无论对错，都成为了在研究美国的社会主义发展这一领域之中不能避开的里程碑。</p><p>当然，本书也却有一些问题。首先，桑巴特本人思想多变，在写成本书时从时间上说应该是处于他从认可社会主义到支持资本主义的过渡时期，因此桑巴特在本书之中也呈现出一些思想上的矛盾之处，对于资本主义和社会主义的态度也有些模糊不清，甚至部分前后章节之中的语句出现了明显的冲突，这不得不让人感到费解；其次，本书由于是编纂期刊文章的合集，因此不免在细微之处出现前后不连贯；最后，本书由于是德语写成，我所看的译本暂不清楚是根据德语原本直接翻译还是转译的英语版本，因此在阅读时有部分语句不够通顺，令人感到费解。</p><h2 id="书评">书评</h2><p>在阅读本书后，可以首先给出作者对于<code>为什么美国没有社会主义</code>这个核心问题的回答了，作者的观点主要有以下六点：</p><ol><li class="lvl-3"><p>美国工人对资本主义持友好态度</p></li><li class="lvl-3"><p>美国工人对美国政治制度和不同寻常的公民整合度（civic intergration）持友好态度</p></li><li class="lvl-3"><p>在运作良好的两党制下，新的政党很难成立起来</p></li><li class="lvl-3"><p>美国工人阶级潜在的激进主义倾向因为美国资本主义所提供的物质报酬而消亡了。</p></li><li class="lvl-3"><p>美国工人拥有更多的向上流动的机会</p></li><li class="lvl-3"><p>美国存在着一个开放的边疆地区，它起到了消解美国工人好斗性的作用注：本处参考了秦晖老师的<a href="(https://news.ifeng.com/history/zhuanjialunshi/qinhui/200907/0713_7322_1246913.shtml)">文章</a>。</p></li></ol><p>带着已有的结论，我们可以结合本书进行分析与思考了。</p><p>在本书开篇，作者首先分析了美国发展资本主义的条件，作者将美国称为资本主义的<strong>黄金国度</strong>，甚至称“<em>在美国，马克思主义发展理论的模型正在被实践最准确地验证着，由于资本积累已经达到了（如《资本论》 在倒数第2章所描述的那样）资本主义世界的最终变革马上到来的阶段</em>”。任何人都不能忽略的是，美国的自然资源极为丰富，矿产、港口、土地，都具有其他国家不可比拟的优势。这里尤其需要注意，相比于欧洲来说，美国的国土面积极为广阔，和欧洲近乎差不多大小，以至于作者认为美国事实上是一个民族生活在了一整块大陆上，而不是生活在了一个国家里。广阔的国土面积不光带来了丰富的资源和充足的人口，也带来了广阔的市场。（不知道开篇这种论述方式是否会使人联想到托克维尔所写的《论美国的民主》，也是由北美大陆的自然写起。）</p><p>美国发展资本主义的另一个条件，则是作者强调的美国的<code>民族性</code>，或者说<code>民族精神</code>。这一概念在书中作者没有给出非常准确的定义，但是作者认为美国人对优越的物质条件的追逐和通过奋斗改善自己生活的渴望，应该是构成了美国民族性的核心。比如，美国人注重数值，什么东西只要量化之后，数字越大就越好，这种风气甚至影响到了那些不可量化的领域（比如精神层面）。比起发展资本主义，可能会影响资本主义发展（主要是效率）的因素，都会被美国人所忽略。作者认为这是一种纯粹的理性。因此，作者的第一个观点可以在此处找到支持了。但是，单单是民族性并不足以解释这一切，因为美国有大量来自欧洲和其他大陆的移民，为了解释移民为什么没有促进社会主义的发展，作者开始着重考察了美国的政治和经济。</p><p>在政治上，美国的民主制度可谓是空前繁荣的。在经历了百余年的发展过后，美国的民主制度已经变得稳定而且深入人心。与同时期的德国对比，美国的民主制度之中没有更多封建残余，因此民主制度的完善程度是欧洲等国远远不能比的。比如，作者在书中举例，一个美国公民在一年之中要参与22次选举！由此作者认为，美国是一个完全人民主权的国家。由于民选官员、民选政府，美国工人发自内心信仰民主制度，并为自己的国家感到骄傲。也正是因此，美国工人在政治上具有更多的可能。这一点也是与欧洲不同的地方。而美国民主制度的根基，即两党制，是作者重点考察的对象。在作者看来，美国的两党事实上早已没有了在意识形态领域上不可调和的矛盾，他们没有自己坚持的政治信仰，两个政党仅仅是作为在选举胜利后分配官职的集团。作者在书中给两党制下了一个概念，叫<code>政治分肥制</code>。由于这个特点，美国的两个大党可以很好地吸收第三党的政治主张，甚至快速转换自己的政治立场，加之两个大党的竞选资金等资源丰富，在大多数领域深耕已久所占据的先发优势，使得第三党，尤其是社会主义倾向的第三党在美国都迅速失败了。另一方面，在政治分肥制的基础上，两党也很容易吸纳工会、工人运动的领导者加入自己的阵营，所付出的则是官职的许诺。也就是说，在分化了工人运动的同时，美国工人在事实上也具有了向上流动的机会。</p><p>以上，我们看到了作者的第1、2、3、5条观点，这几点后世普遍持认可态度，有其他学者还在这几点基础上延申，提出了更进一步的理论。</p><p>然而，本书浓墨重彩地描绘的，则是美国工人的经济状况。在这一部分，作者花了极大篇幅，引用了他在那个时代所能找到的最全面、最准确、最具说服力的数据，以表格的形式，详细对比了美国工人与德国工人之间的收入的差距，可以得出的结论是美国工人的收入是德国工人的两到三倍，部分领域甚至达到了四倍的惊人差距。当然，仅仅展示收入不能说明问题，作者更进一步考证了美国和德国的工人在住房、饮食、穿着三方面的花费，详细比对了住房面积与房价、家具价格、饮食的种类和价格，以及衣着的价格和考究程度等细致内容。这些数据虽然有部分在后世也引发争议，但考虑到当时的条件，已经是足够详实了。作者在此得出了结论，美国工人的收入比德国工人更高，但物价却比德国工人更低，因此美国工人的生活质量远远优于德国工人。作者在书中写出了一句著名的话：“在烤牛肉和苹果派上，一切社会主义的乌托邦都烟消云散了。”</p><p>针对此观点，问题在于物质的丰富并不一定会导致人们的政治倾向趋于资本主义，或者说趋于保守。与之相反的例子数不胜数，好像更能体现社会心理的变化规律。这也是作者被攻讦最多的一点。人们往往观察到，社会发展所产生的分配不公，往往更能引发社会变革。虽然作者也注意到了美国的贫富差距极为巨大，但他没有将美国工人的经济状况与贫富差距联系起来，进一步解释美国的社会主义发展的问题，这是本书的一个缺点所在。</p><p>而至于作者的第六个观点，则更为令人不解，如果美国工人生活得如此之好，他们为什么要逃离呢？这本就是与本书其他观点矛盾的所在。如果本观点独立存在，当然可以将西部地区作为疏导社会矛盾的泄水阀，但与其他观点结合来看则让人充满不解。</p><p>更加迷惑的是，作者在书中最后一页说：“<em>所有这些迄今为止阻碍了社会主义在美国发展的因素都将消失或转向他们的反面，其结果是，在下一代人那里，社会主义在美国很有可能出现最迅速的发展</em>”。这一观点作者没有进行任何阐述，就直接得出了之前观点可能全部被推翻的结论，这也是本书另一大缺点所在。</p><p>总的来说，桑巴特所提出的观点，值得阅读和思考。本书我个人认为，并没有非常好地回答为什么美国没有社会主义这个问题，但是如果将本书视为一个抛砖引玉的“砖”，进一步结合其他历史、社会科学的书籍，在此问题进行更深探索，那么本书则是一个很好的起点。同时，不要忽略桑巴特的研究手法，这种以数据为基础的接近实证分析的研究方法，是值得我们学习的。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 名著 </tag>
            
            <tag> 读后感 </tag>
            
            <tag> 社科 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年读书计划</title>
      <link href="/post/5151d5e3.html"/>
      <url>/post/5151d5e3.html</url>
      
        <content type="html"><![CDATA[<h1>2023年读书计划</h1><h2 id="引言">引言</h2><p>据孙老师说他们大学时候的阅读量是每周700-1k页，我感觉我连700-1k字都做不到，因此搞个计划激励一下自己。正好自己实在是太文盲了。</p><h2 id="课程要求">课程要求</h2><ul class="lvl-0"><li class="lvl-2"><input type="checkbox" id="checkbox0"><label for="checkbox0">《论美国的民主》(这个必读啊)</label></li><li class="lvl-2"><input type="checkbox" id="checkbox1"><label for="checkbox1">《从投票到暴力》(老师没要求，打算和要求的书陪着看，之前借了可惜没看完)</label></li></ul><h2 id="优先级很高的两本书">优先级很高的两本书</h2><ul class="lvl-0"><li class="lvl-2"><input type="checkbox" id="checkbox2"><label for="checkbox2">《如何阅读一本书》(怎么21岁了这本书还没读过啊，草了)</label></li><li class="lvl-2"><input type="checkbox" id="checkbox3"><label for="checkbox3">《炉边谈话》(据说里面全是真话)</label></li></ul><h2 id="麦读系列">麦读系列</h2><ul class="lvl-0"><li class="lvl-2"><input type="checkbox" id="checkbox4"><label for="checkbox4">《大审判》(看着玩)</label></li><li class="lvl-2"><input type="checkbox" id="checkbox5"><label for="checkbox5">《法学的十一种可能》(看懂了这书打算送人)</label></li><li class="lvl-2"><input type="checkbox" id="checkbox6"><label for="checkbox6">《严肃点我们在讲法哲学》(麦读的入门书都适合送人)</label></li><li class="lvl-2"><input type="checkbox" id="checkbox7"><label for="checkbox7">《他们为什么杀人》(啥玩意，先写上)</label></li><li class="lvl-2"><input type="checkbox" id="checkbox8"><label for="checkbox8">《线上法院与未来司法》(这作者我认为是法学界一个跨界人才，真的懂计算机和AI的法学家)</label></li><li class="lvl-2"><input type="checkbox" id="checkbox9"><label for="checkbox9">《权贵：他们为何逍遥法外》(这书)</label></li><li class="lvl-2"><input type="checkbox" id="checkbox10"><label for="checkbox10">《公证何以难行》(麦读的书，这包装是真没得说啊)</label></li></ul><h2 id="北大出版社">北大出版社</h2><ul class="lvl-0"><li class="lvl-2"><input type="checkbox" id="checkbox11"><label for="checkbox11">《你的权利从哪里来》(我的钱啊。。。)</label></li><li class="lvl-2"><input type="checkbox" id="checkbox12"><label for="checkbox12">《超越法律》(我的钱啊。。。)</label></li></ul><h2 id="名著">名著</h2><ul class="lvl-0"><li class="lvl-2"><input type="checkbox" id="checkbox13"><label for="checkbox13">《子夜》(期待不高，纯属打算看着玩)</label></li><li class="lvl-2"><input type="checkbox" id="checkbox14"><label for="checkbox14">《天才》(甚至不知道这是个什么书，好像是个小说，还TM挺厚的，打算看着玩)</label></li><li class="lvl-2"><input type="checkbox" id="checkbox15"><label for="checkbox15">《乡土中国》(以前看过一半，对涟漪社会印象深刻，后来啥也不记得了)</label></li></ul><h3 id="最期待的作家">最期待的作家</h3><h4 id="雨果">雨果</h4><ul class="lvl-0"><li class="lvl-2"><input type="checkbox" id="checkbox16"><label for="checkbox16">《巴黎圣母院》(我就一文盲。。。)</label></li><li class="lvl-2"><input type="checkbox" id="checkbox17"><label for="checkbox17">《海上劳工》(没看过。。。但是这里名言还不少)</label></li><li class="lvl-2"><input type="checkbox" id="checkbox18"><label for="checkbox18">《悲惨世界》(看过音乐剧。。。)</label></li><li class="lvl-2"><input type="checkbox" id="checkbox19"><label for="checkbox19">《九三年》(甚至不知道讲了什么，我废了)</label></li></ul><h4 id="狄更斯">狄更斯</h4><ul class="lvl-0"><li class="lvl-2"><input type="checkbox" id="checkbox20"><label for="checkbox20">《艰难时世》</label></li><li class="lvl-2"><input type="checkbox" id="checkbox21"><label for="checkbox21">《远大前程》</label></li><li class="lvl-2"><input type="checkbox" id="checkbox22"><label for="checkbox22">《雾都孤儿》</label></li><li class="lvl-2"><input type="checkbox" id="checkbox23"><label for="checkbox23">《老古玩店》</label></li><li class="lvl-2"><input type="checkbox" id="checkbox24"><label for="checkbox24">《双城记》</label></li><li class="lvl-2"><input type="checkbox" id="checkbox25"><label for="checkbox25">《大卫科波菲尔》</label></li><li class="lvl-2"><input type="checkbox" id="checkbox26"><label for="checkbox26">《匹克威克外传》</label></li><li class="lvl-2"><input type="checkbox" id="checkbox27"><label for="checkbox27">《我们共同的朋友》（这哥们怎么作品这么多）</label></li></ul><h3 id="并不太期待的作家">并不太期待的作家</h3><ul class="lvl-0"><li class="lvl-2"><input type="checkbox" id="checkbox28"><label for="checkbox28">《中国哲学简史》(冯友兰的大作)</label></li><li class="lvl-2"><input type="checkbox" id="checkbox29"><label for="checkbox29">《季风帝国》(当初时晨让也不哪个班读的书，还挺厚的，人家便宜卖给我了。。。)</label></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阅读 </tag>
            
            <tag> 年度计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>荆棘丛</title>
      <link href="/post/2e5bba0c.html"/>
      <url>/post/2e5bba0c.html</url>
      
        <content type="html"><![CDATA[<h1>读后感</h1><h2 id="书名">书名</h2><p>本身应该是来自圣经：摩西在燃烧的荆棘丛中看到上帝，皈依信仰并决定带领族人离开埃及的开始。但是由于简中世界严格来说从未有一部完整的、官方的简中版本圣经，因此这个还得再考证考证是不是有什么更深的文化涵义。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 名著 </tag>
            
            <tag> 读后感 </tag>
            
            <tag> 法学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>臧哀伯谏纳郜鼎</title>
      <link href="/post/2c5b5042.html"/>
      <url>/post/2c5b5042.html</url>
      
        <content type="html"><![CDATA[<h1>臧哀伯谏纳郜鼎（桓公二年）</h1><h2 id="原文及翻译">原文及翻译</h2><p>夏四月，取郜大鼎于宋<sup id="fnref:126"><a href="#fn:126" rel="footnote">126</a></sup>。纳于大庙<sup id="fnref:127"><a href="#fn:127" rel="footnote">127</a></sup>，非礼也。</p><blockquote><p>夏季四月，鲁桓公从宋国取得郜国的大鼎。初九，将它安放在太庙里，这是不合于礼的。</p></blockquote><p>臧哀伯谏曰<sup id="fnref:128"><a href="#fn:128" rel="footnote">128</a></sup>：“君人者，将昭德塞违，以临照百官，犹惧或失之，故昭令德以示子孙。是以清庙茅屋<sup id="fnref:129"><a href="#fn:129" rel="footnote">129</a></sup>，大路越席<sup id="fnref:130"><a href="#fn:130" rel="footnote">130</a></sup>，大羹不致<sup id="fnref:131"><a href="#fn:131" rel="footnote">131</a></sup>，粢食不凿<sup id="fnref:132"><a href="#fn:132" rel="footnote">132</a></sup>，昭其俭也<sup id="fnref:133"><a href="#fn:133" rel="footnote">133</a></sup>。衮、冕、黻、珽<sup id="fnref:134"><a href="#fn:134" rel="footnote">134</a></sup>，带、裳、幅、舄<sup id="fnref:135"><a href="#fn:135" rel="footnote">135</a></sup>，衡、紞、纮、綖<sup id="fnref:136"><a href="#fn:136" rel="footnote">136</a></sup>，昭其度也<sup id="fnref:137"><a href="#fn:137" rel="footnote">137</a></sup>。藻、率、鞞、鞛<sup id="fnref:138"><a href="#fn:138" rel="footnote">138</a></sup>，鞶、厉、游、缨<sup id="fnref:139"><a href="#fn:139" rel="footnote">139</a></sup>，昭其数也<sup id="fnref:140"><a href="#fn:140" rel="footnote">140</a></sup>。火、龙、黼、黻<sup id="fnref:141"><a href="#fn:141" rel="footnote">141</a></sup>，昭其文也。五色比象<sup id="fnref:142"><a href="#fn:142" rel="footnote">142</a></sup>，昭其物也。钖、鸾、和、铃<sup id="fnref:143"><a href="#fn:143" rel="footnote">143</a></sup>，昭其声也。三辰旂旗<sup id="fnref:144"><a href="#fn:144" rel="footnote">144</a></sup>，昭其明也。夫德，俭而有度，登降有数，文、物以纪之，声、明以发之，以临照百官，百官于是乎戒惧，而不敢易纪律。今灭德立违，而置其赂器于大庙，以明示百官，百官象之，其又何诛焉？国家之败，由官邪也；官之失德，宠赂章也<sup id="fnref:145"><a href="#fn:145" rel="footnote">145</a></sup>。郜鼎在庙，章孰甚焉？武王克商，迁九鼎于雒邑<sup id="fnref:146"><a href="#fn:146" rel="footnote">146</a></sup>，义士犹或非之，而况将昭违乱之赂器于大庙，其若之何？”公不听。</p><blockquote><p>臧哀伯劝谏道：“做君主的，要发扬道德，遏止邪恶，用此来为百官做榜样，还怕有所缺失，所以发扬美德来晓示子孙。因此太庙用茅草盖顶，大车用蒲席做垫子，肉汁不放调味品，主食不用精米，这是明白地晓示节俭。礼服、礼帽、蔽膝、大圭，大带、裙子、绑腿、鞋子，横簪、瑱绳、冠系、冠顶板，尊卑上下各不相同，这是明白地晓示制度。荐玉板、佩巾、刀鞘、刀饰，革带、带饰、飘带、马鞅，地位高低多少不同，这是明白地晓示数量。衣上画火、画龙、绣黼、绣黻，不同等级衣上画法不同，这是明白地晓示文饰。用五色来画山、龙、花、虫，这是明白地晓示色彩。铜铃、鸾铃、和铃、小铃，装在不同器物上，这是明白地晓示声音。日月星画在旗上，这是明白地晓示光明。道德，应该是节俭而有制度，增减按等级有一定的数量，用文饰色彩来表现它，用声音明亮来发扬它，将这些展示给百官，百官因此戒慎恐惧，不敢违反纪律。现在废除道德，树立邪恶，把人家贿赂的器物放在太庙里，用来明白晓示百官，百官跟着这样做，又能惩罚谁呢？国家衰败，由于官吏的邪恶；官吏丧失道德，由于受宠而贿赂公行。郜鼎放在太庙里，贿赂公行还有比这更明显吗？周武王打败商朝，把九鼎迁到雒邑，还有些忠义之士反对他，何况把表明邪恶叛乱的贿赂器物放在太庙里，这该怎么办？”桓公不听。</p></blockquote><p>周内史闻之<sup id="fnref:147"><a href="#fn:147" rel="footnote">147</a></sup>，曰：“臧孙达其有后于鲁乎<sup id="fnref:148"><a href="#fn:148" rel="footnote">148</a></sup>！君违，不忘谏之以德。”</p><blockquote><p>周朝的内史听说后，说：“臧孙达的后代一定会在鲁国长享禄位吧！君主违背礼制，他没有忘记用道德来劝阻。”</p></blockquote><h2 id="评论">评论</h2><p>排比句里边那些词，可以看看，未来兴许用得上。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:126"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">126.</span><span style="display: inline-block; vertical-align: top;">郜（ɡào）：国名。在山东成武东南，姬姓。鼎：古代以鼎为立国重器，象征国家权力。宋：国名。都城在今河南商丘，子姓。郜早灭于宋，其鼎也归于宋。鲁桓公二年（前710）春，宋太宰华督杀宋殇公，为预防列国干涉，用郜鼎向鲁桓公行贿。</span><a href="#fnref:126" rev="footnote"> ↩</a></li><li id="fn:127"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">127.</span><span style="display: inline-block; vertical-align: top;">大（tài）庙：帝王的祖庙。这里指鲁国始祖周公之庙。</span><a href="#fnref:127" rev="footnote"> ↩</a></li><li id="fn:128"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">128.</span><span style="display: inline-block; vertical-align: top;">臧哀伯：臧僖伯之子，名达。鲁大夫。</span><a href="#fnref:128" rev="footnote"> ↩</a></li><li id="fn:129"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">129.</span><span style="display: inline-block; vertical-align: top;">清庙：太庙，祖庙。以其肃穆清净故称“清庙”。</span><a href="#fnref:129" rev="footnote"> ↩</a></li><li id="fn:130"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">130.</span><span style="display: inline-block; vertical-align: top;">大路：天子祭祀时所用车。路，又作“辂”。越（huó）席：蒲草编的席子。</span><a href="#fnref:130" rev="footnote"> ↩</a></li><li id="fn:131"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">131.</span><span style="display: inline-block; vertical-align: top;">大（tài）羹：肉汁。这里指用作祭祀的肉汁。不致：不以酸、苦、辛、咸、甘五味调和，白煮而已。</span><a href="#fnref:131" rev="footnote"> ↩</a></li><li id="fn:132"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">132.</span><span style="display: inline-block; vertical-align: top;">粢食（zīsì）：祭祀用的黍、稷等粮食。不凿：不细舂，不作精加工。</span><a href="#fnref:132" rev="footnote"> ↩</a></li><li id="fn:133"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">133.</span><span style="display: inline-block; vertical-align: top;">昭：表明。</span><a href="#fnref:133" rev="footnote"> ↩</a></li><li id="fn:134"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">134.</span><span style="display: inline-block; vertical-align: top;">衮（gǔn）：天子及上公的礼服。冕：大夫以上的人所戴礼帽。黻（fú）：皮革制，用来遮蔽腹膝之间。珽（tǐnɡ）：天子所持玉笏。</span><a href="#fnref:134" rev="footnote"> ↩</a></li><li id="fn:135"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">135.</span><span style="display: inline-block; vertical-align: top;">带：束腰用的大带。裳：古代上衣为衣，下衣为裳。幅（bī）：古人用布从脚背一直缠到膝盖，似今之绑腿。舄（xì）：一种双层底的鞋。古代单层底的鞋为“履”，双层底的鞋为“舄”。</span><a href="#fnref:135" rev="footnote"> ↩</a></li><li id="fn:136"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">136.</span><span style="display: inline-block; vertical-align: top;">衡、紞（dǎn）、纮（hónɡ）、綖（yán）：都是冠冕亦即礼帽上的饰品。衡，把冠冕固定在发髻上的横簪。紞，线织的带子，垂于冠旁，下悬瑱。纮，古代把冠冕系在颌下的带子。古人带冠冕时，先用簪子别在发髻上，再用纮挽住，系在簪子的两端。綖，覆盖在冠冕上用布包裹着的板子。</span><a href="#fnref:136" rev="footnote"> ↩</a></li><li id="fn:137"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">137.</span><span style="display: inline-block; vertical-align: top;">昭其度也：是用来表示法度的。</span><a href="#fnref:137" rev="footnote"> ↩</a></li><li id="fn:138"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">138.</span><span style="display: inline-block; vertical-align: top;">藻：放玉器的垫子。用木板制成，外包皮革，上面绘有花纹。率（shuài）：佩巾，字亦作“帨（shuì）”。鞞（bǐnɡ）：刀鞘。鞛（běnɡ）：佩刀刀把处的装饰。</span><a href="#fnref:138" rev="footnote"> ↩</a></li><li id="fn:139"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">139.</span><span style="display: inline-block; vertical-align: top;">鞶（pán）：一种束腰的革带。厉：鞶带下垂的部分。游（liú）：也作“旒”，旌旗上的飘带。缨：即马鞅，系在马颈上，用以驾车。</span><a href="#fnref:139" rev="footnote"> ↩</a></li><li id="fn:140"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">140.</span><span style="display: inline-block; vertical-align: top;">昭其数也：是用来表示等级的。</span><a href="#fnref:140" rev="footnote"> ↩</a></li><li id="fn:141"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">141.</span><span style="display: inline-block; vertical-align: top;">火、龙、黼（fǔ）、黻（fú）：都是古代礼服上所绣的图案。“火”形作半环，如龙者为“龙”，黑白相间刺绣为一对斧头形的为“黼”，黑青相间刺绣为两个弓形相背的为“黻”。</span><a href="#fnref:141" rev="footnote"> ↩</a></li><li id="fn:142"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">142.</span><span style="display: inline-block; vertical-align: top;">五色比象：指用青、黄、赤、白、黑五种颜色，在礼服上绘成山、龙、花、虫之象。</span><a href="#fnref:142" rev="footnote"> ↩</a></li><li id="fn:143"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">143.</span><span style="display: inline-block; vertical-align: top;">钖（yánɡ）、鸾、和、铃：古代装饰在车马旌旗上的响铃。钖，系在马额上。鸾，系在马嚼子或车衡上方。和，系在车前横木上的小铃。铃，系在旌旗上的小铃。</span><a href="#fnref:143" rev="footnote"> ↩</a></li><li id="fn:144"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">144.</span><span style="display: inline-block; vertical-align: top;">三辰：指旌旗上的日、月、星图案。</span><a href="#fnref:144" rev="footnote"> ↩</a></li><li id="fn:145"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">145.</span><span style="display: inline-block; vertical-align: top;">章：公然行之。</span><a href="#fnref:145" rev="footnote"> ↩</a></li><li id="fn:146"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">146.</span><span style="display: inline-block; vertical-align: top;">九鼎：相传为夏禹所铸，用来象征九州。鼎是礼之重器，夏、商、周都以此作为政权的象征，成为传国之宝。雒邑：东周都城所在。</span><a href="#fnref:146" rev="footnote"> ↩</a></li><li id="fn:147"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">147.</span><span style="display: inline-block; vertical-align: top;">内史：周朝官名。执掌外交、书王命和占卜等事。</span><a href="#fnref:147" rev="footnote"> ↩</a></li><li id="fn:148"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">148.</span><span style="display: inline-block; vertical-align: top;">臧孙达：即臧哀伯，“哀伯”是谥号。臧哀伯的父亲臧僖伯曾谏阻鲁隐公去棠地观鱼，他本人又谏桓公“取郜大鼎于宋纳于大庙”，所以周内史有这样的感慨和希望。</span><a href="#fnref:148" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      
      
      <categories>
          
          <category> 每天一篇古文观止计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古文观止 </tag>
            
            <tag> 文言文 </tag>
            
            <tag> 阅读笔记 </tag>
            
            <tag> 心得体会 </tag>
            
            <tag> 每日计划系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>郑庄公戒饬守臣</title>
      <link href="/post/73a3ddab.html"/>
      <url>/post/73a3ddab.html</url>
      
        <content type="html"><![CDATA[<h1>郑庄公戒饬守臣(隐公十一年)</h1><h2 id="原文及翻译">原文及翻译</h2><p>秋七月，公会齐侯、郑伯伐许<sup id="fnref:99"><a href="#fn:99" rel="footnote">99</a></sup>。庚辰<sup id="fnref:100"><a href="#fn:100" rel="footnote">100</a></sup>，傅于许<sup id="fnref:101"><a href="#fn:101" rel="footnote">101</a></sup>。颍考叔取郑伯之旗蝥弧以先登<sup id="fnref:102"><a href="#fn:102" rel="footnote">102</a></sup>，子都自下射之<sup id="fnref:103"><a href="#fn:103" rel="footnote">103</a></sup>，颠<sup id="fnref:104"><a href="#fn:104" rel="footnote">104</a></sup>。瑕叔盈又以蝥弧登<sup id="fnref:105"><a href="#fn:105" rel="footnote">105</a></sup>，周麾而呼曰<sup id="fnref:106"><a href="#fn:106" rel="footnote">106</a></sup>：“君登矣！”郑师毕登。壬午<sup id="fnref:107"><a href="#fn:107" rel="footnote">107</a></sup>，遂入许。许庄公奔卫。齐侯以许让公，公曰：“君谓许不共<sup id="fnref:108"><a href="#fn:108" rel="footnote">108</a></sup>，故从君讨之。许既伏其罪矣，虽君有命，寡人弗敢与闻。”乃与郑人。</p><blockquote><p>秋季七月，隐公会合齐僖公、郑庄公攻打许国。初一，军队逼攻许城。颍考叔拿着郑庄公的蝥弧旗抢先登城，子都从下边用箭射他，颍考叔跌了下来。瑕叔盈又拿着蝥弧旗登城，登上去向四周挥动旗子大喊道：“国君登城了！”郑国的军队全部登上了城。初三，郑庄公进入许城。许庄公逃奔到卫国。齐僖公把许国让给鲁隐公，鲁隐公说：“君侯说许国不恭顺，所以我跟从君侯去攻打它。许国既然伏罪了，虽然君侯有这样的指示，寡人不敢听取。”于是把许国送给郑庄公。</p></blockquote><p>郑伯使许大夫百里奉许叔以居许东偏<sup id="fnref:109"><a href="#fn:109" rel="footnote">109</a></sup>，曰：“天祸许国，鬼神实不逞于许君<sup id="fnref:110"><a href="#fn:110" rel="footnote">110</a></sup>，而假手于我寡人。寡人唯是一二父兄不能共亿<sup id="fnref:111"><a href="#fn:111" rel="footnote">111</a></sup>，其敢以许自为功乎？寡人有弟，不能和协，而使餬其口于四方<sup id="fnref:112"><a href="#fn:112" rel="footnote">112</a></sup>，其况能久有许乎？吾子其奉许叔以抚柔此民也<sup id="fnref:113"><a href="#fn:113" rel="footnote">113</a></sup>，吾将使获也佐吾子<sup id="fnref:114"><a href="#fn:114" rel="footnote">114</a></sup>。若寡人得没于地<sup id="fnref:115"><a href="#fn:115" rel="footnote">115</a></sup>，天其以礼悔祸于许，无宁兹许公复奉其社稷<sup id="fnref:116"><a href="#fn:116" rel="footnote">116</a></sup>，唯我郑国之有请谒焉，如旧昏媾<sup id="fnref:117"><a href="#fn:117" rel="footnote">117</a></sup>，其能降以相从也<sup id="fnref:118"><a href="#fn:118" rel="footnote">118</a></sup>。无滋他族实逼处此，以与我郑国争此土也。吾子孙其覆亡之不暇，而况能禋祀许乎<sup id="fnref:119"><a href="#fn:119" rel="footnote">119</a></sup>？寡人之使吾子处此，不惟许国之为，亦聊以固吾圉也<sup id="fnref:120"><a href="#fn:120" rel="footnote">120</a></sup>。”乃使公孙获处许西偏，曰：“凡而器用财贿，无置于许。我死，乃亟去之<sup id="fnref:121"><a href="#fn:121" rel="footnote">121</a></sup>。吾先君新邑于此<sup id="fnref:122"><a href="#fn:122" rel="footnote">122</a></sup>，王室而既卑矣，周之子孙日失其序<sup id="fnref:123"><a href="#fn:123" rel="footnote">123</a></sup>。夫许，大岳之胤也<sup id="fnref:124"><a href="#fn:124" rel="footnote">124</a></sup>。天而既厌周德矣，吾其能与许争乎？”</p><blockquote><p>郑庄公派许国大夫百里侍奉许庄公的弟弟许叔住在许城的东边偏远处，说：“上天降祸给许国，鬼神确实对许君不满，借寡人的手来进行惩罚。只是寡人连一两位父老兄弟都不能相安，岂敢把进攻许国作为自己的功绩呢？寡人有个弟弟，也不能和睦相处，使他到四处求食，难道还能长久占有许国吗？您侍奉许叔来安抚这里的百姓，我打算让公孙获来帮助您。假如寡人得到善终，上天或者依照礼来撤回加于许国的祸害，愿意让许庄公再来治理他的国家，那时，要是我郑国有所请求，就像亲戚那样，许国大概能够诚心允许吧。不要使他国处在这里逼迫我们，来与我郑国争夺这块土地。我的子孙挽救危亡都来不及，何况祭祀许国的祖先呢？寡人让您处在这里，不仅是为了许国，也是姑且用来巩固我的边疆。”于是让公孙获住在许城的西边偏远处，说：“凡是你的器用财货，不要放在许城。我死后，就赶快离开这里。我的先父在这里新建了城邑，周王朝既已衰落了，我们这些周朝的子孙一天天失掉自己的事业。许国，是四岳的后代，上天既然已经厌弃周朝了，我哪能和许国竞争呢？”</p></blockquote><p>君子谓郑庄公“于是乎有礼。礼，经国家，定社稷，序人民，利后嗣者也。许无刑而伐之<sup id="fnref:125"><a href="#fn:125" rel="footnote">125</a></sup>，服而舍之，度德而处之，量力而行之，相时而动，无累后人，可谓知礼矣”。</p><blockquote><p>君子称郑庄公“在这件事情上有礼。礼是治理国家、安定社稷、使百姓有秩序、使后代得利益的。许国违背法度就攻击它，服罪了就宽恕它，考虑自己的德行而处理它，衡量自己的力量而安置它，看准时机来行动，不连累后代，可以说懂得礼了”。</p></blockquote><h2 id="评价">评价</h2><p>郑庄公也算是深谋远虑，先是安抚傀儡政权，然后让公孙获别把宝贝放在这。很有东西。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:99"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">99.</span><span style="display: inline-block; vertical-align: top;">公：指鲁隐公。齐侯：指齐僖公。因齐国是侯爵，故称“齐侯”。郑伯：指郑庄公。许：国名。初都在今河南许昌，姜姓。</span><a href="#fnref:99" rev="footnote"> ↩</a></li><li id="fn:100"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">100.</span><span style="display: inline-block; vertical-align: top;">庚辰：初一。</span><a href="#fnref:100" rev="footnote"> ↩</a></li><li id="fn:101"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">101.</span><span style="display: inline-block; vertical-align: top;">傅：逼近。</span><a href="#fnref:101" rev="footnote"> ↩</a></li><li id="fn:102"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">102.</span><span style="display: inline-block; vertical-align: top;">蝥（máo）弧：一种旗帜的名称。</span><a href="#fnref:102" rev="footnote"> ↩</a></li><li id="fn:103"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">103.</span><span style="display: inline-block; vertical-align: top;">子都：即郑大夫公孙阏（è）。射之：射颍考叔。因此前郑伯准备攻打许国的时候，子都和颍考叔争夺兵车，子都没有争到，怀恨在心，挟嫌报复，故“射之”。</span><a href="#fnref:103" rev="footnote"> ↩</a></li><li id="fn:104"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">104.</span><span style="display: inline-block; vertical-align: top;">颠：跌倒，坠落。</span><a href="#fnref:104" rev="footnote"> ↩</a></li><li id="fn:105"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">105.</span><span style="display: inline-block; vertical-align: top;">瑕叔盈：郑大夫。</span><a href="#fnref:105" rev="footnote"> ↩</a></li><li id="fn:106"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">106.</span><span style="display: inline-block; vertical-align: top;">周麾（huī）：向四方舞动旗帜。麾，指挥，挥动。</span><a href="#fnref:106" rev="footnote"> ↩</a></li><li id="fn:107"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">107.</span><span style="display: inline-block; vertical-align: top;">壬午：即七月初三日。</span><a href="#fnref:107" rev="footnote"> ↩</a></li><li id="fn:108"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">108.</span><span style="display: inline-block; vertical-align: top;">共（ɡōnɡ）：通“恭”，恭顺。</span><a href="#fnref:108" rev="footnote"> ↩</a></li><li id="fn:109"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">109.</span><span style="display: inline-block; vertical-align: top;">许叔：许庄公的弟弟。偏：偏远，边远的地方。</span><a href="#fnref:109" rev="footnote"> ↩</a></li><li id="fn:110"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">110.</span><span style="display: inline-block; vertical-align: top;">不逞：不满意。</span><a href="#fnref:110" rev="footnote"> ↩</a></li><li id="fn:111"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">111.</span><span style="display: inline-block; vertical-align: top;">共亿：相安，和谐。亿，安宁，安定。</span><a href="#fnref:111" rev="footnote"> ↩</a></li><li id="fn:112"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">112.</span><span style="display: inline-block; vertical-align: top;">餬（hú）：以粥、糊充食口腹。</span><a href="#fnref:112" rev="footnote"> ↩</a></li><li id="fn:113"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">113.</span><span style="display: inline-block; vertical-align: top;">吾子：尊称，相当于“您”。</span><a href="#fnref:113" rev="footnote"> ↩</a></li><li id="fn:114"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">114.</span><span style="display: inline-block; vertical-align: top;">获：即公孙获，郑大夫。</span><a href="#fnref:114" rev="footnote"> ↩</a></li><li id="fn:115"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">115.</span><span style="display: inline-block; vertical-align: top;">得没于地：寿终埋骨于地下。</span><a href="#fnref:115" rev="footnote"> ↩</a></li><li id="fn:116"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">116.</span><span style="display: inline-block; vertical-align: top;">无宁：宁可。兹：使。下文“无滋”之“滋”与此同义。</span><a href="#fnref:116" rev="footnote"> ↩</a></li><li id="fn:117"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">117.</span><span style="display: inline-block; vertical-align: top;">昏媾（ɡòu）：婚姻。昏，同“婚”。</span><a href="#fnref:117" rev="footnote"> ↩</a></li><li id="fn:118"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">118.</span><span style="display: inline-block; vertical-align: top;">降：降心，屈尊。</span><a href="#fnref:118" rev="footnote"> ↩</a></li><li id="fn:119"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">119.</span><span style="display: inline-block; vertical-align: top;">禋（yīn）祀：祭祀天神的仪式。</span><a href="#fnref:119" rev="footnote"> ↩</a></li><li id="fn:120"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">120.</span><span style="display: inline-block; vertical-align: top;">圉（yǔ）：边疆。</span><a href="#fnref:120" rev="footnote"> ↩</a></li><li id="fn:121"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">121.</span><span style="display: inline-block; vertical-align: top;">亟（jí）：赶快地，急迫地。</span><a href="#fnref:121" rev="footnote"> ↩</a></li><li id="fn:122"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">122.</span><span style="display: inline-block; vertical-align: top;">新邑：指建立新郑的时间不长。</span><a href="#fnref:122" rev="footnote"> ↩</a></li><li id="fn:123"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">123.</span><span style="display: inline-block; vertical-align: top;">周之子孙日失其序：这里是说周的后代已经衰落。郑是姬姓，也是周的后代。</span><a href="#fnref:123" rev="footnote"> ↩</a></li><li id="fn:124"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">124.</span><span style="display: inline-block; vertical-align: top;">大（tài）岳：传说许为尧时四岳之后。胤（yìn）：后裔。</span><a href="#fnref:124" rev="footnote"> ↩</a></li><li id="fn:125"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">125.</span><span style="display: inline-block; vertical-align: top;">无刑：不合乎礼的社会规范或行为准则。刑，法则，规则。</span><a href="#fnref:125" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      
      
      <categories>
          
          <category> 每天一篇古文观止计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古文观止 </tag>
            
            <tag> 文言文 </tag>
            
            <tag> 阅读笔记 </tag>
            
            <tag> 心得体会 </tag>
            
            <tag> 每日计划系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>臧僖伯谏观鱼</title>
      <link href="/post/e806ce5d.html"/>
      <url>/post/e806ce5d.html</url>
      
        <content type="html"><![CDATA[<h1>臧僖伯谏观鱼（隐公五年）</h1><h2 id="原文及翻译">原文及翻译</h2><p>春，公将如棠观鱼者<sup id="fnref:81"><a href="#fn:81" rel="footnote">81</a></sup>。</p><blockquote><p>鲁隐公五年春天，打算到棠地观看捕鱼。</p></blockquote><p>臧僖伯谏曰<sup id="fnref:82"><a href="#fn:82" rel="footnote">82</a></sup>：“凡物不足以讲大事<sup id="fnref:83"><a href="#fn:83" rel="footnote">83</a></sup>，其材不足以备器用<sup id="fnref:84"><a href="#fn:84" rel="footnote">84</a></sup>，则君不举焉<sup id="fnref:85"><a href="#fn:85" rel="footnote">85</a></sup>。君将纳民于轨物者也<sup id="fnref:86"><a href="#fn:86" rel="footnote">86</a></sup>，故讲事以度轨量谓之‘轨’<sup id="fnref:87"><a href="#fn:87" rel="footnote">87</a></sup>，取材以章物采谓之‘物’，不轨不物。谓之‘乱政’。乱政亟行，所以败也。故春蒐、夏苗、秋狝、冬狩<sup id="fnref:88"><a href="#fn:88" rel="footnote">88</a></sup>，皆于农隙以讲事也。三年而治兵<sup id="fnref:89"><a href="#fn:89" rel="footnote">89</a></sup>，入而振旅<sup id="fnref:90"><a href="#fn:90" rel="footnote">90</a></sup>，归而饮至<sup id="fnref:91"><a href="#fn:91" rel="footnote">91</a></sup>，以数军实，昭文章<sup id="fnref:92"><a href="#fn:92" rel="footnote">92</a></sup>，明贵贱，辨等列，顺少长，习威仪也。鸟兽之肉不登于俎<sup id="fnref:93"><a href="#fn:93" rel="footnote">93</a></sup>，皮革齿牙、骨角毛羽不登于器，则君不射，古之制也。若夫山林川泽之实，器用之资，皂隶之事<sup id="fnref:94"><a href="#fn:94" rel="footnote">94</a></sup>，官司之守，非君所及也。”</p><blockquote><p>臧僖伯劝阻说：“一切事物，不和讲习祭祀、战争相关，它的材料不能制作礼器兵器，国君就不为它有所举动。国君是使臣民走向正轨和实用的人，所以讲习祭祀和军事来衡量器物合于法度叫做‘正轨’，选取材料制作器物来显示等级文采叫做‘实用’，不合正轨、不关实用的行动叫做‘乱政’。乱政屡次实行，国家就会衰败。所以春夏秋冬的田猎都是在农闲时演习军事。每三年出城大演习，进城整顿军队，然后国君在宗庙宴请从事人员，计算田猎的擒获，要显示车服旌旗的文采，表明各级各等的贵贱，辨别各类人员的等级，依年龄长幼的次序或前或后，这是讲习上下的威仪。鸟兽的肉不放进祭器，皮革、壮齿、象牙、兽骨、牛角、旄牛尾、鸟羽不用在祭器中的，国君就不去射取，这是古代制度。至于山林、河湖的产品，一般器具的材料，这是下级人员的工作，是有关部门的职责，不是国君所该管的。”</p></blockquote><p>公曰：“吾将略地焉<sup id="fnref:95"><a href="#fn:95" rel="footnote">95</a></sup>。”遂往，陈鱼而观之。僖伯称疾不从<sup id="fnref:96"><a href="#fn:96" rel="footnote">96</a></sup>。</p><blockquote><p>隐公说：“我准备巡视边境。”于是前往棠邑，并把捕鱼所用物品陈列展览。臧僖伯托病没有随行。</p></blockquote><p>书曰：“公矢鱼于棠<sup id="fnref:97"><a href="#fn:97" rel="footnote">97</a></sup>。”非礼也，且言远地也<sup id="fnref:98"><a href="#fn:98" rel="footnote">98</a></sup>。</p><blockquote><p>《春秋》写道：“公矢鱼于棠。”认为这不合礼法，而且指出他远离了国都。</p></blockquote><h2 id="评价">评价</h2><p>当了国君还一堆限制，也真够可悲的。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:81"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">81.</span><span style="display: inline-block; vertical-align: top;">公：指鲁隐公。《春秋》和《左传》的体例，以鲁国国君纪年，故凡鲁国国君都直接称“公”。棠：鲁国地名。在今山东鱼台西北。鱼：捕鱼。</span><a href="#fnref:81" rev="footnote"> ↩</a></li><li id="fn:82"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">82.</span><span style="display: inline-block; vertical-align: top;">臧僖伯：即鲁公子姬彄（kōu），封于臧，谥号僖。</span><a href="#fnref:82" rev="footnote"> ↩</a></li><li id="fn:83"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">83.</span><span style="display: inline-block; vertical-align: top;">讲：讲习，训练。大事：指祭祀和军事活动等。</span><a href="#fnref:83" rev="footnote"> ↩</a></li><li id="fn:84"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">84.</span><span style="display: inline-block; vertical-align: top;">材：材料，原料。器用：专指用于祭祀和兵戎大事的器物。</span><a href="#fnref:84" rev="footnote"> ↩</a></li><li id="fn:85"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">85.</span><span style="display: inline-block; vertical-align: top;">举：指行动。</span><a href="#fnref:85" rev="footnote"> ↩</a></li><li id="fn:86"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">86.</span><span style="display: inline-block; vertical-align: top;">轨物：法度和准则。</span><a href="#fnref:86" rev="footnote"> ↩</a></li><li id="fn:87"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">87.</span><span style="display: inline-block; vertical-align: top;">度（duó）轨量：校正法度。度，法度，法规。量，衡量。</span><a href="#fnref:87" rev="footnote"> ↩</a></li><li id="fn:88"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">88.</span><span style="display: inline-block; vertical-align: top;">春蒐（sōu）：春天搜寻猎取未怀孕的禽兽。夏苗：夏天猎取为害庄稼的禽兽。秋狝（mí）：秋天杀伤禽兽。狝，杀。冬狩：冬天围猎禽兽。以上均为四季狩猎的名称。说明有组织的狩猎带有明显的军事演习的目的。</span><a href="#fnref:88" rev="footnote"> ↩</a></li><li id="fn:89"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">89.</span><span style="display: inline-block; vertical-align: top;">治兵：军队外出演习。</span><a href="#fnref:89" rev="footnote"> ↩</a></li><li id="fn:90"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">90.</span><span style="display: inline-block; vertical-align: top;">振旅：整顿军队。</span><a href="#fnref:90" rev="footnote"> ↩</a></li><li id="fn:91"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">91.</span><span style="display: inline-block; vertical-align: top;">饮至：诸侯朝拜、会盟、征伐完毕，在宗庙饮酒庆贺的一种仪式。</span><a href="#fnref:91" rev="footnote"> ↩</a></li><li id="fn:92"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">92.</span><span style="display: inline-block; vertical-align: top;">昭文章：展示车服旌旗。</span><a href="#fnref:92" rev="footnote"> ↩</a></li><li id="fn:93"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">93.</span><span style="display: inline-block; vertical-align: top;">俎（zǔ）：祭祀时用来盛祭品的礼器。</span><a href="#fnref:93" rev="footnote"> ↩</a></li><li id="fn:94"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">94.</span><span style="display: inline-block; vertical-align: top;">皂隶：古代对贱役的称呼。这里泛指地位低下的人。</span><a href="#fnref:94" rev="footnote"> ↩</a></li><li id="fn:95"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">95.</span><span style="display: inline-block; vertical-align: top;">略地：巡视边境。</span><a href="#fnref:95" rev="footnote"> ↩</a></li><li id="fn:96"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">96.</span><span style="display: inline-block; vertical-align: top;">称疾：推托说有病。古代“疾”指小病，“病”为大病、重病。</span><a href="#fnref:96" rev="footnote"> ↩</a></li><li id="fn:97"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">97.</span><span style="display: inline-block; vertical-align: top;">矢（shǐ）：陈献。</span><a href="#fnref:97" rev="footnote"> ↩</a></li><li id="fn:98"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">98.</span><span style="display: inline-block; vertical-align: top;">远地：棠距曲阜较远，故称“远地”。</span><a href="#fnref:98" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      
      
      <categories>
          
          <category> 每天一篇古文观止计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古文观止 </tag>
            
            <tag> 文言文 </tag>
            
            <tag> 阅读笔记 </tag>
            
            <tag> 心得体会 </tag>
            
            <tag> 每日计划系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>石碏谏宠州吁</title>
      <link href="/post/eccbd782.html"/>
      <url>/post/eccbd782.html</url>
      
        <content type="html"><![CDATA[<h1>石碏谏宠州吁（隐公三年）</h1><h2 id="引言">引言</h2><p>夫宠而不骄，骄而能降，降而不憾，憾而能眕者，鲜矣。</p><h2 id="原文及翻译">原文及翻译</h2><p>庄公娶于齐东宫得臣之妹<sup id="fnref:67"><a href="#fn:67" rel="footnote">67</a></sup>，曰庄姜，美而无子，卫人所为赋《硕人》也<sup id="fnref:68"><a href="#fn:68" rel="footnote">68</a></sup>。又娶于陈<sup id="fnref:69"><a href="#fn:69" rel="footnote">69</a></sup>，曰厉妫，生孝伯，蚤死<sup id="fnref:70"><a href="#fn:70" rel="footnote">70</a></sup>。其娣戴妫生桓公<sup id="fnref:71"><a href="#fn:71" rel="footnote">71</a></sup>，庄姜以为己子。公子州吁，嬖人之子也<sup id="fnref:72"><a href="#fn:72" rel="footnote">72</a></sup>，有宠而好兵，公弗禁，庄姜恶之。</p><blockquote><p>卫庄公娶了齐太子得臣的胞妹，她后来被称为“庄姜”，庄姜很美丽却没有儿子，卫国人为她写了《硕人》一诗。庄公又娶了陈国女子，她后来被称为“厉妫”，厉妫生了孝伯，她很早就死了。厉妫的同父妹妹戴妫，生了桓公，庄姜把他认作自己的儿子。公子州吁是庄公宠爱的姬妾所生，受宠而且喜欢玩弄武器，庄公不禁止，庄姜厌恶他。</p></blockquote><p>石碏谏曰<sup id="fnref:73"><a href="#fn:73" rel="footnote">73</a></sup>：“臣闻爱子，教之以义方<sup id="fnref:74"><a href="#fn:74" rel="footnote">74</a></sup>，弗纳于邪。骄、奢、淫、佚，所自邪也，四者之来，宠禄过也。将立州吁，乃定之矣，若犹未也，阶之为祸<sup id="fnref:75"><a href="#fn:75" rel="footnote">75</a></sup>。夫宠而不骄，骄而能降，降而不憾，憾而能眕者<sup id="fnref:76"><a href="#fn:76" rel="footnote">76</a></sup>，鲜矣<sup id="fnref:77"><a href="#fn:77" rel="footnote">77</a></sup>。且夫贱妨贵，少陵长，远间亲，新间旧，小加大，淫破义，所谓六逆也；君义，臣行，父慈，子孝，兄爱，弟敬，所谓六顺也；去顺效逆，所以速祸也。君人者<sup id="fnref:78"><a href="#fn:78" rel="footnote">78</a></sup>，将祸是务去，而速之，无乃不可乎<sup id="fnref:79"><a href="#fn:79" rel="footnote">79</a></sup>？”弗听。其子厚与州吁游，禁之，不可。桓公立，乃老<sup id="fnref:80"><a href="#fn:80" rel="footnote">80</a></sup>。</p><blockquote><p>石碏劝庄公说：“我听说，怜爱儿子要教他规矩道义，不让他走邪路。骄傲、奢侈、放荡、安逸是走邪路的开始，四种恶习的发生由于过分的宠爱、过多的俸禄。如果您打算立州吁为太子，就定下来；如果还没有，纵容他就会一步步酿成祸乱。被宠爱却不骄横，骄横却安于地位下降，地位下降却不怨恨，怨恨却能克制自己的，这样的人是极少的。而且卑贱妨害高贵，年少侵凌年长，疏远代替亲近，新人压制旧人，弱小欺侮强大，淫邪破坏道义，这六种是对理义的违逆；国君仁义，臣下奉行，父亲慈善，儿子孝顺，兄长友爱，弟弟敬重，这六种是对理义的顺从；抛弃六种顺从，效法六种违逆，这就会加快祸乱的到来。作为百姓的君主，应务必消除祸乱，现在反而加速祸乱的到来，恐怕不可以吧？”庄公不听。石碏的儿子石厚和州吁来往密切，石碏禁止他，石厚不听。庄公死后，桓公继位，石碏就告老退休了。</p></blockquote><h2 id="评价">评价</h2><p>文章里的 <strong>“夫宠而不骄，骄而能降，降而不憾，憾而能眕者，鲜矣。”</strong> 这句话很有意思，古人评论说这是《左传》崇礼的思想。其实这玩意用现代化翻译过来就是：“今天敢吃草，明天就敢吃人”“你今天要xx，明天要什么我都不敢想”。这么一想就通了，中华文化啊，源远流长，绵延不绝。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:67"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">67.</span><span style="display: inline-block; vertical-align: top;">卫庄公：名扬。卫，国名。国都在今河南淇县，后迁到今河南濮阳附近，姬姓。齐：国名。国都在今山东临淄，姜姓。东宫：太子所居处。这里代指太子。得臣：齐庄公太子。</span><a href="#fnref:67" rev="footnote"> ↩</a></li><li id="fn:68"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">68.</span><span style="display: inline-block; vertical-align: top;">《硕人》：见《诗经·卫风》。相传是赞美庄姜的。</span><a href="#fnref:68" rev="footnote"> ↩</a></li><li id="fn:69"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">69.</span><span style="display: inline-block; vertical-align: top;">陈：国名。国都在今河南淮阳，妫（ɡuī）姓。</span><a href="#fnref:69" rev="footnote"> ↩</a></li><li id="fn:70"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">70.</span><span style="display: inline-block; vertical-align: top;">蚤：通“早”。</span><a href="#fnref:70" rev="footnote"> ↩</a></li><li id="fn:71"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">71.</span><span style="display: inline-block; vertical-align: top;">娣：古代称妹妹为“娣”。</span><a href="#fnref:71" rev="footnote"> ↩</a></li><li id="fn:72"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">72.</span><span style="display: inline-block; vertical-align: top;">嬖（bì）人：地位低贱但受宠的人。这里指卫庄公的宠妾。</span><a href="#fnref:72" rev="footnote"> ↩</a></li><li id="fn:73"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">73.</span><span style="display: inline-block; vertical-align: top;">石碏（què）：卫国大夫。</span><a href="#fnref:73" rev="footnote"> ↩</a></li><li id="fn:74"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">74.</span><span style="display: inline-block; vertical-align: top;">义方：关于义的道理和准则。</span><a href="#fnref:74" rev="footnote"> ↩</a></li><li id="fn:75"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">75.</span><span style="display: inline-block; vertical-align: top;">阶之为祸：一步步酿成祸乱。阶，阶梯。这里用做动词，指一步步引向。</span><a href="#fnref:75" rev="footnote"> ↩</a></li><li id="fn:76"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">76.</span><span style="display: inline-block; vertical-align: top;">眕（zhěn）：克制，不轻举妄动。</span><a href="#fnref:76" rev="footnote"> ↩</a></li><li id="fn:77"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">77.</span><span style="display: inline-block; vertical-align: top;">鲜（xiǎn）：少。</span><a href="#fnref:77" rev="footnote"> ↩</a></li><li id="fn:78"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">78.</span><span style="display: inline-block; vertical-align: top;">君人者：统治人的人。这里指国君。</span><a href="#fnref:78" rev="footnote"> ↩</a></li><li id="fn:79"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">79.</span><span style="display: inline-block; vertical-align: top;">无乃不可乎：恐怕不可以吧？无乃，恐怕，莫非，用在反问句里，表示不以为然，语气比“岂不是”委婉缓和。</span><a href="#fnref:79" rev="footnote"> ↩</a></li><li id="fn:80"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">80.</span><span style="display: inline-block; vertical-align: top;">老：告老辞官。</span><a href="#fnref:80" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      
      
      <categories>
          
          <category> 每天一篇古文观止计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古文观止 </tag>
            
            <tag> 文言文 </tag>
            
            <tag> 阅读笔记 </tag>
            
            <tag> 心得体会 </tag>
            
            <tag> 每日计划系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>周郑交质</title>
      <link href="/post/e195182a.html"/>
      <url>/post/e195182a.html</url>
      
        <content type="html"><![CDATA[<h1>周郑交质(隐公三年)</h1><h2 id="引言">引言</h2><p>信不由中</p><h2 id="原文及翻译">原文及翻译</h2><p>郑武公、庄公为平王卿士<sup id="fnref:47"><a href="#fn:47" rel="footnote">47</a></sup>，王贰于虢<sup id="fnref:48"><a href="#fn:48" rel="footnote">48</a></sup>，郑伯怨王。王曰：“无之。”故周、郑交质<sup id="fnref:49"><a href="#fn:49" rel="footnote">49</a></sup>，王子狐为质于郑<sup id="fnref:50"><a href="#fn:50" rel="footnote">50</a></sup>，郑公子忽为质于周<sup id="fnref:51"><a href="#fn:51" rel="footnote">51</a></sup>。王崩，周人将畀虢公政<sup id="fnref:52"><a href="#fn:52" rel="footnote">52</a></sup>。四月，郑祭足帅师取温之麦<sup id="fnref:53"><a href="#fn:53" rel="footnote">53</a></sup>。秋，又取成周之禾<sup id="fnref:54"><a href="#fn:54" rel="footnote">54</a></sup>。周、郑交恶<sup id="fnref:55"><a href="#fn:55" rel="footnote">55</a></sup>。</p><blockquote><p>郑武公、郑庄公父子先后任周平王执政大臣，平王又兼用虢公，庄公埋怨平王。平王说：“没有这事。”因此周王朝和郑国交换人质：周平王的儿子王子狐去郑国为人质，郑庄公的儿子公子忽往周王朝为人质。平王去世，周王朝打算把国政全部交给虢公。四月，郑国的祭足领兵割取了周畿内小国温地的麦子；秋天，又割取了成周的谷子。周王朝和郑国关系恶化。</p></blockquote><p>君子曰：“信不由中<sup id="fnref:56"><a href="#fn:56" rel="footnote">56</a></sup> ，质无益也。明恕而行<sup id="fnref:57"><a href="#fn:57" rel="footnote">57</a></sup>，要之以礼<sup id="fnref:58"><a href="#fn:58" rel="footnote">58</a></sup>，虽无有质，谁能间之？苟有明信，涧、溪、沼、沚之毛<sup id="fnref:59"><a href="#fn:59" rel="footnote">59</a></sup>，蘋、蘩、蕰、藻之菜<sup id="fnref:60"><a href="#fn:60" rel="footnote">60</a></sup>，筐、筥、锜、釜之器<sup id="fnref:61"><a href="#fn:61" rel="footnote">61</a></sup>，潢污、行潦之水<sup id="fnref:62"><a href="#fn:62" rel="footnote">62</a></sup>，可荐于鬼神，可羞于王公<sup id="fnref:63"><a href="#fn:63" rel="footnote">63</a></sup>，而况君子结二国之信，行之以礼，又焉用质？《风》有《采蘩》、《采蘋》<sup id="fnref:64"><a href="#fn:64" rel="footnote">64</a></sup>，《雅》有《行苇》、《泂酌》<sup id="fnref:65"><a href="#fn:65" rel="footnote">65</a></sup>，昭忠信也<sup id="fnref:66"><a href="#fn:66" rel="footnote">66</a></sup>。”</p><blockquote><p>君子说：“诚信不发自内心，交换人质也没有益处。设身处地互相谅解而后行事，又据礼制加以约束，即使没有人质，谁又能离间？假若互信互谅，那山沟池塘的野草，四叶菜、白蒿、水草以及聚集水面的藻类等野菜，和方筐、圆筐、有足、无足的烹饪器等器具，甚至路上沟里大大小小的积水，都可以敬献鬼神，贡奉王公；何况君子建立两国的信赖，按照礼仪行事，又何必用人质？《诗经·国风》有《采蘩》、《采蘋》，《大雅》有《行苇》《泂酌》，这四篇都是表明忠实和信赖的道理的。”</p></blockquote><h2 id="评价">评价</h2><blockquote><p>“通篇以‘礼’‘信’二字做眼，平王欲退郑伯而不能退，欲进虢公而不敢进，乃用虚词欺饰，致行敌国质子之事，是不能处己以信，而驭下以礼矣；郑庄之不臣，平王致之也。曰：‘周郑’，曰：‘交质’，曰‘二国’，寓讥刺于不言之中矣。”</p></blockquote><p>大意是说，不能以理服人，周王室这样也是自己作的。诚信还是要基于互相谅解、互相体谅的基础上。</p><p><em>另，郑庄公这哥们确实猛。</em></p><p>本篇，个人感觉没啥特别的地方。<div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:47"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">47.</span><span style="display: inline-block; vertical-align: top;">平王卿士：周平王的执政大臣。</span><a href="#fnref:47" rev="footnote"> ↩</a></li><li id="fn:48"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">48.</span><span style="display: inline-block; vertical-align: top;">王贰于虢（ɡuó）：这里指周平王不想让郑庄公独大，于是分权给虢公，以保持周王室的权力平衡。贰，两属。虢，指西虢公，姬姓。西虢都城在今河南三门峡。</span><a href="#fnref:48" rev="footnote"> ↩</a></li><li id="fn:49"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">49.</span><span style="display: inline-block; vertical-align: top;">交质：互相交换人质。</span><a href="#fnref:49" rev="footnote"> ↩</a></li><li id="fn:50"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">50.</span><span style="display: inline-block; vertical-align: top;">王子狐：周平王的儿子。</span><a href="#fnref:50" rev="footnote"> ↩</a></li><li id="fn:51"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">51.</span><span style="display: inline-block; vertical-align: top;">公子忽：郑庄公的儿子。</span><a href="#fnref:51" rev="footnote"> ↩</a></li><li id="fn:52"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">52.</span><span style="display: inline-block; vertical-align: top;">畀（bì）：给予。</span><a href="#fnref:52" rev="footnote"> ↩</a></li><li id="fn:53"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">53.</span><span style="display: inline-block; vertical-align: top;">祭（zhài）足：郑大夫，字仲，故又称“祭仲”。温：周王室的属地，在今河南温县。</span><a href="#fnref:53" rev="footnote"> ↩</a></li><li id="fn:54"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">54.</span><span style="display: inline-block; vertical-align: top;">成周：周之东都，故城在今河南洛阳东郊。</span><a href="#fnref:54" rev="footnote"> ↩</a></li><li id="fn:55"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">55.</span><span style="display: inline-block; vertical-align: top;">交恶（wù）：互相怨恨。这里指周、郑关系恶化。</span><a href="#fnref:55" rev="footnote"> ↩</a></li><li id="fn:56"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">56.</span><span style="display: inline-block; vertical-align: top;">中：内心。</span><a href="#fnref:56" rev="footnote"> ↩</a></li><li id="fn:57"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">57.</span><span style="display: inline-block; vertical-align: top;">明恕：明察宽大。恕，推己及人，宽宥，谅解。</span><a href="#fnref:57" rev="footnote"> ↩</a></li><li id="fn:58"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">58.</span><span style="display: inline-block; vertical-align: top;">要（yāo）：约束。</span><a href="#fnref:58" rev="footnote"> ↩</a></li><li id="fn:59"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">59.</span><span style="display: inline-block; vertical-align: top;">沼：池塘。沚：水中的小块陆地。毛：本指草，这里泛指植物。</span><a href="#fnref:59" rev="footnote"> ↩</a></li><li id="fn:60"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">60.</span><span style="display: inline-block; vertical-align: top;">蘋（pín）：四叶菜，一种生于浅水中的草本植物。蘩：指白蒿。蕰（wēn）：是一种水草。藻：是一种聚生的藻类。</span><a href="#fnref:60" rev="footnote"> ↩</a></li><li id="fn:61"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">61.</span><span style="display: inline-block; vertical-align: top;">筐：方形竹制容器。筥（jǔ）：圆形竹制容器。锜（qí）：有足的烹饪器。釜（fǔ）：无足的烹饪器。</span><a href="#fnref:61" rev="footnote"> ↩</a></li><li id="fn:62"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">62.</span><span style="display: inline-block; vertical-align: top;">潢（huánɡ）污：聚积不流之水。行潦（xínɡlǎo）：沟中的水。</span><a href="#fnref:62" rev="footnote"> ↩</a></li><li id="fn:63"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">63.</span><span style="display: inline-block; vertical-align: top;">羞：进献食物。</span><a href="#fnref:63" rev="footnote"> ↩</a></li><li id="fn:64"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">64.</span><span style="display: inline-block; vertical-align: top;">《风》：指《诗经·国风》。《采蘩》、《采蘋》：是《召南》中的两篇，描写了妇女采集供祭祀用的野菜的场景。</span><a href="#fnref:64" rev="footnote"> ↩</a></li><li id="fn:65"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">65.</span><span style="display: inline-block; vertical-align: top;">《雅》：指《诗经·大雅》。《行苇》、《泂（jiǒnɡ）酌》：是《生民之什》中的两篇，前一篇是祝酒词，颂扬敬老尊贵，和睦相亲；后一篇表明要真诚地对待民众。</span><a href="#fnref:65" rev="footnote"> ↩</a></li><li id="fn:66"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">66.</span><span style="display: inline-block; vertical-align: top;">昭：表明。</span><a href="#fnref:66" rev="footnote"> ↩</a></li></ol></div></div></p>]]></content>
      
      
      <categories>
          
          <category> 每天一篇古文观止计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古文观止 </tag>
            
            <tag> 文言文 </tag>
            
            <tag> 阅读笔记 </tag>
            
            <tag> 心得体会 </tag>
            
            <tag> 每日计划系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一篇古文观止计划</title>
      <link href="/post/b90bbcc7.html"/>
      <url>/post/b90bbcc7.html</url>
      
        <content type="html"><![CDATA[<h1>《古文观止》</h1><h2 id="简介">简介</h2><p>《古文观止》是清代康熙年间吴楚材、吴调侯叔侄二人选编的一部古代散文集。吴楚材名乘权，吴调侯名大职，二人是浙江山阴（今绍兴）人，都是乡间塾师，以课徒为生。吴楚材学识渊博，除此书外还编有《纲鉴易知录》。《古文观止》编定于康熙三十三年（1694），共十二卷，以年代为经，作者为纬，按照从古到今的顺序排列，选录自春秋战国至明末三千多年间的名作222篇，基本上反映了中国古代散文发展的脉络与特点，体现了中国古代散文所取得的最高成就。</p><h2 id="特点">特点</h2><p>鲁迅先生在《集外集·选本》一文中说：“以《古文观止》和《文选》并称，初看好像是可笑的，但是，在文学上的影响，两者却一样不可轻视。凡选本，往往能比所选各家的全集更流行、更有作用，册数不多而包罗诸作，固然也是一种原因，但还在近则由选者之名位，远则凭古人之威灵，读者想从一个有名的选家窥见许多有名作家的作品。”“选者之名位”，《古文观止》是沾不上光的，吴楚材和吴调侯都是仕途不达的普通读书人，那么其脱颖而出全凭“古人之威灵”，即册数不多而包罗许多有名作家的作品。</p><p>吴楚材和吴调侯选文的初衷是“ <strong>杂选古文，原为初学设也</strong> ”（吴楚材《例言》），因此选编时，他们“ <strong>集古人之文，集古今人之选，而略者详之，繁者简之，散者合之，舛错者厘定之，差讹者校正之</strong> ”（吴楚材、吴调侯《序》），吸收借鉴了古人选文的经验，避免了一些错误，所以他们自认为这本选文是“诸选之美者毕集，其缺者无不备，而讹者无不正，是集古文之成者也，观止矣”（吴调侯《序》）！“观止”一词，出自《左传·襄公二十九年》。吴公子季札在鲁国观看周代乐舞，当看到《韶箾》时，便赞叹道：“观止矣，若有他乐，吾不敢请已。”“观止”就是好到极点的意思，吴楚材、吴调侯把“观止”用来作书名，意思是说，<strong>这里所选的就是人们所能看到的最好的、尽善尽美的文章了</strong> 。此书编成后，他们将书寄给了吴楚材的叔父吴兴祚（字伯成，号留村，累官至两广总督），他时在归化（今呼和浩特）任职，对此书大加赞赏，认为是“其选简而该，评注详而不繁”，可以“正蒙养而裨后学”，功德非浅。</p><p>《古文观止》也冲破了骈散之分的束缚，不仅选散体古文，对于骈体古文之精华也没有有意忽略，虽仅区区几篇，但可见古文发展演变之印迹，不能不说这种观点是相当高明的。自隋唐以降，特别是韩愈领导了古文运动，欧阳修又发起了“诗文革新”，骈体文江河日下，虽然仍不时有名作产生，但已经不是古文之主流，而到明代更是大受排斥；清初骈文有了复苏的迹象，但在《古文观止》成书时还并未形成气候，直到几十年后乾嘉时期李兆洛（1769—1841）编纂《骈体文钞》，才正式提出骈散并行，“相杂而迭用”，可知二吴骈散并重的观点具有其超前性。《古文观止》中选录的骈体文如孔稚珪的《北山移文》、骆宾王的《为徐敬业讨武曌檄》、王勃的《滕王阁序》、李华的《吊古战场文》、刘禹锡的《陋室铭》、杜牧的《阿房宫赋》都是千百年间脍炙人口的名篇。《古文观止》还突破了以前文选不收经史的传统，收录了《礼记》、《左传》、《公羊传》、《穀梁传》以及《史记》、《汉书》、《后汉书》等经史中的文章。至于史书中没有收录《三国志》以下正史中的文章，大概是因为此后的正史传记也没有什么可看了。</p><h2 id="一些删改">一些删改</h2><p>古文观止》的一些选文与原文略有出入，有的明显是二吴进行了删削加工，有的使原文更紧凑明晰，有的则不免弄巧成拙，如《颜斶说齐王》，删去了与齐王唇枪舌剑的一大段争辩，故事的曲折紧张就削弱了。《古文观止》的选文也有一些缺欠，主要表现为唐宋一段，除了“唐宋八大家”之外，很少选录其他作家的作品，特别是宋代，两卷半五十余篇文章中，除了三苏、欧阳修、王安石、曾巩，只选入了王禹偁（二篇）、李格非（一篇）、范仲淹（二篇）、司马光（一篇）、钱公辅（一篇）、李觏（一篇），六人八篇文章，与宋代散文创作的繁盛局面极不相称。这可以解释为篇幅所限，但如苏舜钦的《沧浪亭记》、李清照的《金石录后序》、朱熹的《庚子应诏封事》、文天祥《指南录后序》等都不收，而所收李格非的《书洛阳名园记后》、钱公辅的《义田记》、李觏的《袁州州学记》在文学成就上都无法与上述几篇相比，即如所选宋代六家之作也并非都是精品，如欧阳修《释祕演诗集序》、苏轼的《三槐堂铭》、王安石的《泰州海陵县主簿许君墓志铭》在作者本人的文集中都并不出众，它们的入选大概都与选家本人满心怀才不遇的牢骚有关。另外，李陵的《答苏武书》、苏洵《辨奸论》这样可疑的作品的入选，也应该看作是选家别有寄托吧。</p><h2 id="评价">评价</h2><p>《古文观止》中还有吴楚材、吴调侯二人的注评，特别是他们对文章结构的分析和艺术成就的总评部分最为精彩，对于文章的品读非常有益。《古文观止》自问世以来，三百多年间以其选文名篇荟萃，篇幅适中，雅俗共赏，一直盛行不衰，是古文启蒙的必备书，也深受古文爱好者的推崇。</p><h1>关于计划</h1><p>这个计划的初衷是认识到自己的文学素养实在是过于匮乏（ <em>简而言之我就一文盲</em> ），同时最近收到B站贩卖焦虑的持续输入，深感自己应该学习一些古文的知识，为自己的日后可能的写作和可能的文化自信打下坚实的基础。后续也可能会推出其他计划，比如web3<code>每日计划</code>等。</p>]]></content>
      
      
      <categories>
          
          <category> 每天一篇古文观止计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古文观止 </tag>
            
            <tag> 文言文 </tag>
            
            <tag> 阅读笔记 </tag>
            
            <tag> 心得体会 </tag>
            
            <tag> 每日计划系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>郑伯克段于鄢</title>
      <link href="/post/cc0ef4f7.html"/>
      <url>/post/cc0ef4f7.html</url>
      
        <content type="html"><![CDATA[<h1>郑伯克段于鄢（隐公元年）</h1><h2 id="引言">引言</h2><p>多行不义必自毙</p><h2 id="原文及翻译">原文及翻译</h2><p>初，郑武公娶于申<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，曰武姜<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，生庄公及共叔段<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。庄公寤生<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>，惊姜氏，故名曰寤生，遂恶之。爱共叔段，欲立之，亟请于武公<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>，公弗许。</p><blockquote><p>起初，郑武公娶了申国公室女子，她后来被称为“武姜”，生了庄公和共叔段。庄公出生时，脚先生出，分娩极困难，姜氏受到了惊吓，便给他取名“寤生”，因此厌恶他。喜欢共叔段，想立段做世子，她屡次请求武公，武公都不肯。</p></blockquote><p>及庄公即位，为之请制<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>。公曰：“制，岩邑也<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>，虢叔死焉<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>。他邑唯命。”请京<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup>，使居之，谓之京城大叔<sup id="fnref:10"><a href="#fn:10" rel="footnote">10</a></sup>。祭仲曰<sup id="fnref:11"><a href="#fn:11" rel="footnote">11</a></sup>：“都城过百雉<sup id="fnref:12"><a href="#fn:12" rel="footnote">12</a></sup>，国之害也。先王之制：大都不过参国之一<sup id="fnref:13"><a href="#fn:13" rel="footnote">13</a></sup>，中五之一，小九之一。今京不度<sup id="fnref:14"><a href="#fn:14" rel="footnote">14</a></sup>，非制也，君将不堪。”公曰：“姜氏欲之，焉辟害<sup id="fnref:15"><a href="#fn:15" rel="footnote">15</a></sup>？”对曰：“姜氏何厌之有！不如早为之所，无使滋蔓，蔓，难图也。蔓草犹不可除，况君之宠弟乎！”公曰：“多行不义必自毙<sup id="fnref:16"><a href="#fn:16" rel="footnote">16</a></sup>。子姑待之。”</p><blockquote><p>等庄公继承君位，武姜替段请求以制邑为领地。庄公说：“制是险要之地，虢叔曾死在那里。别的地方听您吩咐。”便请求京邑，庄公叫段住在京邑，段被称为“京城太叔”。祭仲说：“都市城墙边长超过三百丈，就是国家祸害。先王的制度：大都市城墙，长不超过国都的三分之一；中等城市城墙，长不超过国都的五分之一；小城市城墙，长不超过国都的九分之一。现在京邑城太大，不合制度，您会受不了的。”庄公说：“姜氏要这样，哪里能躲避祸害？”祭仲回答说：“姜氏哪里会满足！不如早作打算，不要使他再发展；再发展，就难对付了。蔓延的草还难以清除，何况是您被宠爱的胞弟呢！”庄公说：“他做不合理的事多了，一定会自取灭亡。你姑且等着吧！”</p></blockquote><p>既而大叔命西鄙、北鄙贰于己<sup id="fnref:17"><a href="#fn:17" rel="footnote">17</a></sup>。公子吕曰<sup id="fnref:18"><a href="#fn:18" rel="footnote">18</a></sup>：“国不堪贰，君将若之何？欲与大叔，臣请事之，若弗与，则请除之，无生民心<sup id="fnref:19"><a href="#fn:19" rel="footnote">19</a></sup>。”公曰：“无庸，将自及。”大叔又收贰以为己邑<sup id="fnref:20"><a href="#fn:20" rel="footnote">20</a></sup>，至于廪延<sup id="fnref:21"><a href="#fn:21" rel="footnote">21</a></sup>。子封曰<sup id="fnref:22"><a href="#fn:22" rel="footnote">22</a></sup>：“可矣。厚将得众。”公曰：“不义不昵<sup id="fnref:23"><a href="#fn:23" rel="footnote">23</a></sup>，厚将崩<sup id="fnref:24"><a href="#fn:24" rel="footnote">24</a></sup>。”</p><blockquote><p>不久太叔命令西部和北部边邑一方面听从庄公，一方面听从自己。公子吕说：“国家不能忍受这样两方面听命，您打算怎么办？想把君位让给太叔，我请求索性去侍奉他；假若不让位，便请除掉他，不要使臣民有别的想法。”庄公说：“用不着。他会自己走向灭亡。”太叔又把两面听命的西部与北部边邑全归属自己，还延伸到廪延。公子吕说：“行了。他势力雄厚，会得到更多拥戴者。”庄公说：“没有正义，得不到拥护，势力雄厚，反而会垮台。”</p></blockquote><p>大叔完聚<sup id="fnref:25"><a href="#fn:25" rel="footnote">25</a></sup>，缮甲兵<sup id="fnref:26"><a href="#fn:26" rel="footnote">26</a></sup>，具卒乘<sup id="fnref:27"><a href="#fn:27" rel="footnote">27</a></sup>，将袭郑，夫人将启之<sup id="fnref:28"><a href="#fn:28" rel="footnote">28</a></sup>。公闻其期，曰：“可矣！”命子封帅车二百乘以伐京<sup id="fnref:29"><a href="#fn:29" rel="footnote">29</a></sup>。京叛大叔段。段入于鄢<sup id="fnref:30"><a href="#fn:30" rel="footnote">30</a></sup>。公伐诸鄢。五月辛丑，大叔出奔共<sup id="fnref:31"><a href="#fn:31" rel="footnote">31</a></sup>。</p><blockquote><p>太叔牢筑城郭，聚积粮草，修补武器，补充士卒，打算偷袭庄公，姜氏准备开城门接应他。庄公得知太叔举兵日期，说：“行了！”命令公子吕率领二百乘兵车讨伐京邑。京邑人反叛太叔太叔逃到鄢邑。庄公又讨伐鄢邑。五月二十三日，太叔逃到共邑。</p></blockquote><p>书曰<sup id="fnref:32"><a href="#fn:32" rel="footnote">32</a></sup>：“郑伯克段于鄢。”段不弟<sup id="fnref:33"><a href="#fn:33" rel="footnote">33</a></sup>，故不言“弟”。如二君，故曰“克”。称“郑伯”，讥失教也，谓之郑志。不言“出奔”，难之也<sup id="fnref:34"><a href="#fn:34" rel="footnote">34</a></sup>。</p><blockquote><p>《春秋》写道：“郑伯克段于鄢。”段不敬兄长，所以不用“弟”字。交战双方好像两个国君，所以用“克”字。称庄公为“郑伯”，是讥讽他对胞弟有失教导，也表明这是庄公的本意。不写“太叔出奔”，是难于下笔的缘故。</p></blockquote><p>遂置姜氏于城颍而誓之曰<sup id="fnref:35"><a href="#fn:35" rel="footnote">35</a></sup>：“不及黄泉，无相见也<sup id="fnref:36"><a href="#fn:36" rel="footnote">36</a></sup>！”既而悔之。颍考叔为颍谷封人<sup id="fnref:37"><a href="#fn:37" rel="footnote">37</a></sup>，闻之，有献于公。公赐之食，食舍肉，公问之，对曰：“小人有母，皆尝小人之食矣，未尝君之羹<sup id="fnref:38"><a href="#fn:38" rel="footnote">38</a></sup>，请以遗之<sup id="fnref:39"><a href="#fn:39" rel="footnote">39</a></sup>。”公曰：“尔有母遗，繄我独无<sup id="fnref:40"><a href="#fn:40" rel="footnote">40</a></sup>！”颍考叔曰：“敢问何谓也？”公语之故，且告之悔。对曰：“君何患焉！若阙地及泉<sup id="fnref:41"><a href="#fn:41" rel="footnote">41</a></sup>，隧而相见，其谁曰不然？”公从之。公入而赋：“大隧之中，其乐也融融<sup id="fnref:42"><a href="#fn:42" rel="footnote">42</a></sup>。”姜出而赋：“大隧之外，其乐也泄泄<sup id="fnref:43"><a href="#fn:43" rel="footnote">43</a></sup>。”遂为母子如初。</p><blockquote><p>庄公把姜氏安置在城颍，对她发誓说：“不到黄泉，不再相见！”不久又后悔了。颍考叔是镇守边境颍谷的官员，听到这事，便向庄公献礼。庄公宴请他。吃饭时，颍考叔把肉留下放在一边，庄公问他，他说：“我有老母亲，我的食物她都尝遍了，却没尝过您的肉羹，我想请她尝尝。”庄公说：“你有母亲可以敬奉，唉！我却没有。”颍考叔说：“请问这是什么意思？”庄公把事情始末告诉了他，并且说明了自己的悔意。颍考叔回答说：“您有什么可忧愁的！假若挖地一直见到泉水，就在所挖的隧道里相见，谁能说不对？”庄公按他的办法做了。庄公进入隧道，唱：“身在隧道中，乐如乳水融。”姜氏从隧道出，唱：“身在隧道外，精神真爽快。”于是母子关系恢复，和原来一样。</p></blockquote><p>君子曰<sup id="fnref:44"><a href="#fn:44" rel="footnote">44</a></sup>：“颍考叔，纯孝也。爱其母，施及庄公<sup id="fnref:45"><a href="#fn:45" rel="footnote">45</a></sup>。《诗》曰：‘孝子不匮，永锡尔类<sup id="fnref:46"><a href="#fn:46" rel="footnote">46</a></sup>。’其是之谓乎！”</p><blockquote><p>君子说：“颍考叔的孝是纯正的。孝敬自己的母亲，又影响到庄公。《诗经》说：‘孝心不尽不竭，永远跟你同列。’说的就是颍考叔吧！”</p></blockquote><h2 id="一些评议">一些评议</h2><h3 id="文学">文学</h3><p>本文被很多人认为是左传里写的最好的，当然也很经典。从文采、时间脉络、人物塑造，都非常好。文章很短，但是人物很丰满，值得学习。</p><h3 id="人物">人物</h3><h4 id="武姜">武姜</h4><p>整出悲剧呢，和这个脑子多少有点病的妈有关系，这孩子倒着出生难产你恨他干什么。后面就更离谱了，持续偏心，最后想来个废长立幼，万幸郑武公心里有数，知道西周怎么玩完的。同时郑武公应该是也能看出郑庄公的能力来，不然也许真就立幼了。这妈反正是，后来一再纵容自己的小儿子，还里应外合想和小儿子一起造反。真，蚌埠住。 <strong>家庭不和睦的罪魁祸首</strong> 。然后我就想到现代那些重男轻女的家庭，估计无论男女，都更加不幸，也是一切问题的根源。</p><h4 id="郑庄公">郑庄公</h4><p>郑庄公这哥们，春秋初期小霸主，硬怼周王室的狠人，后世认为此人为<code>枭雄</code>。左传里没写，郑庄公即位的时候 <strong>才13岁</strong> ，那时候他妈让他给弟弟封地，结果他就知道不能把“制邑”这个易守难攻的地方给他，那时候他就知道自己弟弟要叛乱。然后吧，给了超过礼制的封地，来了一句 <strong>“多行不义必自毙”</strong> ，<strong>说明这哥们那时候就憋着坏呢，可能弟弟早就在心里被判了死刑了</strong>。</p><p>后来这弟弟一直作死，哥哥一直纵容，<strong>这招确实高，值得后世学习两千多年</strong>。郑庄公能力非常强，情报能力一流，弟弟和妈妈的行动一直在掌控之中，“公闻其期，曰：‘可矣！’”，连啥时候叛乱都知道。最后来个“可矣”，那意思我忍了很久了，可算行了。够黑，够狠的。结局是叛乱被剿灭。</p><p>难怪史官没法记这事，弟弟不当人，哥哥一直纵容让小错变大错，最后这个家支离破碎。但是这郑庄公毕竟平定叛乱，因此也不好写的太坏了。</p><p>最后呢，庄公还放狠话，“不及黄泉，无相见也。”但是自己后来又后悔了，来了一出重归于好的大戏。此处有不同观点，来自<a href="https://www.zhihu.com/question/35594885">知乎</a>，以下引用：</p><blockquote><p>“遂为母子如初”,初是什么样子？第一段啊，母子相恨啊，武姜从出生就恨他啊。母亲回了宫，母子之间还是那样；母亲最爱的小儿子，死在了异国他乡。</p></blockquote><p>那要是这么看，细思极恐。可谓一个从头到尾的悲剧了。不过这不符合“君子曰”开始的那一段话，应该不是作者本意。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">郑武公：姓姬，名掘突。郑，国名。国都在今河南新郑。申：国名。国都在今河南南阳，姜姓。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">武姜：郑武公的正妻，以郑武公的谥号“武”与其娘家姓“姜”合而为名。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">共（ɡōnɡ）叔段：“共”是国名，国都在今河南辉县，“叔”是排行。段后来逃亡至共，故称“共叔段”。</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;">寤（wù）生：逆生，指生产时婴儿脚先出来。</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;">亟（qì）：屡次。</span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;">请制：请求以制为领地。制，为郑国的一个地方，在今河南荥阳西北，又叫“虎牢关”。</span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">7.</span><span style="display: inline-block; vertical-align: top;">岩邑：险要之处。</span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">8.</span><span style="display: inline-block; vertical-align: top;">虢（ɡuó）叔：东虢的国君。虢，分东、西、北三国，均为姬姓国。东虢国都在今河南荥阳。</span><a href="#fnref:8" rev="footnote"> ↩</a></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">9.</span><span style="display: inline-block; vertical-align: top;">京：郑国地名。在今河南荥阳东南。</span><a href="#fnref:9" rev="footnote"> ↩</a></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">10.</span><span style="display: inline-block; vertical-align: top;">大叔：太叔。大，同“太”。</span><a href="#fnref:10" rev="footnote"> ↩</a></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">11.</span><span style="display: inline-block; vertical-align: top;">祭（zhài）仲：即祭足，郑国大夫。</span><a href="#fnref:11" rev="footnote"> ↩</a></li><li id="fn:12"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">12.</span><span style="display: inline-block; vertical-align: top;">雉：古代城墙的丈量单位，长三丈高一丈为一雉。</span><a href="#fnref:12" rev="footnote"> ↩</a></li><li id="fn:13"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">13.</span><span style="display: inline-block; vertical-align: top;">参国之一：国都城墙的三分之一。参，通“三”。</span><a href="#fnref:13" rev="footnote"> ↩</a></li><li id="fn:14"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">14.</span><span style="display: inline-block; vertical-align: top;">不度：不合法度。</span><a href="#fnref:14" rev="footnote"> ↩</a></li><li id="fn:15"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">15.</span><span style="display: inline-block; vertical-align: top;">辟（bì）害：躲避祸害。辟，退避，躲避。</span><a href="#fnref:15" rev="footnote"> ↩</a></li><li id="fn:16"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">16.</span><span style="display: inline-block; vertical-align: top;">毙：仆倒，倒下去。</span><a href="#fnref:16" rev="footnote"> ↩</a></li><li id="fn:17"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">17.</span><span style="display: inline-block; vertical-align: top;">既而：不久。鄙：边境城邑。贰于己：指一方面听命于庄公，一方面听命于自己。</span><a href="#fnref:17" rev="footnote"> ↩</a></li><li id="fn:18"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">18.</span><span style="display: inline-block; vertical-align: top;">公子吕：字子封，郑国大夫。</span><a href="#fnref:18" rev="footnote"> ↩</a></li><li id="fn:19"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">19.</span><span style="display: inline-block; vertical-align: top;">生民心：使臣民产生别的想法，即生二心。</span><a href="#fnref:19" rev="footnote"> ↩</a></li><li id="fn:20"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">20.</span><span style="display: inline-block; vertical-align: top;">贰：指前文既听命于庄公又听命于自己的西部和北部边邑。</span><a href="#fnref:20" rev="footnote"> ↩</a></li><li id="fn:21"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">21.</span><span style="display: inline-block; vertical-align: top;">廪（lǐn）延：郑国的一个地方，在今河南延津北。</span><a href="#fnref:21" rev="footnote"> ↩</a></li><li id="fn:22"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">22.</span><span style="display: inline-block; vertical-align: top;">子封：郑大夫，即前文的公子吕。</span><a href="#fnref:22" rev="footnote"> ↩</a></li><li id="fn:23"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">23.</span><span style="display: inline-block; vertical-align: top;">昵：亲近。这里是“拥护”、“拥戴”的意思。</span><a href="#fnref:23" rev="footnote"> ↩</a></li><li id="fn:24"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">24.</span><span style="display: inline-block; vertical-align: top;">崩：原指山陵崩塌，这里指垮台、倒台。</span><a href="#fnref:24" rev="footnote"> ↩</a></li><li id="fn:25"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">25.</span><span style="display: inline-block; vertical-align: top;">完：修葺。这里指巩固城郭。聚：聚积。这里指聚积粮草。</span><a href="#fnref:25" rev="footnote"> ↩</a></li><li id="fn:26"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">26.</span><span style="display: inline-block; vertical-align: top;">缮甲兵：修治兵器。</span><a href="#fnref:26" rev="footnote"> ↩</a></li><li id="fn:27"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">27.</span><span style="display: inline-block; vertical-align: top;">具卒乘（shènɡ）：补充兵员。具，准备。卒，兵士。乘，战车。这里代指乘车的士卒。</span><a href="#fnref:27" rev="footnote"> ↩</a></li><li id="fn:28"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">28.</span><span style="display: inline-block; vertical-align: top;">启之：开启城门。</span><a href="#fnref:28" rev="footnote"> ↩</a></li><li id="fn:29"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">29.</span><span style="display: inline-block; vertical-align: top;">乘：战车。按春秋时代的编制，一乘战车有甲士三人，步卒七十二人，二百乘共有甲士六百人，步兵一万四千四百人。</span><a href="#fnref:29" rev="footnote"> ↩</a></li><li id="fn:30"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">30.</span><span style="display: inline-block; vertical-align: top;">鄢（yān）：地名。在今河南鄢陵西北。</span><a href="#fnref:30" rev="footnote"> ↩</a></li><li id="fn:31"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">31.</span><span style="display: inline-block; vertical-align: top;">出奔共：逃亡到共。出奔，逃亡。</span><a href="#fnref:31" rev="footnote"> ↩</a></li><li id="fn:32"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">32.</span><span style="display: inline-block; vertical-align: top;">书：指《春秋》的记载。</span><a href="#fnref:32" rev="footnote"> ↩</a></li><li id="fn:33"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">33.</span><span style="display: inline-block; vertical-align: top;">弟：通“悌”，敬顺兄长。“郑伯克段于鄢”是《春秋》的原话，以下逐字解释“郑伯克段于鄢”这句话。</span><a href="#fnref:33" rev="footnote"> ↩</a></li><li id="fn:34"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">34.</span><span style="display: inline-block; vertical-align: top;">难之：以之为难，这是形容词的意动用法。“之”指“大叔出奔共”这件事。</span><a href="#fnref:34" rev="footnote"> ↩</a></li><li id="fn:35"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">35.</span><span style="display: inline-block; vertical-align: top;">城颍（yǐnɡ）：地名。在今河南临颍西北。</span><a href="#fnref:35" rev="footnote"> ↩</a></li><li id="fn:36"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">36.</span><span style="display: inline-block; vertical-align: top;">“不及”二句：意思是说，不死不见面。黄泉，地下的泉水，多指死后埋葬的地方。</span><a href="#fnref:36" rev="footnote"> ↩</a></li><li id="fn:37"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">37.</span><span style="display: inline-block; vertical-align: top;">考叔：郑大夫。颍谷：地名。在今河南登封西，是郑的边疆城邑。封人：镇守边疆的地方官。</span><a href="#fnref:37" rev="footnote"> ↩</a></li><li id="fn:38"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">38.</span><span style="display: inline-block; vertical-align: top;">羹：古代指带汁的肉食。</span><a href="#fnref:38" rev="footnote"> ↩</a></li><li id="fn:39"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">39.</span><span style="display: inline-block; vertical-align: top;">遗（wèi）：赠给。</span><a href="#fnref:39" rev="footnote"> ↩</a></li><li id="fn:40"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">40.</span><span style="display: inline-block; vertical-align: top;">繄（yī）：句首语气词。</span><a href="#fnref:40" rev="footnote"> ↩</a></li><li id="fn:41"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">41.</span><span style="display: inline-block; vertical-align: top;">阙（jué）地及泉：掘地掘到泉水。阙，通“掘”，挖。</span><a href="#fnref:41" rev="footnote"> ↩</a></li><li id="fn:42"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">42.</span><span style="display: inline-block; vertical-align: top;">融融：形容快乐、和睦的样子。</span><a href="#fnref:42" rev="footnote"> ↩</a></li><li id="fn:43"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">43.</span><span style="display: inline-block; vertical-align: top;">泄泄（yì）：形容快乐自得的样子。</span><a href="#fnref:43" rev="footnote"> ↩</a></li><li id="fn:44"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">44.</span><span style="display: inline-block; vertical-align: top;">君子：品德高尚的人。《左传》常以“君子曰”发表评议。</span><a href="#fnref:44" rev="footnote"> ↩</a></li><li id="fn:45"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">45.</span><span style="display: inline-block; vertical-align: top;">施（yì）及庄公：扩展到庄公。施，延伸，扩展。</span><a href="#fnref:45" rev="footnote"> ↩</a></li><li id="fn:46"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">46.</span><span style="display: inline-block; vertical-align: top;">孝子不匮（kuì），永锡尔类：出自《诗经·大雅·既醉》。匮，穷尽。锡，赐予，惠及。</span><a href="#fnref:46" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      
      
      <categories>
          
          <category> 每天一篇古文观止计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 古文观止 </tag>
            
            <tag> 文言文 </tag>
            
            <tag> 阅读笔记 </tag>
            
            <tag> 心得体会 </tag>
            
            <tag> 每日计划系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>明亮的对话</title>
      <link href="/post/7cb865fb.html"/>
      <url>/post/7cb865fb.html</url>
      
        <content type="html"><![CDATA[<h1>读后感</h1><p>这本书出版年份较早，大概2013年左右吧。主打内容为<code>公众说理</code>，这个概念很早就在简中互联网上开始提，但是一直没有太多的论述。这本书算是初步介绍了这个领域的内容吧，不过这本书的内容和其宣传、介绍词并不相符，我比较赞同豆瓣上这一<a href="https://book.douban.com/review/9082760/">书评</a>，这本书并没有系统性地介绍公众说理的内容，大概只在前七章介绍了公众说理的内容，主要讲了<code>逻辑</code>、<code>信誉</code>、<code>情绪</code>三个内容，并且介绍了公众说理的目的和图尔敏模式。</p><h2 id="不足">不足</h2><p>这本书的不足其实非常突出，首先是这本书的作者的政治倾向过于明显，对于国内的负面现象和美国的正面现象的选取都鲜明地体现了这一点，然后进一步地阐述说理和民主、伦理、言论自由、法治等观念的关系。其次就是不成体系，本书共十八章，前四章居然占了25%的篇幅，而尤其从第八章开始的后几章，几乎不在本书的体系中，更像是一些随笔拼在了书的后面（我个人看的时候也是比较快）。最后，本书对于理论的讲解似乎也不够学术，没有太符合我心中的设想。</p><h2 id="书中提到的“宣传”">书中提到的“宣传”</h2><p>本书我个人认为一个很值得单独提出的优点，就是教会我们如何分辨宣传和说理，然后进一步对种种宣传进行了分析并指出其不合理之处。我们尤其要小心很多标语式的话，小心书中所提到的种种并非说理的内容。这一点可以去看书中的例子。**事实上很令人遗憾的一点是，在过了这么多年之后，媒体之中依然存在这类现象，而且<code>新话</code>现象愈演愈烈，到处充满不合逻辑的标语和口号，而见不到说理。**书中说的《中国不高兴》的作者们只写标语式的内容，实际上现在的大V全是这玩意，例如某克文，某边，某某青木等等。</p><h2 id="总评">总评</h2><p>瑕不掩瑜，可以认为是一本不错的入门级说理作品。其中对于不符合说理的举例可以看看，<s>挺敢写的这哥们</s> 。本书前面一半对于说理的介绍还算是比较详细，如果是此前完全没接触过的话，应该会有收获的。后面作者引用了《有效思维》《教育片论》《乌合之众》《娱乐至死》等书，可以去看看原书。本书后几个章节，可以当作一些公众号或者个人博客写作素材，在需要的时候拿出来用。这书在豆瓣上评分不低，我个人认为可能和作者本身的倾向是<em>反洗脑</em>有关，从整体内容上说到不了那个分数。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 名著 </tag>
            
            <tag> 读后感 </tag>
            
            <tag> 社科 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>娱乐至死</title>
      <link href="/post/dca17261.html"/>
      <url>/post/dca17261.html</url>
      
        <content type="html"><![CDATA[<h1>读后感</h1><p>这本书，这两年在很多乱七八糟的自媒体上被引用的一塌糊涂，其实就是主要介绍一句话：“ <strong>我们终将毁于我们所热爱的东西</strong> ”，然后开始阐述抖音、游戏的危害。其实通篇读下来，我个人最深的体会并不是“娱乐至死”这一观点，而是有关<code>媒介</code>对于人的思考方式、社会文化的影响。</p><h2 id="美丽新世界">美丽新世界</h2><p>“我们终将毁于我们所热爱的东西”，这句话是出自本书的前言部分，作者认为这是“赫胥黎的担心”。本书中，作者仔细分析了漂亮国的现状，认为奥威尔在《1984》之中描绘的严厉的监控和审查制度对文化的摧毁并不会出现，相反是赫胥黎在《美丽新世界》之中描绘的物质极大丰富，人们沉浸在享乐之中，却完全丧失了幸福这样一种场景更符合我们当代的现状。因此作者得出一个结论，就是这句话。其实这个现状，让我想到另一个流传很广的而且有一些阴谋论色彩的理论——<code>奶头乐</code>。<a href="https://baike.baidu.com/item/%E5%A5%B6%E5%A4%B4%E4%B9%90%E7%90%86%E8%AE%BA/24573214">奶头乐理论</a>，就大概描述了被认为是“ <strong>低端人口</strong> ”的人们沉浸在消遣娱乐和充满感官刺激的产品之中，最终失去了深度思考的能力。本书的主旨也就是这个意思。书中，作者认为娱乐的产生深刻改变了我们的文化，使“ <strong>一切都成为了娱乐的附庸</strong> ”。也就是说，电视（书中全篇以电视为例）把娱乐本身变成零表现其他一切经历的形式，最终带来了“所有内容以娱乐的方式表现”这一问题。</p><h2 id="媒介">媒介</h2><h3 id="Peek-a-Boo">Peek-a-Boo</h3><p>作者在本书第五章以此为标题。<code> Peek-a-Boo</code>，是一种大人一隐一现来逗小孩玩的游戏。这个比喻非常贴切， 因为这就是一种现状，即以电视等为代表的娱乐形式之中，各种作者认为“语无伦次”的信息这样一隐一现地出现，使人们沉浸在短暂的娱乐之中，但是最后我们并没有从这个过程中得到任何收获。比如作者举例新闻中出现的很多事件，只有短短的15秒，我们本应该对新闻中的人产生共情或者共鸣，却在这条新闻过后没有任何反应。<strong>当然，我认为这个 Peek-a-Boo 现象更像现在的抖音等内容，我们快速划过一个又一个短视频，却没有任何收获。</strong></p><h3 id="媒介即认识论">媒介即认识论</h3><blockquote><p>那些缺乏哲学训练的人可以比作是关在洞穴里的囚徒，他们只能朝一个方向看，因为他们是被锁着的；他们的背后燃烧着一堆火，他们的面前是一座墙。在他们与墙之间什么东西都没有；他们所看见的只有他们自己和他们背后的东西的影子，这些都是有火光投射到墙上来的。他们不可避免地把这些影子看成是实在的，而对于造成这些影子的东西却毫无概念。柏拉图的这个洞穴比喻，是对媒介的隐性功能做的一个绝妙的象征性阐释。这里的洞穴可以视为媒介化社会，囚犯就是受众，他们背后燃烧着的火相当于大众媒介。媒介把受众看不到的“背后的东西”投射到洞壁上，形成影像，而受众便借助这些影像去感知实际的存在。也就是说，在媒介化社会中，人们看到的不是实在之物而是它的影像，而这些影像都是由媒介呈现在他们眼前的。用柏拉图的话来说，“他们只是看见了自己的影子或别人的影子，那些都是火投射到对面的墙上的。”长此以往，最终人们便不可避免地把这些影子看成是实在的，而对于造成这些影子的东西却毫无概念。换言之，在大众媒介十分昌盛的时代，人们早已习惯于把媒介折射的现实当成现实本身，而对实际存在中的现实却浑然不知，漠然处之。</p></blockquote><p>这个小标题是本书第二章的标题。作者认为，“ <strong>任何媒介都有共鸣</strong> ”，媒介会影响知识传播的内容，并进一步影响人们的思维方式。这个观点非常古老，早在2300年前的柏拉图在理想国之中就提出过大名鼎鼎的<code>洞穴之喻</code>来阐述媒介的重要性。本书的在这一部分的观点与其类似，认为“对于真理的认识同表达方式密切相关”。</p><h3 id="媒介的影响">媒介的影响</h3><p>在认识到媒介的重要性后，也许我们应该对自己做出一些改变。</p><blockquote><p>阅读的目的肯定是严肃、专注而明确的。</p></blockquote><p>我们应该多阅读书籍，而不是观看视频、听博客等内容。这是因为图书“鼓励严肃、有序和具有逻辑性的工资华语”，也是因为“读者往往是孤独地面对文本的”，因此，“在阅读的时候，读者的反应是孤立的”，这对读者来说是一种挑战也是一种锻炼。因此，“ <strong>阅读过程能促进理性思维</strong> 。”</p><blockquote><p>深入一种文化的最有效途径是了解这种文化中用于会话的工具。</p></blockquote><p>我们应该积极学习外语，因为一种语言往往对应着一种世界观。这一点无需赘述，相关论述实在是太多了。</p><h2 id="一些其他">一些其他</h2><p>本书中第三章对于美国历史上一些数据的介绍令人震惊，在几百年前的美国（1654-1699），当时的美国还是殖民地，那时候的文化普及度就已经非常高了，甚至在某些地区能够达到惊人的 <strong>89%-95%</strong> 。</p><blockquote><p>在1640-1700年间，马萨诸塞和康涅狄格两个地方的文化普及率达到了89%-95%。这也许是当时世界上具有读写能力的男人最集中的地方了。</p></blockquote><p>作者认为，这与当地居民都信教，产生了庞大的阅读需求（对《圣经》的阅读需求）有关，并且这种现象带来了社会上蔚然成风的阅读风气，并且有着巨大的力度推行扫盲教育。</p><blockquote><p>1650年之后，几乎所有的新英格兰城镇都通过了法令，要求建立“读写学校”，一些大的社区还要求建立语法学校。… 公立学校是知识的源泉，学习是人们神圣的权利。</p></blockquote><blockquote><p>“阅读蔚然成风。四处都是阅读的中心，因为压根儿没有中心。每个人都能直接了解印刷品的内容，每个人都能说同一种语言。阅读时这个忙碌、流动、公开的社会的必然产物。”</p></blockquote><p>书中描述，在18世纪末，当地的报纸、图书的出版量都异常惊人，而且没有形成“文化贵族”这一现象。最后，这样的文化繁荣进一步带来的文化的传播、教育的进步以及美国文化之中对言论自由的争取。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 名著 </tag>
            
            <tag> 读后感 </tag>
            
            <tag> 社科 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BlockChainKnowledge</title>
      <link href="/post/e535f34f.html"/>
      <url>/post/e535f34f.html</url>
      
        <content type="html"><![CDATA[<h1>内容</h1><p>复习的书是《区块链：技术驱动金融》。还得配合着PPT，有点麻烦。</p><h1>第1章 密码学及加密货币概述</h1><p>码学中的哈希算法（Hash）和数字签名（digital signature）技术</p><h2 id="1-1-密码学哈希函数">1.1 密码学哈希函数</h2><p>哈希函数是一个数学函数，具有以下三个特性：</p><ul class="lvl-0"><li class="lvl-2">其输入可为任意大小的字符串。</li><li class="lvl-2">它产生固定大小的输出。</li><li class="lvl-2">它能进行有效计算，简单来说就是对于特定的输入字符串，在合理时间内，我们可以算出哈希函数的输出。更准确地说，对应n位的字符串，其哈希值计算的复杂度为 $ O(n) $ 。</li></ul><p>使哈希函数达到密码安全，我们要求其具有以下三个附加特性：</p><ol><li class="lvl-3"><p>碰撞阻力（collision-resistance）；</p></li><li class="lvl-3"><p>隐秘性（hiding）；</p></li><li class="lvl-3"><p>谜题友好（puzzle-friendliness）<em>其中，谜题友好并非加密的hash函数的一般要求，但是对数字货币却是</em></p></li></ol><h3 id="碰撞阻力">碰撞阻力</h3><p>加密的哈希函数的第一个特性是它要具有碰撞阻力。这里的碰撞指对于两个不同的输入，产生相同的输出。如果对于哈希函数H(·)，没有人能够找到碰撞，我们则称该函数具有碰撞阻力</p><blockquote><p><strong>如果无法找到两个值，x和y，x≠y，而H(x)=H(y)，则称哈希函数H具有碰撞阻力。</strong></p></blockquote><p>根据鸽巢原理（Pigeonhole Principle），我们可以得出，必然会有大量可能的输入被映射到任意特定输出.。生日悖论（birthday paradox）对于某些哈希函数，存在有效的测试碰撞的方法。 但对于某些哈希函数，我们无法确认识别碰撞的有效方法是否存在，我们只是怀疑这 些函数具有防碰撞特性，但是我们已经证明，世界上没有哈希函数具有防碰撞特性。</p><h4 id="用处">用处</h4><p>哈希输出作为信息摘要 （message digest）</p><h3 id="隐秘性">隐秘性</h3><p>哈希函数H具有隐秘性，如果：当其输入r选自一个高阶最小熵（high min-entroy）的概率分布，在给定H（r‖x）条件下来确定x是不可行的。</p><h4 id="应用：承诺">应用：承诺</h4><p>承诺协议 一个承诺协议方案由两个算法构成： ● com:=commit(msg, nonce)，承诺函数将信息（msg）和一个临时随机数 （nonce）作为输入，输出就是一个“承诺”。 ● verify(com, msg, nonce)，验证函数将某个承诺输出（com）、临时随机数 （nonce）及信息（msg）作为输入，如果com：=commit(msg, nonce)，则返 回“真”（true）；反之则返回“假”（false）。 我们要求以下两个安全特性要成立： ● 隐秘性：已知com，没有可行的方法找到msg。 ● 约束性：没有可行的办法找到两组(msg, nonce)和(msg’, nonce’)， msg≠msg’，而commit(msg, nonce)：=commit(msg’, nonce’)。</p><blockquote><p>对于每次的承诺值，你都需要选择新的随机值，这一点很重要。在密码学中，术 语nonce是指，该取值只能使用一次。</p></blockquote><p>commit(msg, nonce):=H(nonceǁmsg)</p><ul class="lvl-0"><li class="lvl-2"><p>隐秘性：已知H(nonce‖msg)，没有可行方法找到 msg。</p></li><li class="lvl-2"><p>约束性：没有可行方法找到两对(msg, nonce)和(msg’, nonce’)， msg≠msg’，而H(nonce‖msg):=H(nonce’‖msg’)。</p></li></ul><h3 id="谜题友好">谜题友好</h3><p>解释：<strong>如果有一个人想找到y值所对应的输入，假定在输 入集合中，有一部分是非常随机的，那么他将非常难以求得y值对应的输入。</strong></p><blockquote><p>如果对于任意n位输出值y，假定k选自高阶最小熵分布，如果无法找到 一个可行的方法，在比 $ 2^n $ 小很多时间内找到x，保证H(k‖x)=y成立，那么我们称哈 希函数H为谜题友好。</p></blockquote><h4 id="应用">应用</h4><p>如果一个哈希函数具备谜题友好特性，这就意味着对于这个谜题没有一个解决策略， 比只是随机地尝试x取值会更好。因此，如果我们要把谜题做成很难解决是可以的，只要 我们能用适合的随机方式生成谜题ID。当我们讨论比特币采矿（是一种搜索谜题）时会 采用这一思路。</p><h3 id="安全哈希算法-（Secure-Hash-Algorithm-256，简称SHA-256）">安全哈希算法 （Secure Hash Algorithm 256，简称SHA-256）</h3><p>将接受固定长度的哈希函数 转化为可接受任意长度输入的哈希函数，我们称这个转换过程为MD （Merkle-Damgard）变换</p><p>可用于固定长度，具备碰撞阻力的哈希函数被称为是压缩函数 （compression function）</p><h2 id="哈希指针及数据结构">哈希指针及数据结构</h2><p>哈希指针是一个指向数据存储位 置及其位置数据的哈希值的指针。一个普通的指针可以告诉你数据存储的位置，哈希指针 不但可以告诉你数据存储的位置，并且还可以给你一种方式，让你验证数据没有被篡改过。</p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230207172440.png" alt=""></p><p>我们通过哈希指针构建一个链表，我们将这个数据结构称为区块链 （block chain）。在普通链表中有一系列区块，每个a区块既有数据也有一个指向上一个 区块的指针。而在区块链中，上一个区块指针被置换为哈希指针。因此，每个区块不仅能 告诉我们上一个区块的值在哪里，还包含了该值的摘要，使我们能够验证那个值没有改 变。我们存储链表头部（the head of list），即一个普通的哈希指针指向最近使用的数据区块</p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230207172528.png" alt=""></p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230207174924.png" alt=""></p><p>如果对手想要篡改区块链中任意地方的数据，为了保证整个内容一 致，他需要篡改所有的哈希指针直至最开始的地方。他最终将碰到障碍，因为他不能篡改 链表头部的指针。这样，我们便知道，仅通过记住一个哈希指针，我们就基本记住了整个 链表的防篡改哈希值。因此，我们可以搭建一个包含很多区块的区块链网络，链表头部的 哈希指针被称作创世区块 （genesis block）</p><h3 id="Merkle-Tree-梅克尔树，默克尔树">Merkle Tree 梅克尔树，默克尔树</h3><p>使用哈希指针的二叉树 也叫作梅克尔树 (Merkle trees)，以其发明者拉尔夫·梅克尔（Ralph Merkle）的名字命名。<br><strong>挺显然的，不写了</strong></p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230207175232.png" alt=""></p><p>在梅克尔树的数据结构中，所有的数据区块都被两两分组，指向这些数据区块的指针被存储在上一 层的父节点（parent node）中，而这些父节点再次被两两分组，并且指向父节点的指针被存储在上一层 的父节点中，一直持续这个过程，直到最后我们到达树的根节点。</p><h4 id="隶属证明">隶属证明</h4><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230207180052.png" alt=""></p><p><strong>（这个问题应该是还需要堂兄弟节点进行证明）</strong><br>比如这个树的其他节点被换了</p><h4 id="非隶属证明">非隶属证明</h4><p>通过展示被验证区块之前的区块路径，以及被验证区块之后的区块路径，就可以达到目 的。如果之前、之后两个区块在树上是连续的，那么这说明了被验证区块与该梅克尔树之 间是非隶属关系。因为被验证区块确实隶属于梅克尔树，它需要在两个条目之间，而如果 两个条目是连续的话，二者之间则并没有空间。</p><h2 id="1-3-数字签名">1.3 数字签名</h2><p>数字签名 （digital signatures）</p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230207200413.png" alt=""></p><p>第一，只有你可以制作你自己的签名，但任何看到它的人都可以验证其有效 性；第二，我们希望签名只与某一特定文件发生联系，因此该签名不能用于表明你同意或 支持另一份不同的文件。对于手写签名来说，第二条就如同确保别人不能将你的签名从一 份文件上剪下来，贴到另一份文件的末尾那样。</p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230207181956.png" alt=""></p><p>第一个特性很直 接，那就是有效的签名必须通过验证。如果我用我的密钥sk签署了一条消息，之后有人试 图通过使用我的公钥pk验证关于同一条消息的签名，该签名必须证实为正确。这个特性是 对签名有效的最基本要求。 不可伪造性。 第二个要求计算上不可能伪造签名。也就是说，知道你公钥并看到你 在某些信息上签名的对手，不能伪造他还未见过的你在其他信息上的签名。这一不可伪造 特性类似于我们与对手之间在进行一场游戏，游戏的使用在密码安全证明中很常见。</p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230207200609.png" alt=""></p><p>不可伪造性游戏是对手（黑客）和挑战者一起玩这样一个游戏：如果黑客可以在一个之前没有见过 的消息上进行签名，那么黑客就赢得这个游戏；反之，如果黑客做不到，挑战者就赢得游戏，从而可以 证明这个数字签名方案是不可伪造的。</p><h4 id="实践中的考量">实践中的考量</h4><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230207203315.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p>很多签名算法是随机的（特别是比特币使用的算法），因此我们需要随机性的良好 来源。</p></li><li class="lvl-2"><p>对信息的哈希值进行签署，而非对信息本身进行签署。</p></li><li class="lvl-2"><p>我们后面会用到的另一个技巧是，可以对于哈希指针进行签署。如果你签署了哈希指 针，那么该签名覆盖（或者说保护）整个结构——这不仅仅是哈希指针本身，还包括哈希 指针指向的整个区块链。</p></li></ul><h3 id="传统签名与数字签名">传统签名与数字签名</h3><p>传统签名：保证信息真实性，验证签名者身份数字签名：又称<code>公钥</code>数字签名。 是只有信息发送者才能产生的别人无法伪造的<code>一段数字串</code>，数字串也是对信息真实性的有效证明</p><h3 id="加密过程">加密过程</h3><p><code>私钥加密，公钥验证</code>。这时整个加密的信息就是一个<code>数字签名(Digital Signature)</code></p><h3 id="ECDSA算法">ECDSA算法</h3><p>是个椭圆曲线算法</p><ul class="lvl-0"><li class="lvl-2"><p>个人密钥：256位</p></li><li class="lvl-2"><p>公钥（未压缩）：512位</p></li><li class="lvl-2"><p>公钥（压缩）：257位</p></li><li class="lvl-2"><p>待签名信息：256位</p></li><li class="lvl-2"><p>签名：512位</p></li></ul><h2 id="1-4-公钥即身份">1.4 公钥即身份</h2><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230207214320.png" alt=""></p><p>将公钥视为身份的一个结果是，你可以随时制定新的身份——你可以简单通过数字签 名方案中的generateKeys程序，生成新的密钥对sk和pk。pk是你可以使用的新的公共身 份，sk是相应的密钥，只有你自己知道并可以让你代表身份为pk发声。在实践中，你可能 会使用pk的哈希作为你的身份，这是因为公钥很大。如果是这样的话，为了验证消息来自 你的身份，人们会需要验证：（1）你的身份确实是pk的哈希；（2）信息能经过公钥pk验 证。</p><h3 id="去中心化身份管理">去中心化身份管理</h3><p>你可以自己作为用户 注册，而无须到一个中央机构注册为系统用户。你不需要别人给你一个用户名，你也不需 要告诉任何人你会使用什么名字。<strong>事实上，这就是比特币对待身份的方式。这些身份在 比特币语言中被称为地址。你可以常常听到地址这个词，用于比特币或加密货币相关的内 容中，而地址其实就是公钥的哈希值。作为去中心化身份管理方案的一部分，它就是某人 凭空捏造的一个身份而已。</strong></p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230207215521.png" alt=""></p><p><strong>在比特币系统中，你不需要明确地注册或揭露你的真实身份，但是你的行 为模式本身可能是可识别的。</strong> 人们看到这些声明便知道拥有 这个身份的人做出了特定的一系列行为。他们能够开始将细节联系起来，从这一系列的行 为推断出你的真实身份。随着时间的推移，一个观察者可以将这些事情联系起来，并推断 出这样的结论：“天，这个人的行为好像乔（Joe），可能这个人就是乔。”</p><h2 id="1-5-两种简单的加密货币">1.5 两种简单的加密货币</h2><h3 id="高飞币">高飞币</h3><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230207215726.png" alt=""></p><p>高飞币只有两个规则：</p><ul class="lvl-0"><li class="lvl-2"><p>第一个规则是指定高飞可以随时创建新币，且这些 新创建的币都属于他。</p></li><li class="lvl-2"><p>第二个规则是，拥有此币的人可以将其转给其他人。</p></li></ul><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230207220257.png" alt=""></p><h4 id="高飞币的规则">高飞币的规则</h4><ol><li class="lvl-3"><p>高飞（ Goofy ）可以签署声明表示他使用唯一的货币编号来创建一个新币</p></li><li class="lvl-3"><p>货币的所有人可以通过签署声明表示货币的转让，即&quot;将这个货币转移给 X ( X 为公钥）&quot;</p></li><li class="lvl-3"><p>任何人可以<strong>追根溯源</strong>，验证一枚货币的有效性</p></li></ol><h4 id="高飞币的优缺点">高飞币的优缺点</h4><h6 id="缺点：">缺点：</h6><p>1.货币发行权控制在 Goofy 手中<br>2.<code>双重支付（ Double Spending )</code></p><h6 id="优点：">优点：</h6><p>货币的<strong>转让</strong>技术</p><h3 id="财奴币（ScroogeCoin）">财奴币（ScroogeCoin）</h3><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230207220744.png" alt=""></p><p>财奴币是以高飞币为基础创建的，但在数据结构方面更复杂。第一个主要概念如下：一个叫财奴的指定实体将负责公布包含所有发生过的交易历史 记录的<code>仅增账目（append-only ledger）</code></p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230207222442.png" alt=""></p><p>每个数 据块都包含一次交易（在实践中，一种优化的做法是将多次交易放入同一个区块中，比特 币就是这样做的），每个区块包含交易的ID、交易的内容，以及上一个区块的哈希指 针。财奴数字签名是针对最后一个哈希指针（它约束整个结构中所有的数据），并将签名与区块链一起发布。在财奴币中，只有在由财奴签名的区块链的交易才算数。</p><p>为什么除了让财奴签署每个区块，我们还需要一个带哈希指针的区块链？这样做是保 证仅增特性。因为财奴有可能试图增加或移除交易记录，或者改变已有交易，而一旦有了 哈希指针，将会影响到后面所有的区块。</p><h4 id="两种操作">两种操作</h4><p>第一，造币</p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230207222742.png" alt=""></p><p>第二种交易是付币（PayCoins）。这一交易会消耗币，就是说消除它们，并创建具有 相同总值的新币。</p><h4 id="规则">规则</h4><p>财奴币（ ScroogeCoin )交易有效当且仅当</p><ul class="lvl-0"><li class="lvl-2"><p>被消耗的货币为有效货币，之前的交易中已经创建</p></li><li class="lvl-2"><p>本次交易不是双重支付</p></li><li class="lvl-2"><p>本次交易产生的币值等于消耗币值</p></li><li class="lvl-2"><p>本次交易消耗的所有货币均有其所有者的有效签名</p></li></ul><h4 id="财奴币（-ScroogeCoin-）优缺点">财奴币（ ScroogeCoin ）优缺点</h4><h5 id="优点">优点</h5><p>引入了 Ledger 来防止双重支付</p><h5 id="缺点：-中心化">缺点：(中心化)</h5><p>心双可以拒绝公开交易，不提供服务财奴可以随时造币</p><h1>第2章 比特币如何做到去中心化</h1><p><s>终于破解了suming的pdf权限问题，可以复制了，省事很多</s></p><h2 id="目录">目录</h2><ul class="lvl-0"><li class="lvl-3"><p>2.1 中心化与去中心化</p></li><li class="lvl-3"><p>2.2 分布式共识</p></li><li class="lvl-3"><p>2.3 使用区块链达成没有身份的共识</p></li><li class="lvl-3"><p>2.4 奖励机制与工作量证明</p></li><li class="lvl-3"><p>2.5 总结</p></li></ul><p><strong>区块链：技术手段</strong>+<code>激励机制</code></p><h2 id="2-1-中心化与去中心化">2.1 中心化与去中心化</h2><p>中心化与去中心化也并非水火不容，其实没有一个系统是完全中心化，或者是完全去 中心化的。</p><p><strong>混合模式</strong></p><h3 id="去中心化解决的问题-必考">去中心化解决的问题(必考)</h3><ol><li class="lvl-3"><p>谁在维护交易账本？</p></li><li class="lvl-3"><p>谁有权利批准哪个交易是正当有效的？</p></li><li class="lvl-3"><p>谁在制造新的比特币？</p></li><li class="lvl-3"><p>谁在制定系统变化规则？</p></li><li class="lvl-3"><p>比特币是如何取得交易价值的？</p></li></ol><p><strong>前三个问题反映了比特币协议的技术细节，我们将在本章重点讨论</strong></p><h2 id="2-2-分布式共识（distributed-consensus）">2.2 分布式共识（distributed consensus）</h2><p>分布式键值 （key-value）存储库</p><h3 id="分布式共识协议">分布式共识协议</h3><p>在一个有n个节点的系统中，每一个节点都有一个输入值，其中 一些节点具有故障，甚至是恶意的。<br><strong>一个分布式共识协议有以下两个属性：</strong></p><ul class="lvl-0"><li class="lvl-3"><p><strong>输入值的中止须经所有诚实节点来确定。</strong></p></li><li class="lvl-2"><p><strong>这个输入值必须由诚实节点来生成。</strong><br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230208160137.png" alt=""><br>那么，所有的节点是如何对一个区块达成共识的呢？一个方法是，在一个时间段里， 比如说每隔十分钟，每个节点都提议，自己的未被认可的交易成为已经达成共识的区块链 后面的下一个区块，然后那些节点会执行一些共识协议，每个节点把自己提议的区块作为 输入。</p></li></ul><p><code>Propose-》Consensus  </code>正当的交易可以等待下一次被打进区块的机会`</p><h3 id="技术上面临的挑战">技术上面临的挑战</h3><ol><li class="lvl-3"><p>达成共识是一个难题：节点会宕机或者存在恶意节点</p></li><li class="lvl-3"><p>点对点网络通信不完美</p></li><li class="lvl-3"><p>信息传递的延迟</p></li></ol><h3 id="不可能性结论">不可能性结论</h3><p><strong>拜占庭将军问题Byzantine Generals Problem</strong></p><p>拜占庭是东罗马帝国的首都，它的军队分成多 个师，每个师都由一个将军统领。这些将军通过信使进行交流，来达成一个共同作战方 案，有些将军可能是叛徒，想故意破坏这个过程，这会造成那些忠诚的将军也无法达成一 个统一的作战计划。解决这个难题的办法就是让那些忠诚的将军在这样的情况下达成统一 作战方案，而避免那些叛徒对作战方案的误导。事实证明，如果叛徒数量超过1/3时，这 个难题将无法克服，那些忠臣的计划终会被叛徒们破坏。</p><p><code>将军的总数为n，n里面背叛者的数量为t， 则只要n &gt; 3t就可以容错。</code></p><h3 id="打破传统上的假设">打破传统上的假设</h3><p>比特币实际运行情况远比理论的研究结果好的多</p><h4 id="比特币到底打破了经典模型里的哪些假设呢？">比特币到底打破了经典模型里的哪些假设呢？</h4><p><strong>第一，比特币引进了奖励的理念第二，包含随机性；经过一段时间观点出现分歧的概率按指数下降</strong></p><p>比特币到底打破了经典模型里的哪些假设呢？第一，比特币引进了奖励的理念，这对 分布式共识协议来说是一个全新的理念，这也只有在比特币里才可能实现，因为比特币也 是个货币，所以人们自然而然地会为了金钱奖励而变得诚实起来。所以，比特币并没有真 正解决分布式共识问题，它只是在特定货币系统下解决了这个问题而已。 第二，比特币体系包含随机性这个概念。在后面两节里我们将会看到，比特币的共识 算法很大程度上依赖于随机性。此外，它也不再纠结于规定共识的起点与终点。相反，共 识是通过一段较长的时间而达成的，在实际系统中，达成共识大约需要一个小时左右。但 即使在一个小时以后，节点们也无法确定哪一个交易块应该进入总账本。但随着时间的流 逝，我们对某一个块的认识与最终总体共识相吻合的概率将越来越大，观点出现分歧的概 率按指数级下降。比特币在以上方面的不同，让它能够逾越传统理论关于分布式共识不可 达成这一鸿沟。</p><h2 id="2-3-使用区块链达成没有身份的共识">2.3 使用区块链达成没有身份的共识</h2><p>乱造节点就是所谓的 <strong>“女巫攻击”（sybil attack）</strong> 现象。女巫就是恶意黑客制造的不同节点，这些节点看起来像是对应 不同的身份的人，其实是由一个人在幕后控制。另一个原因是<strong>化名制（pseudonymity）</strong>， 也是比特币想达到的一个目标，所以即使可以替所有节点建立唯一真实身份，我们也不想 那样做。虽然比特币还是不能保证真正的匿名，一个用户用不同身份做的不同交易还是有 办法被最终追踪到，但比特币的特性毕竟没有强迫大家用真实身份来加入。这是比特币的 重要特性，也是比特币系统的核心理念。</p><h3 id="隐性共识（inplicit-consensus）">隐性共识（inplicit consensus）</h3><p>每一个回合：</p><ul class="lvl-0"><li class="lvl-2"><p>一个<code>随机</code>节点被选中，然 后这个节点可以提议这个链的下一个区块</p></li><li class="lvl-2"><p>其他节点可以通过<code>接龙</code>的方式，隐性的 接受或者拒绝</p></li></ul><p>这个算法的简化假设是，可以随意选择一个节点，这些节点都不会受到女巫攻击 的影响。</p><ol><li class="lvl-3"><p>新的交易被广播到所有节点上。</p></li><li class="lvl-3"><p>每个节点都将新的交易放进一个区块。</p></li><li class="lvl-3"><p>在每个回合，一个随机的节点可以广播它的区块。</p></li><li class="lvl-3"><p>其他节点可以选择接受这个区块，前提是如果区块里的交易都是正当的（有真的签名）。</p></li><li class="lvl-3"><p>节点们可以<strong>把以上区块的哈希值放进自己的区块</strong>里，以此来表示它们对那个新 区块的认可。</p></li></ol><h3 id="比特币的攻击">比特币的攻击</h3><ol><li class="lvl-3"><p>窃取比特币—&gt;伪造数字签名</p></li><li class="lvl-3"><p>拒绝服务攻击:如果Alice拒绝提供服务 给Bob； Bob等到下一个诚实节点发起区块的时候，交易记录会被放进这个区块里</p></li><li class="lvl-3"><p>双重支付攻击:Alice给Bob or Alice转到另外一个地址 一个交易就是一个数据结构：里面有Alice的数 字签名，一个付给Bob的公钥（地址），一个 哈希值（指向先前的一笔交易的输出）</p></li></ol><h4 id="双重支付">双重支付</h4><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230208170033.png" alt=""><br><code>取决于最后哪一个区块被纳入长期的共识链</code></p><p><code>从道德角度看，分支截然不同； 但从技术角度看，两笔交易都符合规范，形式上有效</code></p><p>另一个就被叫做孤块 （orphan block）</p><h4 id="零验证交易-zero-confirmation-transaction">零验证交易 (zero confirmation transaction)</h4><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230208170327.png" alt=""></p><h3 id="诚实大多数原理">诚实大多数原理</h3><ul class="lvl-0"><li class="lvl-2"><p>算力主要消耗在挖矿、区块链的生成、交易确认中</p></li><li class="lvl-2"><p>系统稳定性的缺省信任基础：算力掌握在大多数诚实的用户手中，出于自身利益的考虑，这些用户也 愿意维护区块链系统</p></li><li class="lvl-2"><p>比特币51%攻击理论：攻击者要创造一条新链条， 然后长度超越旧链条，覆盖旧链条。如果现在只有 1次确认，被覆盖的概率稍高，而到了6次确认，被覆盖的概率下降为接近&quot;0&quot;。</p></li></ul><p>诚实链和攻击链的之间比赛的特征是一 个<code>二项分布的随机漫步</code>。成功的事件是 诚实的节点被一个数据块扩展，它的领 先增加一个点，失败的事件是攻击者的链扩展一个数据块，差距减少一个点。</p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230208171823.png" alt=""><br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230208171844.png" alt=""></p><h2 id="2-4-奖励机制与工作量证明">2.4 奖励机制与工作量证明</h2><p><code>高明的激励设计</code></p><p>无法判断那笔交易是道义上合法； 很难惩罚，因为节点没有身份</p><p><code>给予表现诚实的节点奖励</code>： 用比特币来奖励创造区块的节点</p><h3 id="区块奖励">区块奖励</h3><p>每产生210 000个区块（大约4年），区块奖励将被减半。最终一共 是21 000 000个比特币。</p><p>$$  50\times6\times24\times365\times4\times(1+0.5+0.25)=2100w  $$</p><p>创建区块的节点可以在区 块中一笔特别的交易：<code>造币交易</code>，指定这笔交易的接收地址</p><h4 id="微妙和强大的设计-Subtle-but-powerful-trick">微妙和强大的设计 (Subtle but powerful trick)</h4><ul class="lvl-0"><li class="lvl-2"><p>奖励只有当区块最终被纳入长期共识链才会<code>兑现</code></p></li><li class="lvl-2"><p>造币交易和其他每一笔交易一样，只有最终被纳入共识链，才会被其他节点<code>接受</code></p></li></ul><p><code>注意，这是新比特币被允许创造出来的唯一途径，没有任何其他新增币的机制。</code></p><p>比特币区块奖励迟早会发完（比如2140 年） 系统还能继续运行下去吗？可以，因为还有<code>交易费奖励</code></p><h3 id="交易费奖励">交易费奖励</h3><p>随着区块奖励逐渐发完，交易费会变得 日益重要：需要通过交易费(小费)来保障 合理的服务质量</p><h3 id="Challenges">Challenges</h3><ol><li class="lvl-3"><p>如何随机选取一个节点？</p></li><li class="lvl-3"><p>都来争抢奖励，系统是否会变得不稳定？</p></li><li class="lvl-3"><p>攻击(Sybil Attack)： 创建大量的女巫节 点来尝试颠覆整个共识过程</p></li></ol><h3 id="挖矿与工作量证明">挖矿与工作量证明</h3><p>工作量证明 (Proof of Work)权益证明 （proof of stake）把随机选取节点改为<code>根据节点占有某种 资源的比例</code>来选取节点</p><p>计算能力—工作量证明系统(PoW)<br>某种币的拥有量—权益证明(PoS, Proof of Stake)</p><p>工作量证明: 算力的竞争比特币：哈希函数谜题：求解nonce</p><p>$$  H(nonceǁprev_{hash}ǁtxǁtxǁ…ǁtx)  $$</p><p>如果一个节点发现一个nonce, 就可以提议创建下一个区块<code>完全去中心化</code>的方式：没有任何人决定谁可以提交下一区块</p><h3 id="哈希谜题三大特性">哈希谜题三大特性</h3><h4 id="难于计算">难于计算</h4><p>2014年底： 产生一个区块：平均要做 1020 运算 挖矿系统需要消耗大量能源</p><h4 id="可参数化成本">可参数化成本</h4><ul class="lvl-0"><li class="lvl-2"><p>成本是通过参数来进行<code>调整</code>的</p></li><li class="lvl-2"><p>大约每两个星期（  $ 24\times6\times14=2016 $ 个区块）， 目标区域的难度会调整一次</p></li><li class="lvl-2"><p>期望10分钟出一个区块有一个公式可以很好地描述这一点：任何一个矿工，比如爱丽丝，找到下一 区块的概率，就相当于她控制的计算力占整个全球计算力的比例。这意味着，如果爱丽丝 的挖矿设备的计算能力占全部计算能力的0.1%，那大概每产生1 000个区块，她就可以找 到一个区块。</p></li></ul><h4 id="易于证实">易于证实</h4><p>基于哈希函数的单向性：挖矿很难，但容易验证</p><h2 id="2-5-总结">2.5 总结</h2><blockquote><p>如果：</p></blockquote><p>挖矿奖励&gt;挖矿成本</p><blockquote></blockquote><p>那么： 矿工赚钱</p><blockquote></blockquote><p>条件是：</p><blockquote></blockquote><p>挖矿奖励=区块奖励+ 交易费</p><blockquote></blockquote><p>挖矿成本=硬件成本+ 运营成本（电费、空调费等）</p><p>系统的安全性不是来自于P2P网络的完美， 而是来自于<code>区块链和共识协议</code>。</p><p>比特币系统深度使用了分布式共识： <code>拥有比特币</code>就是其他节点对给定的一方拥有这些比特币的<code>共识</code></p><h3 id="启动加密货币">启动加密货币</h3><p>“自举过程”（bootstrapping）</p><p>区块链的安全性、挖矿生态系统的健康程度，货币的价值 之间紧密相连</p><p>虚拟货币想要成功：<code>初始化的自举 (bootstrapping)</code>过程很关键</p><h3 id="51-攻击">51%攻击</h3><p>不能偷币，不能压制其他交易，不能改变区块奖励</p><p>51%攻击主要会摧毁大家对数字货币 （比特币）的<code>信心</code>深度影响的是共识： 不能改变数字签名的确认，交易信息 的广播；仅可以局部‘指鹿为马’</p><h1>Chapter 3 比特币的运行机制</h1><h2 id="目录-2">目录</h2><ul class="lvl-0"><li class="lvl-2"><p>3.1 比特币的交易</p></li><li class="lvl-2"><p>3.2 比特币的脚本</p></li><li class="lvl-2"><p>3.3 比特币脚本的应用</p></li><li class="lvl-2"><p>3.4 比特币的区块</p></li><li class="lvl-2"><p>3.5 比特币网络</p></li><li class="lvl-2"><p>3.6 限制与优化</p></li></ul><h2 id="3-1-比特币的交易">3.1 比特币的交易</h2><p>Blockchain----Public Ledger 公开账簿</p><p>First Impression: 记账方式</p><p>基于帐户的系统：与银行卡的帐户类似</p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230208175137.png" alt=""></p><h3 id="问题？">问题？</h3><p>如果要去确认一笔交易是否真实，就必须追溯每一个帐户的余额</p><p>增加一个数据字段，更新每次交易后的账户余额</p><p>但实际不可行：分布式网络，<code>延时确认</code></p><h3 id="解决">解决</h3><p>借鉴了Scroogecoin里面的记账方式<br>a <code>transaction-based ledger</code> close to Bitcoin</p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230208175404.png" alt=""><br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230208175418.png" alt=""></p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230208175434.png" alt=""></p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230208175621.png" alt=""></p><p>公钥、身份、PKI, CA, 证书</p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230208180312.png" alt=""></p><ul class="lvl-0"><li class="lvl-2"><p><strong>地址转换 (Change Addresses)–处理余额</strong></p></li><li class="lvl-2"><p><strong>有效验证 (Efficient Verification)–无需从头核查</strong></p></li><li class="lvl-2"><p><strong>资金合并–支持多输入输出</strong></p></li><li class="lvl-2"><p><strong>共同支付–多人数字签名</strong></p></li></ul><h2 id="3-2-比特币的脚本">3.2 比特币的脚本</h2><p>一个比特币交易分成三部分：元数据、一系列的输入和一系列的 输出。</p><p>最常见的比特币交易：通过某人的签名获 得他在前一笔交易中获得的资金</p><p>交易输出描述为：凭借哈希值为X的<code>公钥</code>， 以及这个公钥所有者的<code>签名</code>，才能获得这 笔资金</p><p>把交易的输入脚本(scriptSig)，和上一笔 交易的输出脚本(scriptPubKey)串联起来。串联脚本必须被成功执行以后，才能获 得资金。</p><h3 id="比特币脚本语言">比特币脚本语言</h3><p>Forth: 简单的堆栈式编程语言(stack based)</p><p>每个指令只被执行一次，线性的，无法 循环执行</p><p>非图灵完备<br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230208182523.png" alt=""></p><p>数据指令 pubKey</p><p>工作码指令 OP_***</p><h3 id="OP-RETURN">OP_RETURN</h3><p>销毁证明（proof of burn）脚本，用于销毁比特币（即防止资金被赎回）。</p><p>使用 OP_RETURN脚本来抛出错误；不论之前指令的运行结果是什么，OP_RETURN指令总会 被执行，并相应抛出一个错误，脚本返回一个“错误”(false)值。</p><p>由于OP_RETURN以抛出错误的形式结束脚本，其后的所有指令都不会执行。利用这 个特性，我们可以往脚本中植入任意信息，这些信息也将被存储在区块链中。假如你想通 过署名或者盖时间戳的方式来证明你在某个时候知道某件事情，就可以发起一笔极小额的 比特币交易，在脚本中加入上述信息，并使用销毁证明脚本将币销毁，这样就可以将信息 永久地存储在区块链上。</p><p>可以随意地为比特币支付设定条件</p><h3 id="Pay-to-Script-Hash-P2SH">Pay-to-Script-Hash P2SH</h3><p>支付给脚本的哈希值</p><p>把比特币支付给某个脚本地址，脚本的 哈希值是×××</p><p>取款的时候，提供上述哈希值对应的脚本，<code>同时</code>提供数据能通过脚本的验证</p><p>支付工作简单化：收款方只需告诉付款方 一个哈希值即可</p><p>P2SH的输出脚本(ScriptPubKey)会变得很小，复杂的事情放在输入脚本(ScriptSig) 里面了</p><h2 id="3-3-比特币脚本的应用">3.3 比特币脚本的应用</h2><h3 id="第三方支付交易-（escrow-transaction）">第三方支付交易 （escrow transaction）</h3><h4 id="MultiSig-（多重签名）">MultiSig （多重签名）</h4><p>三个人中有两个人签名以后，资金才能被 支取</p><p>Alice, Bob; Judy（第三方仲裁）</p><p>发生纠纷的时候</p><h4 id="绿色地址-（green-addresses）">绿色地址 （green addresses）</h4><p>一个交易确认：延迟第三方银行：<br>Alice给Bob（传统）<br>Alice给Bank : （Alice: 支付Bob这些币，能代办吗？） (Bank: 从你的帐户扣钱，然后从(银行)绿色地址转帐给Bob)</p><p>不是Bitcoin技术系统的保障, 而是现实世界 中银行的声誉保证：不会发生<code>双重支付</code></p><h4 id="高效小额支付（efficient-micro-payments）">高效小额支付（efficient micro-payments）</h4><p>设想手机流量使用场景：按照分钟计费， 但每分钟支付一次不现实<br><strong>Solutions： MULTISIG</strong></p><h4 id="锁定时间（lock-time）">锁定时间（lock_time）</h4><p>等待t时间之后才能把<code>退款</code>交易计入区块链如果过了t时间Bob还没有在最后一个交易 上签名确认；Alice可以通过退款交易收回 所有的Bitcoin</p><h3 id="智能合约-Smart-Contract">智能合约 (Smart Contract)</h3><p>可以用技术手段来强制执行的合约；可以用<code>脚本</code>、<code>矿工</code>、和<code>交易验证</code>来实现 第 三方托管协议或者是小额支付；而不是中心化权威机构</p><h2 id="比特币的区块">比特币的区块</h2><p>把大量交易组织起来放入一个区块，得 到的哈希链会更短；可以提高验证区块 链数据结构的效率</p><p>区块链把两个基于哈希值的数据结构结合起来：</p><ol><li class="lvl-3"><p>区块的哈希链</p></li><li class="lvl-3"><p>树状结构 把所有交易组织起来（Merkle Tree）<br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230208224540.png" alt=""></p></li></ol><p>区块头部还包含了挖矿谜题 [1] 相 关的信息。还记得，区块头部的哈希函数必须以一大堆零开头才有效，此外，区块头部还 要包含一个矿工可以修改的“临时随机数”、一个时间戳和一个点数（点数用来表示找到这 个区块的难度）。区块头部是挖矿过程中唯一哈希值化的，所以要验证一个区块的链，只 要检查区块头部即可。在区块头部唯一的交易数据是交易树的树根——“mrkl_root”。</p><h3 id="币基交易-Coinbase-Transaction">币基交易 (Coinbase Transaction)</h3><ol><li class="lvl-3"><p>它永远只有一个单一的输入与单一的输出。</p></li><li class="lvl-3"><p>这个交易并不消费之前交易输出的比特币，因此，没有指针指向“上一交易”。</p></li><li class="lvl-3"><p>这个输出值目前大约是25个币多一点点。这个输出值就是矿工的挖矿收入。它由两 部分组成：一部分是奖励的25个比特币（奖励在每生产210 000个区块——大概4年——后 减半），另一部分是所有交易的交易手续费。</p></li><li class="lvl-3"><p>还有一个特别的地方就是“币基”参数，矿工可以放任何值进去。</p></li></ol><p>创世块是比特币区块链的原始块。也称为块0，它是所有其他块构建 的基础。没有创世块，就不能创建新块，也就没有区块链。 创世块来自比特币的创始人中本聪（Satoshi Nakamoto）。他是用 微软的visual studio和c++编写的， 他从2009年1月3日开始开采，持续了六天；中本聪正在彻底测试创 世块，以确保它是完美的，因为它将永远被硬连接到系统中。</p><h2 id="3-5-比特币网络">3.5 比特币网络</h2><p>所有的节点都是<code>平等</code>的</p><p>发起一个交易： 泛洪Flooding算法 (八卦gossip协议)</p><h3 id="核验新交易信息">核验新交易信息</h3><ol><li class="lvl-3"><p>对每个前序交易的输出运行核验脚本</p></li><li class="lvl-3"><p>校验是否有双重支付</p></li><li class="lvl-3"><p>检查这笔交易信息是不是已经被本节点接收过</p></li><li class="lvl-3"><p>节点只会接收和传递在白名单上的标准脚本</p></li></ol><h4 id="竞态条件-（race-condition）">竞态条件 （race condition）</h4><p>哪一个交易被纳入区块链产生分歧(Race condition)</p><p>每个节点默认保留最早接收到的交易 （or Replace-by-fee费用替代策略）</p><blockquote><p>自从2013年，矿工的缺省行为变成了“费用替代策略”, 即节点在遇到有冲突的交 易时，会把交易手续费更高的交易放进自己的交易池，把手续费更低的替换出去。站 在矿工的角度，由于收益更高，因此也是理性的选择——至少在短期看是这样。但是 这种费用替代策略却使多重支付攻击变得更容易了。 因此，费用替代策略受到了不少争议，这些争议一方面从技术层面讨论在费用替 代策略中是否可以真正阻止多重支付；另一方面从哲学层面讨论比特币是不是应该要 尽可能支持零验证，或直接放弃费用替代策略。我们这里就不再赘述这些讨论了很久 的争议了，但最近比特币核心代码倒选用了“有选择权的”（opt-in）费用替代策略的 做法，也就是交易可以标记自己是否适用费用替代策略。</p></blockquote><p>如果两个矛盾的交易或者区块在不同地方发起，向整个网络广播；那么节点接收那个交易取决于它在网络的位置</p><h3 id="区块的传播与交易传播类似">区块的传播与交易传播类似</h3><p>竞态条件的限制：哪个区块被纳入长期共识链取决于其他节点<code>选择</code>在哪个区块上扩展区块链</p><p>核验一个区块：</p><ul class="lvl-0"><li class="lvl-2"><p>确认区块头部；</p></li><li class="lvl-2"><p>确定哈希值在<code>给定范围</code>；</p></li><li class="lvl-2"><p>确认区块里面的<code>每个</code>交易；</p></li><li class="lvl-2"><p><code>最长</code>的一条区块链进行扩展</p></li></ul><p>存储空间需求</p><p>全节点：需要把完整的共识区块链存储下来</p><p>2022年10月16日 BTC 链为432 GB</p><h3 id="轻量节点-nightweight-nodes-也叫简单付款验证-Simple-Payment-Verification">轻量节点(nightweight nodes) 也叫简单付款验证(Simple Payment Verification)</h3><p>简称SPV客户端只存储他们所关心的，需要进行核验的部分交易</p><p>SPV节点<code>只验证相关交易</code>；依赖全节点去 验证网络上的其他所有交易</p><p>只需要几十MB数据(VS 几十GB or More)</p><h2 id="3-6-限制与优化">3.6 限制与优化</h2><p>比特币的总体数量与记账奖励社区内基 本达成共识：<code>不应该改变</code></p><p>交易性能： 7笔/秒 (Calculation)</p><blockquote><p>每个区块大小限定在1MB，每个交易大约是 250字节，所以每块最多容纳4 000个交易。平均每隔10分钟，有一个矿工获得记账权利， 所以每秒钟只能处理7个交易</p></blockquote><p>Limitation: Visa 2000 笔/秒</p><h4 id="Weakness-of-Crypto-Suite">Weakness of Crypto Suite</h4><p>ECDSA &amp; Hash function</p><p>担心在一生中，这些算法可能会被攻破</p><p>Reference: ABCMint 抗量子攻击</p><h3 id="修订协议">修订协议</h3><p>修订协议：无法假定所有节点都会更新版</p><h4 id="硬分叉">硬分叉</h4><p>引入新的特性，使得前一版本的协议失效</p><h4 id="软分叉">软分叉</h4><p>加入新特性，让现有的核验规则更加严格。老的节点依然会接受所有的区块，而新的节点会拒绝</p><p>向下兼容–P2SH</p><p>MULTISIG的Bug: 推送给堆栈一个无用的值。但修复这个缺陷，会产生<code>硬分叉</code></p><p>如何改变区块大小：难以达成共识</p><p>提高（区块链系统）交易处理能力</p><h1>第4章 如何储存和使用比特币</h1><h2 id="目录-3">目录</h2><ul class="lvl-0"><li class="lvl-2"><p>4.1 简单的本地存储</p></li><li class="lvl-2"><p>4.2 热存储与冷存储</p></li><li class="lvl-2"><p>4.3 密钥分存和密钥共享</p></li><li class="lvl-2"><p>4.4 在线钱包和交易所</p></li><li class="lvl-2"><p>4.5 支付服务</p></li><li class="lvl-2"><p>4.6 交易费</p></li><li class="lvl-2"><p>4.7 货币兑换市场</p></li></ul><h2 id="4-1-简单的本地存储">4.1 简单的本地存储</h2><p>存储比特币其实就是如何保存和管理比特币<code>私钥</code></p><ol><li class="lvl-3"><p>可获取性</p></li><li class="lvl-3"><p>安全性</p></li><li class="lvl-3"><p>便利性</p></li></ol><h3 id="比特币钱包软件">比特币钱包软件</h3><p>管理比特币和私钥信息并让你方便使用的一个应用软件</p><h3 id="编码解码（encoding-keys）：Base58编码和二维码">编码解码（encoding keys）：Base58编码和二维码</h3><ul class="lvl-0"><li class="lvl-2"><p>Base58编码</p></li><li class="lvl-2"><p>Base64是一种基于64个可打印字符来表 示二进制数据的表示方法</p></li><li class="lvl-2"><p>包含58个字符的字符集：去掉几个比较 容易混淆的字母</p></li><li class="lvl-2"><p>相比Base64，Base58不使用数字&quot;0&quot;，字 母大写&quot;O&quot;，字母大写&quot;I&quot;，和字母小写&quot;l&quot; ，以及&quot;+“和”/&quot;符号</p></li></ul><p>设计Base58主要的目的：</p><ol><li class="lvl-3"><p>避免混淆。在某些字体下，数字0和字母大写 O，以及字母大写I和字母小写l会非常相似。</p></li><li class="lvl-3"><p>不使用&quot;+“和”/&quot;的原因是非字母或数字的字符 串作为帐号较难被接受。</p></li><li class="lvl-3"><p>没有标点符号，通常不会被从中间分。</p></li><li class="lvl-3"><p>大部分的软件支持双击选择整个字符串。</p></li></ol><p>QR码：帐户交易处理更方便</p><h3 id="虚荣地址-Vanity-Address">虚荣地址 (Vanity Address)</h3><p>How to Generate this type of Address? 只能尝试</p><p>How to Speedup?<br>$$  g^{𝑥+1} = g ∗ g^x  $$   椭圆曲线点乘优</p><h2 id="热存储和冷存储">热存储和冷存储</h2><h3 id="热存储">热存储</h3><p>存放在个人电脑里（像把钱放在钱包里）方便但不安全</p><h3 id="冷存储">冷存储</h3><p>不联入互联网，封存起来（像保险箱），安全性高但不方便</p><h3 id="分层确定性钱包（hierarchical-deterministic-wallet）">分层确定性钱包（hierarchical deterministic wallet）</h3><p>让冷存储端制造很多的地址数量，通过 一个短暂的一次性的交换，热存储端就 可知晓所有地址 Crypto technique（同步）</p><p>对每个i而言，第i个地址和第i个私钥相匹 配</p><p>一长串配对的公私钥<img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230210160319.png" alt=""><br>注：冷储存端生成和保存私钥生成信息和地址生成信息，然后将地址生成信息一次性转给热储存端。当 热储存端要给冷储存端转账时，就按次序生成新的地址。冷储存端上线后，也会按顺序生成地址，然后 查收相应地址收到的款项，直到某一地址没有收款位置。如果冷储存端需要向热储存端转账，它就会按 顺序生成私钥序列。</p><h3 id="分层确定性钱包：技术方案">分层确定性钱包：技术方案</h3><p>一个ECDSA私钥是一个随机数x，其对应的公钥是  $ g^x $ 。为了生成分层确定性密钥，我们需要另外两个随机数k和y。</p><ul class="lvl-0"><li class="lvl-2"><p>私钥生成信息:k,x,y</p></li><li class="lvl-2"><p>第i个私钥:x=y+H(k‖i)</p></li><li class="lvl-2"><p>地址生成信息:k,  $ g^y $</p></li><li class="lvl-2"><p>第i个公钥:  $ g^{xi}=g H(k‖i) ·g^y $</p></li><li class="lvl-2"><p>第i个地址: $ H(g{xi}) $</p></li></ul><h4 id="分层确定性钱包：安全性分析">分层确定性钱包：安全性分析</h4><ul class="lvl-0"><li class="lvl-2"><p>𝑔𝑔𝑦𝑦 can’t deduce 𝑦𝑦, and also 𝑥𝑥𝑖𝑖 (𝑖𝑖-th private key)</p></li><li class="lvl-2"><p>Because of DLP (Discrete Logarithm Problem)</p></li></ul><h3 id="大脑钱包-（brain-walle）">大脑钱包 （brain walle）</h3><p>这种方式下，你通过一个密码就可 以支取比特币。</p><p>大脑钱包的主要原理是用一个可预测的算法把一个口令变成一对公钥/私钥。</p><blockquote><p>有一种简便的方法可以生成口令：从最常用的10 000英语词汇中，随机选择6个 词，从而生成大致80位长度的字节 $ [6×log2 (10 000)大致等于80] $ 。很多人发现这个方法 比随机取字母容易记忆，因为这种方法生成的口令通常是下面这样子的： worn till alloy focusing okay reducing earth dutch fake tired dot occasions</p></blockquote><h4 id="让攻击者尝试密钥破解的速度变慢">让攻击者尝试密钥破解的速度变慢</h4><p>Key Stretching 密钥延展重复计算SHA256 ( $ 2^{20 } $ Trials)<br>$$ SHA256<sup>{2</sup>{20}} (Password) ==  OpenValue $$</p><h3 id="纸钱包">纸钱包</h3><p>把密钥印在纸上，然后把纸锁在保险箱里面</p><h3 id="防损硬件（tamper-resistant-device）">防损硬件（tamper-resistant device）</h3><ul class="lvl-0"><li class="lvl-2"><p>用来保存密钥或者用来生成密钥；</p></li><li class="lvl-2"><p>此类设备不会泄漏密钥或者输出密钥；</p></li><li class="lvl-2"><p>一旦设备丢失或者被盗，马上能察觉。</p></li></ul><h2 id="4-3-密钥分存和密钥共享">4.3 密钥分存和密钥共享</h2><p>把密钥保存在一个地方：一损俱损</p><p>分散风险： 密钥分存</p><p>密钥被分成N个片段，如果获得其中的K个片段就可以把原密钥重新还原。如果片段数目 少于K, 不能知道密钥的任何信息。</p><p><strong>不能直接分割密钥！ 否则每一个片段会透露密钥的部分信息， 降低了搜索复杂度</strong></p><p>N=2, K=2</p><p>Solutions?</p><p>R and R XOR S</p><p>Extension to N=K case</p><blockquote><p>举个例子，我们设定N=2，K=2，意味着我们把想要加密的密钥（原密钥）转换成两 个子密钥，只有同时获得这两个子密钥才能拼出原密钥。我们把原密钥称为S，S是一个 很大的数字（比如128位）。然后，我们可以随机产生另一个128位的数字R，让R作为其 中的一个子密钥，那么另外一个子密钥就是S⊕R（⊕代表逻辑算符互斥，exclusive OR， 或缩写成XOR，也叫异或），我们把S⊕R称为“密文”。然后，我们把子密钥R和密文 S⊕R保存在两个不同的地方。单独根据子密钥R或密文都无法知晓原来密钥的任何信息， 但如果我们同时得到R和S⊕R，我们可以通过异或逻辑运算得到原来的密钥。 N和K相等时，我们总是可以这样做：对于之前的K-1个子密钥，我们可以生成N-1不 同的随机数，最后一个子密钥就是原密钥与所有其他N-1个子密钥的异或。但如果N大于K 的话，这个技巧就行不通了。我们需要借助其他代数方法。</p></blockquote><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230210163306.png" alt=""><br>注：S代表原密钥，被编码成一个大的整数，图中斜线的斜率随机。斜线上的点（主要是它们的Y坐标 S+R，S+2R，…）代表子密钥。连接任何两个点，都可以得到S $ [两点连线，延长，与Y轴的交点就是S（黑 点）] $ 。若是只有一个点，又无法确定斜率（斜率随机），就无法得到S。<br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230210163952.png" alt=""></p><p>拉格朗日公式表明，如果要回归一条自由度为k-1的曲线，需要获得至少K 个点。</p><p><strong>如果我们将 原密钥转换成N个子密钥，除非黑客获得了K-1个子密钥，否则原密钥就是安全的，换个 说法，我们最多可以承受N-K个子密钥被泄露。</strong></p><h3 id="门限密码（threshold-cryptography）">门限密码（threshold cryptography）</h3><p>两个子密钥分别保存在个人电脑和手机上；</p><p>电脑生成一个签名片段，发送到你手机上；</p><p>手机利用它的子密钥完成整个签名。</p><h3 id="多重签名（multisignatures）">多重签名（multisignatures）</h3><p>比如：一个交易需要5个人至少3个人签名才能完成</p><p>多重签名可以妥善的管理在冷存储端的 数字资产；需要多人参与才能实现</p><h2 id="4-4-在线钱包和交易所">4.4 在线钱包和交易所</h2><h3 id="在线钱包">在线钱包</h3><p>在线钱包可以在各种场合应用，但真正 的钱包信息存储在云端</p><p><a href="http://Blockchain.info">Blockchain.info</a></p><p>网站存储着你的密钥，至少能够接触到 你的密钥</p><p>安全前提：网站服务提供商可以信任</p><h3 id="数字货币（比特币）交易所">数字货币（比特币）交易所</h3><p>银行的功能：面向个人存取款</p><p>银行会把钱用于投资；储备金</p><p>数字货币交易所在交易前后，数字货币并没 有真正在区块链中移动，只是你和银行的合 约变化了</p><h4 id="优缺点">优缺点</h4><p>优点：把数字货币（比特币）和法币经济 结合，实现自由转换</p><p>风险：</p><ol><li class="lvl-3"><p>挤兑</p></li><li class="lvl-3"><p>庞式骗局</p></li><li class="lvl-3"><p>黑客入侵</p></li></ol><h3 id="监管">监管</h3><h4 id="银行监管">银行监管</h4><p>政府要求银行有一个最低准备金要求： 需要3%-10%的现金应对突发提款需求</p><p>政府对银行进行监管，必要时为银行或 者储蓄者提供保护</p><h4 id="准备金证明">准备金证明</h4><p>向储户证明留存了一部分储备金，消除投 资人的担心</p><p>如何证明你(交易所)有 $ 10^6 $ 的数字准备金？</p><p>发起一笔转账交易，收款方为本人；利用 私钥签名</p><h4 id="负债证明（proof-of-liabilities）">负债证明（proof of liabilities）</h4><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230210170402.png" alt=""><br>我们需要为每个节点添加一个字段（下文简称为存 款金额字段），这个字段显示其最近的两个子节点的存款金额之和。</p><blockquote><p>注：交易所构建这样一棵梅克尔树：每个储户对应一个叶节点，每个叶节点的存款金额字段保存储户存 款金额。每个节点的存款金额字段等于与其最相近的两个子节点的存款金额之和，这样，根节点的存款 金额字段就代表着存款总规模。每个储户都可以要求交易所证明该储户在梅克尔树上，并且可以核实根 节点所显示的总存款规模。</p></blockquote><p>每个客户可以向交易所索要<code>存款证明</code></p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230210170929.png" alt=""></p><ol><li class="lvl-3"><p>子树根节点的哈希指针和存款金额字段，与交易所广播的值一致。</p></li><li class="lvl-3"><p>从子树的根节点遍历到叶节点，每个节点对应的哈希值确实是其所指向的子节点的 哈希值。</p></li><li class="lvl-3"><p>每个叶节点对应的客户账号信息（客户名、账号和存款金额）都是正确无误的。</p></li><li class="lvl-3"><p>每个节点的存款金额字段正好等于与其最相近的子节点的存款金额之和。</p></li></ol><p>交易所证明了其至少留存了X数字货币</p><p>之后证明其吸收的存款规模至多是Y数字 货币</p><p>可让所有人能独立审计验证: 准备金下限: X/Y</p><h2 id="4-5-支付服务">4.5 支付服务</h2><h3 id="如何接受数字货币付款">如何接受数字货币付款</h3><ul class="lvl-0"><li class="lvl-2"><p>客户可以用数字货币(比如比特币)购物</p></li><li class="lvl-2"><p>商户如期收到法定货币(比如美元)</p></li><li class="lvl-2"><p>支付服务商获得手续费</p></li></ul><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230210171916.png" alt=""></p><p>支付服务商承担了所有风险</p><ul class="lvl-0"><li class="lvl-2"><p>安全风险：好的安全措施来管理数字货币</p></li><li class="lvl-2"><p>汇率风险: (比如 数字货币 与法定货币 之间 兑换的汇率波动)</p></li></ul><p>另外一方面：如果支付商解决了这些问题，可从每笔交易中收取可观的利润</p><h2 id="4-6-交易费">4.6 交易费</h2><p>交易费=交易的输入金额-交易的输出金额</p><p>比特币网络中，传播你的交易信息需要成本</p><p>比如区块中打进一笔你的交易，区块就会变大， 也会花费更多的时间传输到其他节点</p><p>确认你的交易需要花费代价：交易费用来补偿矿 工处理交易付出的代价</p><p>通常而言，如果支付了更多的交易费，那 么交易会被更快，更可靠的传播和记录</p><h3 id="默认的交易费政策">默认的交易费政策</h3><p>现在大部分矿工所默认的交易费是这样计算的：首先，如果交易满足以下三个条件， 那就<code>不需要支付交易费</code>：</p><ol><li class="lvl-3"><p>交易小于1 000个字节。</p></li><li class="lvl-3"><p>所有输出为0.01BTC或更大。</p></li><li class="lvl-3"><p>优先权足够高。(所有输入的账龄的总和×输入金额）/交易规模</p></li></ol><blockquote><p>，当前默认标准是：每1 000个字节需要支付 0.0001BTC，在2015年，这相当于每1 000个字节花费1美分的交易费，一笔交易通常包 括：输入通常是148个字节，每个输出通常是34个字节，其他信息10个字节。如果一笔交 易有两个输入和两个输出，那么这笔交易的大小是400个字节。</p></blockquote><p>通常需要支付一笔标准的交易费用； 大多数矿工强制要求必须包含交易费用</p><h2 id="4-7-货币兑换市场">4.7 货币兑换市场</h2><p>比特币市场中的公允价格是由<code>供给和需求</code>决定的</p><p>比特币的需求包括将比特币作为支付中 介，以及作为投资需求</p><h3 id="一个简单的市场行为模型">一个简单的市场行为模型</h3><p>根据供需平衡来决定比特币价格：假设P 是比特币对美元的价格</p><p>供应侧：D秒内，市场内有S个比特币可 以进行交易</p><p>需求侧：总共的支付交易规模是T美元</p><p>𝑆/𝐷 = 𝑇/𝑃 意味着 P ∝ T</p><h1>第5章 比特币挖矿（bitcoin mining）</h1><h2 id="目录-4">目录</h2><ul class="lvl-0"><li class="lvl-2"><p>5.1 比特币矿工的任务</p></li><li class="lvl-2"><p>5.2 挖矿所需硬件</p></li><li class="lvl-2"><p>5.3 能源消耗和生态环保</p></li><li class="lvl-2"><p>5.4 矿池</p></li><li class="lvl-2"><p>5.5 挖矿的激励和策略</p></li></ul><h2 id="5-1-比特币矿工的任务">5.1 比特币矿工的任务</h2><p>为了挖矿，加入比特币网络，完成任务</p><ol><li class="lvl-3"><p>监听交易广播；</p></li><li class="lvl-3"><p>维护区块链网络和监听新的区块；</p></li><li class="lvl-3"><p>组装一个备选区块；</p></li><li class="lvl-3"><p><code>找到一个有效的随机数</code>；</p></li><li class="lvl-3"><p>希望你的区块被全网接受；</p></li><li class="lvl-3"><p>利润</p></li></ol><p>第一类任务: 验证交易和区块</p><p>比特币网络赖以生存和运转的基础</p><p>第二类任务：竞争出块并获得奖励</p><p>鼓励矿工去完成第一类任务而设置</p><h3 id="寻找有效区块">寻找有效区块</h3><p>矿工首先从个人交易池中选出一系列有效的交易-&gt;Merkel Tree<br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230211103111.png" alt=""><br>矿工： 挖矿通常使nonce 从0开始，每次增 加1， 直到使得区块有效(Consecutive 0s in the front)</p><p>nonce : 32 bit</p><p>如何满足挖矿难度? (比如72个头部连续的0)</p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230211103212.png" alt=""></p><blockquote><p>当改变币基里的随机数后，整个梅克尔树上交易的哈希值都会改变（见图5.2），因 为币基值的改变会向上传递，所以改变币基的随机数值比改变头部随机数值的代价要大很 多。正因为如此，矿工大部分时间只改动头部的随机数，只有在遍历头部2 32 个随机数值 且还没有找到一个有效区块时，才改动币基的随机数</p></blockquote><p>如果遍历nonce的取值空间还没有找到一 个有效区块时，改动coinbase中的随机数</p><p>正确的临时随机数组合：头部随机数 (nonce)+币基随机数(coinbase)</p><p>立即宣布：希望得到出块奖励</p><ul class="lvl-0"><li class="lvl-2"><p>求解谜题不同 :每个矿工会把数目不同、次序不同的交 易放进区块；币基交易里，接收地址通常 也不一样</p></li><li class="lvl-2"><p>区块难度相同</p></li></ul><h3 id="决定难度">决定难度</h3><p>每挖出2 016个区块，挖矿难度会改变一次，这个周期大约是两个星期。难度的改变 是根据上2 016个区块的挖矿效率来决定的。用下列公式来表达：<br>$$ 下一个难度=\frac{上一个难度\times2016\times10分钟}{产生上2016个区块所花费的时间} $$</p><h2 id="5-2-挖矿所需硬件">5.2 挖矿所需硬件</h2><p>SHA-256的 设计来自美国国家安全局（NSA）</p><h3 id="CPU挖矿">CPU挖矿</h3><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230211103906.png" alt=""><br>CPU挖矿 个人电脑： 20MH/s 2015年难度水平： 267 大约要几十万年找到一个区块！</p><h3 id="GPU">GPU</h3><p>GPU挖矿</p><p>图形处理器(GPU) 适合做数据密集型的 计算；适合并行</p><p>CPU 驱动多个GPU</p><p>2015年 ： 200MH/S<br>100块显卡集成在一起进行运算</p><p>非常耗电</p><p>大约要几百年才能找到一个有效区块！</p><h3 id="现场可编程门阵列-Field-Programmable-Gate-Array，简称FPGA">现场可编程门阵列(Field-Programmable Gate Array，简称FPGA)</h3><p>精心设计： 1GH/s</p><p>100块 FPGA 板</p><p>100年才能找到一个有效 区块</p><p>故障和报错；性能功耗比方面不理想</p><h3 id="专用集成电路技术挖矿-ASIC">专用集成电路技术挖矿 (ASIC)</h3><p>应用需求驱动</p><p>集成电路芯片：需要专业的知识，设计 的芯片寿命十分短暂</p><p>运营成本很高(电力、冷却)</p><h3 id="如今：专业挖矿的天下">如今：专业挖矿的天下</h3><p>大型专业挖矿中心：专门运营</p><p>采购打过折的功效更高的ASIC矿机</p><p>建立挖矿中心的三个重要因素：</p><p><code>气候</code>、<code>电费</code>、<code>网络接入速度</code></p><p>格鲁吉亚、冰岛；中国内蒙古</p><h3 id="未来">未来</h3><p>ASIC和专业挖矿中心违反了当时设计的初衷：完全去中心化的系统</p><p>另类币的挖矿发展轨迹：也许谜题会变，但是循环周期类似 CPU-&gt;GPU-&gt;FPGA-&gt;ASIC-&gt;…</p><h2 id="5-3-能源消耗和生态环保">5.3 能源消耗和生态环保</h2><p>每进行一个不可逆的bit flip（数位）运算就会消耗能源</p><p>比特币的挖矿过程必定消耗能源</p><ol><li class="lvl-3"><p>内涵能源 （生产矿机）</p></li><li class="lvl-3"><p>电能 （挖矿）</p></li><li class="lvl-3"><p>冷却 （防止矿机出故障）</p></li></ol><h3 id="能耗预估">能耗预估</h3><h4 id="自上而下">自上而下</h4><p>2015<br>收入用来支付电能</p><p>每秒所有的11美元收入购买电费，可以 购买367 百万焦耳</p><p>MW 数量级（几百万瓦特 （megawatt，简称MW））</p><h4 id="自下而上">自下而上</h4><p>最好的矿机：1W—3G/s</p><p>全网算力是350PH/s ----》每秒中全网计算消耗 117 MW</p><p>总而言之，比特币挖矿当时（2015）是 MW的数量级</p><h3 id="比特币挖矿—浪费能源？">比特币挖矿—浪费能源？</h3><blockquote><p>比特币这种“浪费”能源的形式经常被人诟病，因为SHA-256的运算没有其他任何用 处。但是我们必须认识到任何一种支付系统都需要能源和电力的消耗。就拿传统的货币来 说，纸币印刷、ATM机器的运行、硬币分类机器、点钞机、支付服务系统以及运送现钞 和金条的武装押运车，无一不在消耗各种能源。你也可以一样说这些能源的消耗除了维护 整个货币体系之外，也没有任何其他用处。所以，如果我们认可比特币作为一个有用的货 币体系，那么支持比特币体系的能耗就不能认为是浪费。</p></blockquote><h3 id="能源的循环使用">能源的循环使用</h3><p>能源的循环使用—数据火炉(Data Furnace)</p><h3 id="将电力转换成现金">将电力转换成现金</h3><h2 id="5-4-矿池">5.4 矿池</h2><h3 id="单个矿工的挖矿风险">单个矿工的挖矿风险</h3><p>发现区块的数目可以用帕松分布(Poisson distribution)来逼近<br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230211110147.png" alt=""><br>Binomial distribution can be approximated by the Poisson distribution</p><p>比如你用6000 US Dollars买了一台矿机根据矿机性能，平均每14个月找到一个区块𝜆= 6/7</p><p>对于一个小矿工而言，挖矿就是赌博游戏</p><h3 id="矿池：比特币矿工互相之间的保险">矿池：比特币矿工互相之间的保险</h3><p>一组矿工可以形成一个矿池共同挖矿，并指定一个币基接收人——<code>矿池管理员</code></p><p>矿工通过输出<code>挖矿工分</code>来证明他的工作量</p><p>比如目标值前面有67个0；一个合格的工 分需要40-50个0</p><p>矿池管理员根据大家的工作量按照比例 分配奖励</p><h3 id="分红方案">分红方案</h3><h4 id="工分分红">工分分红</h4><p>矿工发送工分，管理员马上支付奖励</p><p>管理员承担了所有风险</p><h4 id="按实际比例分红">按实际比例分红</h4><p>每次找到一个有效区块，区块奖励按照矿工工作量按比例分配；</p><p>降低管理员风险</p><h3 id="矿池跳换">矿池跳换</h3><p>投机矿工： 挖矿早期(上一个区块刚刚被发现)加入按实际 比例分红的矿池； 挖矿后期跳到一个按工分分红的矿池。</p><h4 id="研究问题：如何设计一个矿池方案，避免矿工的投机？">研究问题：如何设计一个矿池方案，避免矿工的投机？</h4><p>根据最近若干个工分提交的结果才分配</p><h4 id="51-矿池">51%矿池</h4><p>实际上的算法可 能集中在几个大 的机构手中，即 使‘洗算力’</p><h3 id="优缺点-2">优缺点</h3><h4 id="优点-2">优点</h4><ul class="lvl-0"><li class="lvl-2"><p>小矿工容易参与，也有一定的收益；</p></li><li class="lvl-2"><p>网络管理员负责组装区块，网络更新变得更加容易</p></li></ul><h4 id="缺点">缺点</h4><ul class="lvl-0"><li class="lvl-2"><p>（算力）中心化管理；</p></li><li class="lvl-2"><p>整个网络中进行校验交易的全节点数目在下降</p></li></ul><h2 id="5-5-挖矿的激励和策略">5.5 挖矿的激励和策略</h2><p><strong>我们假设一个运行非默认策略的矿工 掌控一定的比特币网络挖掘市场份额，设为α。</strong></p><p>在挑选一个区块开挖之前，矿工做策略上的 选择：</p><ol><li class="lvl-3"><p>需要包括哪些交易？ <code>（优先选择交易费高的交易） </code></p></li><li class="lvl-3"><p>对哪一个区块进行挖矿运算？ <code>（优先选择最长的区块链上继续下挖）</code></p></li><li class="lvl-3"><p>在同一高度的多个区块中做选择？ <code>（优先选择被监听到的那一个区块）</code></p></li><li class="lvl-3"><p>什么时候宣布新的区块？    <code>（默认做法是立刻宣布）</code></p></li></ol><h3 id="分叉攻击-forking-attack">分叉攻击(forking attack)</h3><p>双花：重复支付</p><blockquote><p>一个恶意的矿工给受害者鲍勃发送了一些比特币来购买其服务和货品。然后这个矿工进行了一个分 叉攻击，创建了一个包含冲突交易的更长的分叉，在新的共识链中给鲍勃的支付就变成了无效的交易。</p></blockquote><h4 id="51-是必要的吗？">51%是必要的吗？</h4><p>51%会影响大家对‘去中心化’的信任</p><p>实际上，稍低算力也可以发起攻击，因 为有网络拥塞、延迟等因素</p><p>中心化的攻击者能够快速通信从而节省 一些算力</p><h3 id="贿赂攻击">贿赂攻击</h3><p>有别于直接获得算力，攻击者贿赂已经 具有算力的人，以分叉出一条最长链</p><h3 id="临时保留区块攻击-自私挖矿-（selfish-mining）">临时保留区块攻击(自私挖矿)（selfish mining）</h3><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230211111101.png" alt=""><br>这里面的关键是你需要运气好到连续发现两个区块</p><h3 id="黑名单与惩罚分叉攻击">黑名单与惩罚分叉攻击</h3><p>宣布拒绝在包含来自该地址的交易的区块链上工作； （类似美国制裁伊朗）</p><h3 id="羽量级分叉">羽量级分叉</h3><p>如果胆敢把来自地址X的交易加入自己的区块，便有 𝛼𝛼2的可能会丧失自己已经发现的区块</p><h3 id="其他">其他</h3><p>目前，区块奖励在矿工收入里面占比超 过99%；</p><p>但是区块奖励每4年减半，最终出块奖励 会变得很低；</p><p>从长期来看，比特币奖励将从固定的挖 矿奖励为主，转变为交易费为主</p><h1>第6章 比特币和匿名性</h1><h2 id="目录-5">目录</h2><ul class="lvl-0"><li class="lvl-2"><p>6.1 匿名的基础知识</p></li><li class="lvl-2"><p>6.2 如何对比特币去匿名化</p></li><li class="lvl-2"><p>6.3 混币</p></li><li class="lvl-2"><p>6.4 分布式混币</p></li><li class="lvl-2"><p>6.5 零币和零钞</p></li></ul><h2 id="6-1-匿名的基础知识">6.1 匿名的基础知识</h2><h3 id="匿名的定义">匿名的定义</h3><p>匿名（Anonymity）：无关联性的化名比特币系统中，使用者不需要使用真实 的姓名</p><p>需要使用公钥哈希值作为交易标识</p><p>一个用户可以随机创建出任意多个比特 币地址</p><p>比特币具有化名性，但是<strong>不能达到绝对隐私</strong></p><p>使用数字货币（如比特币）支付时，在 真实的物理世界里容易暴露身份，进而 关联到地址，以及其他所有的交易</p><h3 id="无关联性">无关联性</h3><ol><li class="lvl-3"><p>同一个用户的不同地址应该不易关联。</p></li><li class="lvl-3"><p>同一个用户的不同交易应该不易关联。</p></li><li class="lvl-3"><p>一个交易的交易双方应该不易关联。</p></li></ol><p>区块链货币中，所有交易都记录在一个 公开账本上，也就是说相关交易信息可 以永久追踪</p><p>希望能够达到传统银行能够达到的隐私 保护级别，降低公共区块链带来的信息 暴露风险</p><p>超越传统银行给我们的隐私保护级别</p><h3 id="匿名化和去中心化">匿名化和去中心化</h3><p>Chaum的电子现金系统，采用了盲签名技术，但还需一个中央权威机构</p><p>Zerocoin， Zerocash：匿名化&amp;去中心化 的加密数字货币系统</p><h2 id="6-2-如何对比特币去匿名化">6.2 如何对比特币去匿名化</h2><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230213075710.png" alt=""><br>一个地址簇 (clustering of addresses)。一般来说，如果一个新地址的输出，和该地址簇中的任何一个已知地址被一 起花费，那么这个新的地址也将会被加到该地址簇中去。</p><p><code>交易图谱分析 （transaction graph analysis）</code></p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230213075849.png" alt=""></p><h3 id="网络层的去匿名化">网络层的去匿名化</h3><p>“第一个通知交易的节点很有可能就 是交易源头”。当有多个节点配合并且对同一个交易源头进行识别的时候，这种方法的实际效果会更加 明显。</p><h2 id="6-3-混币">6.3 混币</h2><h3 id="混币准则">混币准则</h3><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230213082937.png" alt=""><br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230213082954.png" alt=""></p><h2 id="6-4-分布式混币-（Decentralized-Mixing）">6.4 分布式混币 （Decentralized Mixing）</h2><p>采用一种用户之间的<strong>点对点</strong>模式实现混币交易的协议</p><h3 id="合币-（Coinjoin）">合币 （Coinjoin）</h3><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230213090246.png" alt=""></p><h3 id="高风险交易流（high-level-flows）">高风险交易流（high-level flows）</h3><p>为了完成一笔支付，用户通常会组合所 拥有的数字货币，这样便有足够数额可 以支付到单一接收地址</p><p>规避：所有输入地址被<strong>关联</strong>在一起</p><p>合 并规避 （merge avoidance）</p><p>这种合并规避协议通过允许接收方提供多个输出地址的方式（尽可能多 的），使得无关联性成为可能。<br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230213091614.png" alt=""></p><h2 id="6-5-零币和零钞">6.5 零币和零钞</h2><p>基础币 （Basecoin）是一种类似 于比特币的另类币，而零币是这种数字货币的一种延伸，其所提供的匿名性的核心特点在 于，你可以将基础币和零币进行来回转换，并且当你这么做的时候，就打破了旧的基础币 和新的基础币之间的关联。</p><h3 id="零知识证明-Zero-Knowledge-Proof">零知识证明(Zero Knowledge Proof)</h3><p>证明者(Prover)要 让验证者(Verifier)相信自己拥有某种知识 ，但又不泄漏它</p><p>很多场景中有着广泛的应用，比如金融 交易中，保护支付方、接收方、交易金 额的隐私</p><p>Example 1. A Key to a Door<br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230213140322.png" alt=""><br>Example 2. Coloring Problem<br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230213140341.png" alt=""></p><h3 id="交互式零知识证明的一般模型">交互式零知识证明的一般模型</h3><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230213140424.png" alt=""><br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230213140517.png" alt=""><br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230213140638.png" alt=""></p><p>例如，假设你已经做了很 多工作解决了一个哈希谜题，并且你想要向其他人证明你做到了。换而言之，你想要证 明“我做到了”这个声明。 I know x such that H(xǁ〈other known inputs〉)&lt;〈target〉 当然，你可以展示上述公式里的x值来证明你做到了，但是零知识验证可以让你向别 人证明你做到了这一点，同时不需要透露x的值，即便在看过你的证明之后。 你也可以证明一个如“我知道一个x值，而公式H（x）的结果属于下面这一个集合 {…}”这样的声明。</p><p>密码学承诺好比把一个序列号封装到一个信封里。<img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230213140941.png" alt=""><br>为了将一个零币置于区块链中，需要创建一个铸币交易，其输出地址是零币序列号的一个密码承诺，而铸币交易的输入则是一个基础币，这个基础币也会在创建零币的过程被消耗掉，整个交易过程并 不需要公示这个序列号。<br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230213141229.png" alt=""></p><h3 id="Zerocoin：匿名性">Zerocoin：匿名性</h3><p>铸币交易或者花费交易中没有展示过r<br>无人知道序列号对应哪一个具体的零币</p><h3 id="零钞">零钞</h3><p>零钞使用的是一种被称为zk-SNARKS的密码学技术(Zeroknowledge Succinct Non-interactive Arguments of Knowledge)</p><p>DAP (Decentralized Anonymous Payment Scheme )</p><p>Hiding user identities, transaction amounts, and account balances from public view</p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230213142134.png" alt=""></p><h1>第10章 另类币和加密货币生态系统</h1><h2 id="目录-6">目录</h2><ul class="lvl-0"><li class="lvl-2"><p>另类币的介绍</p></li><li class="lvl-2"><p>不可分割的交叉链呼唤</p></li><li class="lvl-2"><p>以太坊和智能合约</p></li></ul><h2 id="另类币的介绍">另类币的介绍</h2><p>Limitation of Bitcoin (High Latency, Low TPS)</p><p>可以对脚本语言进行扩充以增加交易种 类和安全属性</p><p>采用与bitcoin不同的挖矿方式以及共识 算法</p><p>困难的地方在于如何让别人逐步接受你的货币，吸引开发者、矿工 、投资者、商家、客户、支付服务商加入货币的生态圈</p><p>吸引矿工特别重要：没有足够的算力支撑 ，双重支付和复制修改代码就容易发生</p><p>让一个社区的人相信该另类币的价值</p><h2 id="另类币">另类币</h2><p>莱特币（Litecoin）是一种<code>点对点</code>的<code>电子加密货币</code>，也是MIT/X11 许可下的一个开源软件项目。莱特币受到了<code>比特币（BTC）</code>的启 发，并且在技术上具有相同的实现原理，莱特币的创造和转让基 于一种开源的加密协议，不受到任何中央机构的管理。莱特币旨 在改进比特币，与其相比，莱特币具有三种显著差异。第一，莱 特币网路大约每2.5分钟（而不是10分钟）就可以处理一个块，因 此可以提供更快的交易确认。第二，莱特币网路预期产出8400万 个莱特币，是比特币网路发行货币量的四倍之多。第三，莱特币 在其工作量证明算法中使用了由Colin Percival首次提出的scrypt加 密算法，这使得相比于比特币，在普通计算机上进行莱特币挖掘 更为容易（在ASIC矿机诞生之前）</p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230213151212.png" alt=""><br>作为一个开放的区块链网络，Conflux 期望通过去中心化理念及一系列技术创新为未来商业赋能，实现资产和数据互通互信，创建一个更具价值的网络世界。 Conflux 致力于利用自主研发的<code>树图高性能共识算法</code>，构建一个无需准入并拥有极高包容性及延展性的区块链网络。</p><h2 id="10-5-不可分割的交叉链互换">10.5 不可分割的交叉链互换</h2><h3 id="Atomic-Cross-chain-Swap-跨链交易">Atomic Cross-chain Swap (跨链交易)</h3><p>如果爱丽丝想卖掉a个另类币给鲍勃，换得鲍勃的b个比特币，他们可以把这项交易做 成是单一且无法分割的形式吗？</p><p>如果其中一个人，假设是爱丽丝，先执行交易，有什么办法可以阻 止鲍勃不遵守承诺呢？</p><p>有个聪明的办法可以做到，这用到了密码学的承诺和锁定时间存储<br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230213152431.png" alt=""></p><h2 id="以太坊和智能合约">以太坊和智能合约</h2><p>编程语言（Solidity） 图灵完备</p><p>支持通用的计算功能</p><p>不再局限于数字货币的应用场景 以太坊：一个开源的有智能合约功能的公 共区块链平台，Blockchain 2.0</p><ul class="lvl-0"><li class="lvl-2"><p>智能合约（smart contract）：存储在区块链上的程序，由各节点运行， 需要运行程序的人支付手续费给节点的矿工或权益人。</p></li><li class="lvl-2"><p>代币（tokens）：智能合约可以创造代币供分布式应用程序使用。分布式 应用程序的代币化让用户、投资者以及管理者的利益一致。代币也可以用 来进行首次代币发行。</p></li><li class="lvl-2"><p>权益证明（proof-of-stake）：相较于工作量证明更有效率，可节省大量在 挖矿时浪费的电脑资源，并避免特殊应用集成电路造成网络中心化。</p></li><li class="lvl-2"><p>燃料（gas）：由交易手续费的概念扩展，在运行各种运算时需计算燃料 消耗量，并缴交燃料费，包括发送以太币或者其他代币也被视为一种运算 动作。</p></li><li class="lvl-2"><p>分布式应用程序：以太坊上的分布式应用程序不会停机，也不能被关掉。</p></li><li class="lvl-2"><p>叔块（uncle block）：将因为速度较慢而未及时被收入母链的较短区块链 并入，以提升交易量。使用的是有向无环图的相关技术。</p></li></ul><p>以太坊最重要的技术贡献就是<code>智能合约</code>。 智能合约是存储在区块链上的程序</p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230214163617.png" alt=""><br>交易数据结构</p><h3 id="以太坊中存在三种共识算法：">以太坊中存在三种共识算法：</h3><ul class="lvl-0"><li class="lvl-2"><p>Ethash ：是以太坊 1.0 的工作量证明算法</p></li><li class="lvl-2"><p>PoA：权威证明算法，服务于测试网、私有链、联盟链等。</p></li><li class="lvl-2"><p>PoS：将在以太坊2.0中需要实现的一套股权证明算法</p></li></ul><p>Solidity<br>一种静态类型的编程语言，用于开发在 EVM (the runtime environment for smart contracts in Ethereum)上运行的 智能合约。 Solidity被编译为可在EVM上 运行的字节码</p><p>开发平台 Remix，Solidity官方IDE Microsoft Visual Studio</p><h1>作业</h1><h2 id="作业1">作业1</h2><blockquote><p>问题 1：多元 Merkle 树。Alice 可以使用二叉 Merkle 树来提交的一组元素 S = （T1, …, Tn），之后她可以向 Bob 证明 S [i] = Ti，每个证明最多包含⌈log2 n⌉ 个 哈希值。对 S 的承诺是单一的哈希值。在这个问题中，请你解释如何使用 k 叉 树来做同样的事情，也就是说，每个非叶节点最多可以有 k 个子节点。每个非 叶节点的哈希值是其所有子结点的值的哈希值。 a.假设 S ＝（T1,…，T9）。解释 Alice 如何使用三叉 Merkle 树计算对 S 的承诺 （即 k = 3）。Alice 如何向 Bob 证明 T4 在 S 中，即哪些值被包含在证明中？ b.假设 S 包含 n 个元素。S [i] = Ti的证明长度是多大？用 n 和 k 的函数表示。 c.对于较大的 n 值，如果我们想最小化证明的大小，最好使用二叉 Merkle 树还 是三叉 Merkle 树？为什么？</p></blockquote><h3 id="答案">答案</h3><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230214165157.png" alt=""></p><p>(2)采用 Merkle tree 的方法，可以知道成员证明需要 Sibling 的集合，因此假设是 k 叉树，那么所需要的 Hash 数目是  $ 1 + (𝑘 − 1)⌈log_{k}(n)⌉ $ ; （包括根节点）</p><p>(3) n 在渐进意义下，成员证明大小正比于 (k-1)/log(k)。可以知道 1/log(2)&lt; 2/log(3) (也就是 log(3)&lt;2log(2))，因此还是二叉 Merkle 树更好。</p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230214165324.png" alt=""></p><h2 id="作业2">作业2</h2><blockquote><p>问题 2：<img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230215083703.png" alt=""></p></blockquote><h3 id="答案-2">答案</h3><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/20230214165351.png" alt=""></p><h1>破解PDF密码的网站</h1><ol><li class="lvl-3"><p><a href="https://smallpdf.com/cn/unlock-pdf">https://smallpdf.com/cn/unlock-pdf</a></p></li><li class="lvl-3"><p><a href="https://www.ilovepdf.com/zh-cn">https://www.ilovepdf.com/zh-cn</a></p></li></ol><p>使用方法：把PDF文件拖进去，然后输入密码，即可。</p>]]></content>
      
      
      <categories>
          
          <category> Pre4APS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> My Notes </tag>
            
            <tag> Pre4APS </tag>
            
            <tag> knowledge </tag>
            
            <tag> BlockChain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Crypto Term Project</title>
      <link href="/post/2e35672.html"/>
      <url>/post/2e35672.html</url>
      
        <content type="html"><![CDATA[<h1>密码学大作业记录(报告、指北)</h1><p>得了70分，感觉还不错?</p><p>😃</p><h2 id="实验要求">实验要求</h2><p>设计一个保密通信的协议，具体要求为：利用RSA公钥密码算法，为双方分配一个 AES算法的会话密钥，然后利用AES加密算法和分配的会话密钥，加解密传送的信息。</p><p>假设条件：假设通讯双方为A和B，并假设发方拥有自己的RSA公钥PKA和私钥SKA ，同时收方拥有自己的RSA公钥PKB和私钥SKB ，同时收发双方已经通过某种方式知道了双方的公钥。</p><p>大作业的要求：</p><ol><li class="lvl-3"><p>作业需要先设计出保密通讯协议的过程和具体步骤；</p></li><li class="lvl-3"><p>分别编写A，B两个用户端的程序，写清楚两个程序分别要完成的功能，并能够在两个程序间进行通讯；</p></li><li class="lvl-3"><p>对AES加密的保密信息，要求采用CBC模式进行加密；</p></li><li class="lvl-3"><p>大作业的提交方式同实验报告的提交，也就是说既要提交程序实现的说明文档，也要提交源代码和可执行程序。</p></li></ol><p>占总成绩的70%</p><h2 id="预备工作">预备工作</h2><p>首先，你需要准备如下实验的代码，然后准备缝合：</p><ol><li class="lvl-3"><p>计网的实验一，socket双人聊天</p></li><li class="lvl-3"><p>AES代码</p></li><li class="lvl-3"><p>RSA代码</p></li></ol><p><em>ps: 如果你计网的实验一写的是多人聊天或者聊天室，恭喜你，写麻烦了，缝不进来</em></p><p>注意：也可以缝合计网实验3，实现加密文件传输，由于文件是二进制读取，而且是定长的，甚至会更加容易。</p><h2 id="过程讲解">过程讲解</h2><h3 id="socket双人聊天">socket双人聊天</h3><p>这一步就是计网lab1，关于原理、过程、代码细节不会的可以去看<a href="https://tephrocactushc.github.io/post/16eec244.html">我的计网实验一的blog</a>。已经会了的可以直接跳过。</p><h3 id="AES代码">AES代码</h3><p>可以使用赵梓杰的代码，但是小问题在于这份代码只能加密数字，无法直接处理字符串，因此需要自己添加字符串转换和补全的内容。</p><p>不过由于要求是CBC模式，因此需要去git上自己找一个写下来。下面是我用的一个参考代码，来源是csdn<a href="https://blog.csdn.net/lnfiniteloop/article/details/124863815?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167282336916800188567953%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=167282336916800188567953&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-124863815-null-null.142%5Ev68%5Epc_new_rank,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_control2&amp;utm_term=aes%20cbc&amp;spm=1018.2226.3001.4187">C语言 实现AES_CBC_128_ZeroPadding 加解密算法</a>下面给出便于缝合的代码</p><figure class="highlight c++"><figcaption><span>AES.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __AES_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __AES_H_</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define AESKEY&quot;71412E2299B0EEA5&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AESIV  <span class="string">&quot;71412E2299B0EEA5&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> DWORD;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> UCHAR,*PUCHAR;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">void</span> *PVOID,*LPVOID;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> byte;</span><br><span class="line"><span class="keyword">typedef</span> DWORD *PDWORD,*LPDWORD;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> VOID</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VOID void</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Bits12816</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Bits19224</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Bits25632</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AES_Init</span><span class="params">(<span class="type">int</span> keySize, <span class="type">unsigned</span> <span class="type">char</span>* keyBytes)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Cipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* input, <span class="type">unsigned</span> <span class="type">char</span>* output)</span></span>;  <span class="comment">// encipher 16-bit input</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InvCipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* input, <span class="type">unsigned</span> <span class="type">char</span>* output)</span></span>;  <span class="comment">// decipher 16-bit input</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetNbNkNr</span><span class="params">(<span class="type">int</span> keySize)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddRoundKey</span><span class="params">(<span class="type">int</span> round)</span></span>;      <span class="comment">//轮密钥加</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SubBytes</span><span class="params">(<span class="type">void</span>)</span></span>;                  <span class="comment">//S盒字节代换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InvSubBytes</span><span class="params">(<span class="type">void</span>)</span></span>;               <span class="comment">//逆S盒字节代换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShiftRows</span><span class="params">(<span class="type">void</span>)</span></span>;                 <span class="comment">//行移位</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InvShiftRows</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MixColumns</span><span class="params">(<span class="type">void</span>)</span></span>;                <span class="comment">//列混淆</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InvMixColumns</span><span class="params">(<span class="type">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span> <span class="title">gfmultby01</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span> <span class="title">gfmultby02</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span> <span class="title">gfmultby03</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span> <span class="title">gfmultby09</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span> <span class="title">gfmultby0b</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span> <span class="title">gfmultby0d</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span> <span class="title">gfmultby0e</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">KeyExpansion</span><span class="params">(<span class="type">void</span>)</span></span>;               <span class="comment">//密钥扩展</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span>* <span class="title">SubWord</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* word)</span></span>;         <span class="comment">//密钥S盒字代换</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span>* <span class="title">RotWord</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* word)</span></span>;         <span class="comment">//密钥移位</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">OnAesEncrypt</span><span class="params">(LPVOID InBuffer,DWORD InLength,LPVOID OutBuffer)</span></span>;<span class="comment">//AES 加密数据</span></span><br><span class="line"><span class="function">DWORD <span class="title">OnAesUncrypt</span><span class="params">(LPVOID InBuffer,DWORD InLength,LPVOID OutBuffer)</span></span>;<span class="comment">//AES 解密数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>AES.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AES.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Nb;         <span class="comment">// block size in 32-bit words.  Always 4 for AES.  (128 bits).</span></span><br><span class="line"><span class="type">int</span> Nk;         <span class="comment">// key size in 32-bit words.  4, 6, 8.  (128, 192, 256 bits).</span></span><br><span class="line"><span class="type">int</span> Nr;         <span class="comment">// number of rounds. 10, 12, 14.</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">32</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> w[<span class="number">16</span> * <span class="number">15</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> State[<span class="number">4</span>][<span class="number">4</span>];<span class="comment">// 状态矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// S盒</span></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> AesSbox[<span class="number">16</span> * <span class="number">16</span>]=</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="comment">// populate the Sbox matrix</span></span><br><span class="line">                <span class="comment">/* 0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f */</span></span><br><span class="line">                <span class="comment">/*0*/</span>  <span class="number">0x63</span>, <span class="number">0x7c</span>, <span class="number">0x77</span>, <span class="number">0x7b</span>, <span class="number">0xf2</span>, <span class="number">0x6b</span>, <span class="number">0x6f</span>, <span class="number">0xc5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2b</span>, <span class="number">0xfe</span>, <span class="number">0xd7</span>, <span class="number">0xab</span>, <span class="number">0x76</span>,</span><br><span class="line">                <span class="comment">/*1*/</span>  <span class="number">0xca</span>, <span class="number">0x82</span>, <span class="number">0xc9</span>, <span class="number">0x7d</span>, <span class="number">0xfa</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xf0</span>, <span class="number">0xad</span>, <span class="number">0xd4</span>, <span class="number">0xa2</span>, <span class="number">0xaf</span>, <span class="number">0x9c</span>, <span class="number">0xa4</span>, <span class="number">0x72</span>, <span class="number">0xc0</span>,</span><br><span class="line">                <span class="comment">/*2*/</span>  <span class="number">0xb7</span>, <span class="number">0xfd</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3f</span>, <span class="number">0xf7</span>, <span class="number">0xcc</span>, <span class="number">0x34</span>, <span class="number">0xa5</span>, <span class="number">0xe5</span>, <span class="number">0xf1</span>, <span class="number">0x71</span>, <span class="number">0xd8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">                <span class="comment">/*3*/</span>  <span class="number">0x04</span>, <span class="number">0xc7</span>, <span class="number">0x23</span>, <span class="number">0xc3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9a</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xe2</span>, <span class="number">0xeb</span>, <span class="number">0x27</span>, <span class="number">0xb2</span>, <span class="number">0x75</span>,</span><br><span class="line">                <span class="comment">/*4*/</span>  <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2c</span>, <span class="number">0x1a</span>, <span class="number">0x1b</span>, <span class="number">0x6e</span>, <span class="number">0x5a</span>, <span class="number">0xa0</span>, <span class="number">0x52</span>, <span class="number">0x3b</span>, <span class="number">0xd6</span>, <span class="number">0xb3</span>, <span class="number">0x29</span>, <span class="number">0xe3</span>, <span class="number">0x2f</span>, <span class="number">0x84</span>,</span><br><span class="line">                <span class="comment">/*5*/</span>  <span class="number">0x53</span>, <span class="number">0xd1</span>, <span class="number">0x00</span>, <span class="number">0xed</span>, <span class="number">0x20</span>, <span class="number">0xfc</span>, <span class="number">0xb1</span>, <span class="number">0x5b</span>, <span class="number">0x6a</span>, <span class="number">0xcb</span>, <span class="number">0xbe</span>, <span class="number">0x39</span>, <span class="number">0x4a</span>, <span class="number">0x4c</span>, <span class="number">0x58</span>, <span class="number">0xcf</span>,</span><br><span class="line">                <span class="comment">/*6*/</span>  <span class="number">0xd0</span>, <span class="number">0xef</span>, <span class="number">0xaa</span>, <span class="number">0xfb</span>, <span class="number">0x43</span>, <span class="number">0x4d</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xf9</span>, <span class="number">0x02</span>, <span class="number">0x7f</span>, <span class="number">0x50</span>, <span class="number">0x3c</span>, <span class="number">0x9f</span>, <span class="number">0xa8</span>,</span><br><span class="line">                <span class="comment">/*7*/</span>  <span class="number">0x51</span>, <span class="number">0xa3</span>, <span class="number">0x40</span>, <span class="number">0x8f</span>, <span class="number">0x92</span>, <span class="number">0x9d</span>, <span class="number">0x38</span>, <span class="number">0xf5</span>, <span class="number">0xbc</span>, <span class="number">0xb6</span>, <span class="number">0xda</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xff</span>, <span class="number">0xf3</span>, <span class="number">0xd2</span>,</span><br><span class="line">                <span class="comment">/*8*/</span>  <span class="number">0xcd</span>, <span class="number">0x0c</span>, <span class="number">0x13</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xc4</span>, <span class="number">0xa7</span>, <span class="number">0x7e</span>, <span class="number">0x3d</span>, <span class="number">0x64</span>, <span class="number">0x5d</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">                <span class="comment">/*9*/</span>  <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4f</span>, <span class="number">0xdc</span>, <span class="number">0x22</span>, <span class="number">0x2a</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xee</span>, <span class="number">0xb8</span>, <span class="number">0x14</span>, <span class="number">0xde</span>, <span class="number">0x5e</span>, <span class="number">0x0b</span>, <span class="number">0xdb</span>,</span><br><span class="line">                <span class="comment">/*a*/</span>  <span class="number">0xe0</span>, <span class="number">0x32</span>, <span class="number">0x3a</span>, <span class="number">0x0a</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5c</span>, <span class="number">0xc2</span>, <span class="number">0xd3</span>, <span class="number">0xac</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xe4</span>, <span class="number">0x79</span>,</span><br><span class="line">                <span class="comment">/*b*/</span>  <span class="number">0xe7</span>, <span class="number">0xc8</span>, <span class="number">0x37</span>, <span class="number">0x6d</span>, <span class="number">0x8d</span>, <span class="number">0xd5</span>, <span class="number">0x4e</span>, <span class="number">0xa9</span>, <span class="number">0x6c</span>, <span class="number">0x56</span>, <span class="number">0xf4</span>, <span class="number">0xea</span>, <span class="number">0x65</span>, <span class="number">0x7a</span>, <span class="number">0xae</span>, <span class="number">0x08</span>,</span><br><span class="line">                <span class="comment">/*c*/</span>  <span class="number">0xba</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2e</span>, <span class="number">0x1c</span>, <span class="number">0xa6</span>, <span class="number">0xb4</span>, <span class="number">0xc6</span>, <span class="number">0xe8</span>, <span class="number">0xdd</span>, <span class="number">0x74</span>, <span class="number">0x1f</span>, <span class="number">0x4b</span>, <span class="number">0xbd</span>, <span class="number">0x8b</span>, <span class="number">0x8a</span>,</span><br><span class="line">                <span class="comment">/*d*/</span>  <span class="number">0x70</span>, <span class="number">0x3e</span>, <span class="number">0xb5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xf6</span>, <span class="number">0x0e</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xb9</span>, <span class="number">0x86</span>, <span class="number">0xc1</span>, <span class="number">0x1d</span>, <span class="number">0x9e</span>,</span><br><span class="line">                <span class="comment">/*e*/</span>  <span class="number">0xe1</span>, <span class="number">0xf8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xd9</span>, <span class="number">0x8e</span>, <span class="number">0x94</span>, <span class="number">0x9b</span>, <span class="number">0x1e</span>, <span class="number">0x87</span>, <span class="number">0xe9</span>, <span class="number">0xce</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xdf</span>,</span><br><span class="line">                <span class="comment">/*f*/</span>  <span class="number">0x8c</span>, <span class="number">0xa1</span>, <span class="number">0x89</span>, <span class="number">0x0d</span>, <span class="number">0xbf</span>, <span class="number">0xe6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2d</span>, <span class="number">0x0f</span>, <span class="number">0xb0</span>, <span class="number">0x54</span>, <span class="number">0xbb</span>, <span class="number">0x16</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆S盒</span></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> AesiSbox[<span class="number">16</span> * <span class="number">16</span>]=</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="comment">// populate the iSbox matrix</span></span><br><span class="line">                <span class="comment">/* 0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f */</span></span><br><span class="line">                <span class="comment">/*0*/</span>  <span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6a</span>, <span class="number">0xd5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xa5</span>, <span class="number">0x38</span>, <span class="number">0xbf</span>, <span class="number">0x40</span>, <span class="number">0xa3</span>, <span class="number">0x9e</span>, <span class="number">0x81</span>, <span class="number">0xf3</span>, <span class="number">0xd7</span>, <span class="number">0xfb</span>,</span><br><span class="line">                <span class="comment">/*1*/</span>  <span class="number">0x7c</span>, <span class="number">0xe3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>, <span class="number">0x9b</span>, <span class="number">0x2f</span>, <span class="number">0xff</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8e</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xc4</span>, <span class="number">0xde</span>, <span class="number">0xe9</span>, <span class="number">0xcb</span>,</span><br><span class="line">                <span class="comment">/*2*/</span>  <span class="number">0x54</span>, <span class="number">0x7b</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xa6</span>, <span class="number">0xc2</span>, <span class="number">0x23</span>, <span class="number">0x3d</span>, <span class="number">0xee</span>, <span class="number">0x4c</span>, <span class="number">0x95</span>, <span class="number">0x0b</span>, <span class="number">0x42</span>, <span class="number">0xfa</span>, <span class="number">0xc3</span>, <span class="number">0x4e</span>,</span><br><span class="line">                <span class="comment">/*3*/</span>  <span class="number">0x08</span>, <span class="number">0x2e</span>, <span class="number">0xa1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xd9</span>, <span class="number">0x24</span>, <span class="number">0xb2</span>, <span class="number">0x76</span>, <span class="number">0x5b</span>, <span class="number">0xa2</span>, <span class="number">0x49</span>, <span class="number">0x6d</span>, <span class="number">0x8b</span>, <span class="number">0xd1</span>, <span class="number">0x25</span>,</span><br><span class="line">                <span class="comment">/*4*/</span>  <span class="number">0x72</span>, <span class="number">0xf8</span>, <span class="number">0xf6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xd4</span>, <span class="number">0xa4</span>, <span class="number">0x5c</span>, <span class="number">0xcc</span>, <span class="number">0x5d</span>, <span class="number">0x65</span>, <span class="number">0xb6</span>, <span class="number">0x92</span>,</span><br><span class="line">                <span class="comment">/*5*/</span>  <span class="number">0x6c</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xfd</span>, <span class="number">0xed</span>, <span class="number">0xb9</span>, <span class="number">0xda</span>, <span class="number">0x5e</span>, <span class="number">0x15</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xa7</span>, <span class="number">0x8d</span>, <span class="number">0x9d</span>, <span class="number">0x84</span>,</span><br><span class="line">                <span class="comment">/*6*/</span>  <span class="number">0x90</span>, <span class="number">0xd8</span>, <span class="number">0xab</span>, <span class="number">0x00</span>, <span class="number">0x8c</span>, <span class="number">0xbc</span>, <span class="number">0xd3</span>, <span class="number">0x0a</span>, <span class="number">0xf7</span>, <span class="number">0xe4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xb8</span>, <span class="number">0xb3</span>, <span class="number">0x45</span>, <span class="number">0x06</span>,</span><br><span class="line">                <span class="comment">/*7*/</span>  <span class="number">0xd0</span>, <span class="number">0x2c</span>, <span class="number">0x1e</span>, <span class="number">0x8f</span>, <span class="number">0xca</span>, <span class="number">0x3f</span>, <span class="number">0x0f</span>, <span class="number">0x02</span>, <span class="number">0xc1</span>, <span class="number">0xaf</span>, <span class="number">0xbd</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8a</span>, <span class="number">0x6b</span>,</span><br><span class="line">                <span class="comment">/*8*/</span>  <span class="number">0x3a</span>, <span class="number">0x91</span>, <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4f</span>, <span class="number">0x67</span>, <span class="number">0xdc</span>, <span class="number">0xea</span>, <span class="number">0x97</span>, <span class="number">0xf2</span>, <span class="number">0xcf</span>, <span class="number">0xce</span>, <span class="number">0xf0</span>, <span class="number">0xb4</span>, <span class="number">0xe6</span>, <span class="number">0x73</span>,</span><br><span class="line">                <span class="comment">/*9*/</span>  <span class="number">0x96</span>, <span class="number">0xac</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xe7</span>, <span class="number">0xad</span>, <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xe2</span>, <span class="number">0xf9</span>, <span class="number">0x37</span>, <span class="number">0xe8</span>, <span class="number">0x1c</span>, <span class="number">0x75</span>, <span class="number">0xdf</span>, <span class="number">0x6e</span>,</span><br><span class="line">                <span class="comment">/*a*/</span>  <span class="number">0x47</span>, <span class="number">0xf1</span>, <span class="number">0x1a</span>, <span class="number">0x71</span>, <span class="number">0x1d</span>, <span class="number">0x29</span>, <span class="number">0xc5</span>, <span class="number">0x89</span>, <span class="number">0x6f</span>, <span class="number">0xb7</span>, <span class="number">0x62</span>, <span class="number">0x0e</span>, <span class="number">0xaa</span>, <span class="number">0x18</span>, <span class="number">0xbe</span>, <span class="number">0x1b</span>,</span><br><span class="line">                <span class="comment">/*b*/</span>  <span class="number">0xfc</span>, <span class="number">0x56</span>, <span class="number">0x3e</span>, <span class="number">0x4b</span>, <span class="number">0xc6</span>, <span class="number">0xd2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9a</span>, <span class="number">0xdb</span>, <span class="number">0xc0</span>, <span class="number">0xfe</span>, <span class="number">0x78</span>, <span class="number">0xcd</span>, <span class="number">0x5a</span>, <span class="number">0xf4</span>,</span><br><span class="line">                <span class="comment">/*c*/</span>  <span class="number">0x1f</span>, <span class="number">0xdd</span>, <span class="number">0xa8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xc7</span>, <span class="number">0x31</span>, <span class="number">0xb1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>,</span><br><span class="line">                <span class="comment">/*d*/</span>  <span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x7f</span>, <span class="number">0xa9</span>, <span class="number">0x19</span>, <span class="number">0xb5</span>, <span class="number">0x4a</span>, <span class="number">0x0d</span>, <span class="number">0x2d</span>, <span class="number">0xe5</span>, <span class="number">0x7a</span>, <span class="number">0x9f</span>, <span class="number">0x93</span>, <span class="number">0xc9</span>, <span class="number">0x9c</span>, <span class="number">0xef</span>,</span><br><span class="line">                <span class="comment">/*e*/</span>  <span class="number">0xa0</span>, <span class="number">0xe0</span>, <span class="number">0x3b</span>, <span class="number">0x4d</span>, <span class="number">0xae</span>, <span class="number">0x2a</span>, <span class="number">0xf5</span>, <span class="number">0xb0</span>, <span class="number">0xc8</span>, <span class="number">0xeb</span>, <span class="number">0xbb</span>, <span class="number">0x3c</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>,</span><br><span class="line">                <span class="comment">/*f*/</span>  <span class="number">0x17</span>, <span class="number">0x2b</span>, <span class="number">0x04</span>, <span class="number">0x7e</span>, <span class="number">0xba</span>, <span class="number">0x77</span>, <span class="number">0xd6</span>, <span class="number">0x26</span>, <span class="number">0xe1</span>, <span class="number">0x69</span>, <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0c</span>, <span class="number">0x7d</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 轮常量</span></span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">char</span> AesRcon[<span class="number">11</span> * <span class="number">4</span>]=</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">                <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">                <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">                <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">                <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">                <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">                <span class="number">0x20</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">                <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">                <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">                <span class="number">0x1b</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">                <span class="number">0x36</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*** 设置密钥长度Nk（单位 ：Nb 个字节），轮数Nr，</span></span><br><span class="line"><span class="comment">***</span></span><br><span class="line"><span class="comment">*** 密钥的长度可以使用128位、192位或256位。密钥的长度不同，推荐加密轮数也不同</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetNbNkNr</span><span class="params">(<span class="type">int</span> keySize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Nb = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span>(keySize == Bits128)</span><br><span class="line">    &#123;</span><br><span class="line">        Nk = <span class="number">4</span>;    <span class="comment">//4*4字节，128位密钥，10轮加密</span></span><br><span class="line">        Nr = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(keySize == Bits192)</span><br><span class="line">    &#123;</span><br><span class="line">        Nk = <span class="number">6</span>;    <span class="comment">//6*4字节，192位密钥，12轮加密</span></span><br><span class="line">        Nr = <span class="number">12</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(keySize==Bits256)</span><br><span class="line">    &#123;</span><br><span class="line">        Nk = <span class="number">8</span>;    <span class="comment">//8*4字节，256位密钥，14轮加密</span></span><br><span class="line">        Nr = <span class="number">14</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*** 密钥扩展函数（作用：得到10轮子密钥）</span></span><br><span class="line"><span class="comment">***</span></span><br><span class="line"><span class="comment">***Nk 密钥长度 = 4 （单位：4字节）</span></span><br><span class="line"><span class="comment">***Nr 加密轮数 = 10</span></span><br><span class="line"><span class="comment">***</span></span><br><span class="line"><span class="comment">***初始的128位密钥 key[4 * 4字节] = k[0]  k[1]  k[2]  k[3]</span></span><br><span class="line"><span class="comment">***k[4]  k[5]  k[6]  k[7]</span></span><br><span class="line"><span class="comment">***k[8]  k[9]  k[10] k[11]</span></span><br><span class="line"><span class="comment">***k[12] k[13] k[14] k[15]</span></span><br><span class="line"><span class="comment">***</span></span><br><span class="line"><span class="comment">*** 扩展密钥W的初始值:</span></span><br><span class="line"><span class="comment">***   W0 = k[0]  k[1]  k[2]  k[3]</span></span><br><span class="line"><span class="comment">*** W1 = k[4]  k[5]  k[6]  k[7]</span></span><br><span class="line"><span class="comment">*** W2 = k[8]  k[9]  k[10] k[11]</span></span><br><span class="line"><span class="comment">*** W3 = k[12] k[13] k[14] k[15]</span></span><br><span class="line"><span class="comment">***</span></span><br><span class="line"><span class="comment">***注：Wi = w[4i] w[4i + 1] w[4i + 2] w[4i + 3]</span></span><br><span class="line"><span class="comment">***</span></span><br><span class="line"><span class="comment">*** 第0轮子密钥 ：W0  W1  W2  W3</span></span><br><span class="line"><span class="comment">*** 第1轮子密钥 ：W4  W5  W6  W7</span></span><br><span class="line"><span class="comment">*** 第2轮子密钥 ：W8  W9  W10 W11</span></span><br><span class="line"><span class="comment">*** 第3轮子密钥 ：W12 W13 W14 W15</span></span><br><span class="line"><span class="comment">*** 第4轮子密钥 ：W16 W17 W18 W19</span></span><br><span class="line"><span class="comment">*** 第5轮子密钥 ：W20 W21 W22 W23</span></span><br><span class="line"><span class="comment">*** 第6轮子密钥 ：W24 W25 W26 W27</span></span><br><span class="line"><span class="comment">*** 第7轮子密钥 ：W28 W29 W30 W31</span></span><br><span class="line"><span class="comment">*** 第8轮子密钥 ：W32 W33 W34 W35</span></span><br><span class="line"><span class="comment">*** 第9轮子密钥 ：W36 W37 W38 W39</span></span><br><span class="line"><span class="comment">*** 第10轮子密钥：W40 W41 W42 W43</span></span><br><span class="line"><span class="comment">***</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">KeyExpansion</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> row;</span><br><span class="line">    byte temp[<span class="number">4</span>];</span><br><span class="line">    byte *ret;</span><br><span class="line">    <span class="built_in">memset</span>(w, <span class="number">0</span>, <span class="number">16</span> * <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 扩展密钥初始值 W0 ~ W3</span></span><br><span class="line">    <span class="keyword">for</span>(row = <span class="number">0</span>; row &lt; Nk; row++)       <span class="comment">// 复制 key[0] ~ key[15] 到 W[0] ~ W[15]</span></span><br><span class="line">    &#123;</span><br><span class="line">        w[<span class="number">4</span> * row + <span class="number">0</span>] =  key[<span class="number">4</span> * row];</span><br><span class="line">        w[<span class="number">4</span> * row + <span class="number">1</span>] =  key[<span class="number">4</span> * row + <span class="number">1</span>];</span><br><span class="line">        w[<span class="number">4</span> * row + <span class="number">2</span>] =  key[<span class="number">4</span> * row + <span class="number">2</span>];</span><br><span class="line">        w[<span class="number">4</span> * row + <span class="number">3</span>] =  key[<span class="number">4</span> * row + <span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环 40 轮 当前计算轮数 i = row - 4</span></span><br><span class="line">    <span class="comment">// 第1轮： 输入  W0 W3输出 W4</span></span><br><span class="line">    <span class="comment">// 第2轮： 输入  W1 W4输出 W5</span></span><br><span class="line">    <span class="comment">// 第3轮： 输入  W2 W5输出 W6</span></span><br><span class="line">    <span class="comment">// 第4轮： 输入  W3 W6输出 W7</span></span><br><span class="line">    <span class="comment">// 第i轮： 输入  W(i - 1) W(i + 2)输出 W(i + 3)</span></span><br><span class="line">    <span class="comment">// 第40轮：输入  W39 W42 输出 W43</span></span><br><span class="line">    <span class="keyword">for</span>(row = Nk; row &lt; <span class="number">4</span> * (Nr + <span class="number">1</span>); row++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp[<span class="number">0</span>] = w[<span class="number">4</span> * row - <span class="number">4</span>];     <span class="comment">//当前列的前一列</span></span><br><span class="line">        temp[<span class="number">1</span>] = w[<span class="number">4</span> * row - <span class="number">3</span>];</span><br><span class="line">        temp[<span class="number">2</span>] = w[<span class="number">4</span> * row - <span class="number">2</span>];</span><br><span class="line">        temp[<span class="number">3</span>] = w[<span class="number">4</span> * row - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新列以如下的递归方式产生：</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 逢nk时，对当前列的前一列作特殊处理</span></span><br><span class="line">        <span class="comment">// 如果 row   是4的倍数，Wi = W(i-4) ⊕ T(W(i-1))  注：函数T由3部分组成：字循环、字节代换和轮常量异或</span></span><br><span class="line">        <span class="comment">// 如果 row 不是4的倍数，Wi = W(i-4) ⊕ W(i-1)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当 row 是4的倍数，计算 T(W(i-1))</span></span><br><span class="line">        <span class="keyword">if</span>(row % Nk == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 先 “字循环” RotWord 再 “字节代换” SubWord</span></span><br><span class="line">            ret = <span class="built_in">SubWord</span>(<span class="built_in">RotWord</span>(temp));</span><br><span class="line">            temp[<span class="number">0</span>] = ret[<span class="number">0</span>];</span><br><span class="line">            temp[<span class="number">1</span>] = ret[<span class="number">1</span>];</span><br><span class="line">            temp[<span class="number">2</span>] = ret[<span class="number">2</span>];</span><br><span class="line">            temp[<span class="number">3</span>] = ret[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// “轮常量异或” （将前两步的结果 和 轮常量AesRcon[j]进行异或，其中j表示轮数）</span></span><br><span class="line">            temp[<span class="number">0</span>] = (byte)((<span class="type">int</span>)temp[<span class="number">0</span>] ^ (<span class="type">int</span>) AesRcon[<span class="number">4</span> * (row / Nk) + <span class="number">0</span>]);</span><br><span class="line">            temp[<span class="number">1</span>] = (byte)((<span class="type">int</span>)temp[<span class="number">1</span>] ^ (<span class="type">int</span>) AesRcon[<span class="number">4</span> * (row / Nk) + <span class="number">1</span>]);</span><br><span class="line">            temp[<span class="number">2</span>] = (byte)((<span class="type">int</span>)temp[<span class="number">2</span>] ^ (<span class="type">int</span>) AesRcon[<span class="number">4</span> * (row / Nk) + <span class="number">2</span>]);</span><br><span class="line">            temp[<span class="number">3</span>] = (byte)((<span class="type">int</span>)temp[<span class="number">3</span>] ^ (<span class="type">int</span>) AesRcon[<span class="number">4</span> * (row / Nk) + <span class="number">3</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="comment">// 非 128位轮密钥K的情况</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Nk &gt; <span class="number">6</span> &amp;&amp; (row % Nk == <span class="number">4</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">            ret = <span class="built_in">SubWord</span>(temp);</span><br><span class="line">            temp[<span class="number">0</span>] = ret[<span class="number">0</span>];</span><br><span class="line">            temp[<span class="number">1</span>] = ret[<span class="number">1</span>];</span><br><span class="line">            temp[<span class="number">2</span>] = ret[<span class="number">2</span>];</span><br><span class="line">            temp[<span class="number">3</span>] = ret[<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        w[<span class="number">4</span> * row + <span class="number">0</span>] = (byte) ((<span class="type">int</span>) w[<span class="number">4</span> * (row - Nk) + <span class="number">0</span>] ^ (<span class="type">int</span>)temp[<span class="number">0</span>]);</span><br><span class="line">        w[<span class="number">4</span> * row + <span class="number">1</span>] = (byte) ((<span class="type">int</span>) w[<span class="number">4</span> * (row - Nk) + <span class="number">1</span>] ^ (<span class="type">int</span>)temp[<span class="number">1</span>]);</span><br><span class="line">        w[<span class="number">4</span> * row + <span class="number">2</span>] = (byte) ((<span class="type">int</span>) w[<span class="number">4</span> * (row - Nk) + <span class="number">2</span>] ^ (<span class="type">int</span>)temp[<span class="number">2</span>]);</span><br><span class="line">        w[<span class="number">4</span> * row + <span class="number">3</span>] = (byte) ((<span class="type">int</span>) w[<span class="number">4</span> * (row - Nk) + <span class="number">3</span>] ^ (<span class="type">int</span>)temp[<span class="number">3</span>]);</span><br><span class="line">    &#125;  <span class="comment">// for loop</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******密钥移位函数（字循环 函数）*****/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将1个字中的4个字节循环左移1个字节。</span></span><br><span class="line"><span class="comment">// 即将输入字[b0, b1, b2, b3]变换成[b1,b2,b3,b0]。</span></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span>*  <span class="title">RotWord</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> word[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> byte temp[<span class="number">4</span>];</span><br><span class="line">    temp[<span class="number">0</span>] = word[<span class="number">1</span>];</span><br><span class="line">    temp[<span class="number">1</span>] = word[<span class="number">2</span>];</span><br><span class="line">    temp[<span class="number">2</span>] = word[<span class="number">3</span>];</span><br><span class="line">    temp[<span class="number">3</span>] = word[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******密钥字代换函数*****/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//状态矩阵中的元素按照下面的方式映射为一个新的字节：</span></span><br><span class="line"><span class="comment">//把该字节的高4位作为行值，低4位作为列值，取出S盒或者逆S盒中对应的行的元素作为输出。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span>*  <span class="title">SubWord</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> word[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="type">static</span> byte temp[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp[j] = AesSbox[<span class="number">16</span> * (word[j] &gt;&gt; <span class="number">4</span>) + (word[j] &amp; <span class="number">0x0f</span>)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*** Aes加密函数 encrypt</span></span><br><span class="line"><span class="comment">***</span></span><br><span class="line"><span class="comment">*** 128位的输入明文分组State[4][4]</span></span><br><span class="line"><span class="comment">***</span></span><br><span class="line"><span class="comment">*** S0 S4 S8  S12      （单位：字节）</span></span><br><span class="line"><span class="comment">*** S1 S5 S9  S13</span></span><br><span class="line"><span class="comment">*** S2 S6 S10 S14</span></span><br><span class="line"><span class="comment">*** S3 S7 S11 S15</span></span><br><span class="line"><span class="comment">***</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Cipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* input, <span class="type">unsigned</span> <span class="type">char</span>* output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> round ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// State[4][4] = 128位的输入明文分组</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;State[<span class="number">0</span>][<span class="number">0</span>], <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span> * Nb; i++)                        <span class="comment">// 这里是先写列后写行的，即输入是一列一列的进来的</span></span><br><span class="line">    &#123;</span><br><span class="line">        State[i % <span class="number">4</span>][i / <span class="number">4</span>] = input[i]; <span class="comment">// 换成先写行后写列也是可以的，只要在输出时也是这样就可以了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环前进行一次轮密钥加</span></span><br><span class="line">    <span class="built_in">AddRoundKey</span>(<span class="number">0</span>);<span class="comment">//轮密钥加</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环 第1轮 ~ 第9轮</span></span><br><span class="line">    <span class="keyword">for</span>(round = <span class="number">1</span>; round &lt;= (Nr - <span class="number">1</span>); round++)  <span class="comment">// main round loop</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">SubBytes</span>();<span class="comment">//字节代换</span></span><br><span class="line">        <span class="built_in">ShiftRows</span>();<span class="comment">//行移位</span></span><br><span class="line">        <span class="built_in">MixColumns</span>();<span class="comment">//列混淆</span></span><br><span class="line">        <span class="built_in">AddRoundKey</span>(round);<span class="comment">//轮密钥加</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第10轮没有列混淆</span></span><br><span class="line">    <span class="built_in">SubBytes</span>();<span class="comment">//字节代换</span></span><br><span class="line">    <span class="built_in">ShiftRows</span>();<span class="comment">//行移位</span></span><br><span class="line">    <span class="built_in">AddRoundKey</span>(Nr);<span class="comment">//轮密钥加</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出密文 16字节</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; (<span class="number">4</span> * Nb); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        output[i] =  State[i % <span class="number">4</span>][ i / <span class="number">4</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*** Aes解密函数 decrypt</span></span><br><span class="line"><span class="comment">***</span></span><br><span class="line"><span class="comment">*** 128位的输入密文分组State[4][4]</span></span><br><span class="line"><span class="comment">***</span></span><br><span class="line"><span class="comment">*** S0 S4 S8  S12      （单位：字节）</span></span><br><span class="line"><span class="comment">*** S1 S5 S9  S13</span></span><br><span class="line"><span class="comment">*** S2 S6 S10 S14</span></span><br><span class="line"><span class="comment">*** S3 S7 S11 S15</span></span><br><span class="line"><span class="comment">***</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InvCipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* input, <span class="type">unsigned</span> <span class="type">char</span>* output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> round;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;State[<span class="number">0</span>][<span class="number">0</span>], <span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// State[4][4] = 128位的输入密文分组</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; (<span class="number">4</span> * Nb); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        State[i % <span class="number">4</span>][ i / <span class="number">4</span>] = input[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环前进行一次轮密钥加</span></span><br><span class="line">    <span class="built_in">AddRoundKey</span>(Nr);<span class="comment">//轮密钥加</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环 第9轮 ~ 第1轮</span></span><br><span class="line">    <span class="keyword">for</span>(round = Nr - <span class="number">1</span>; round &gt;= <span class="number">1</span>; round--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">InvShiftRows</span>();<span class="comment">// 逆行移位</span></span><br><span class="line">        <span class="built_in">InvSubBytes</span>();<span class="comment">// 逆字节代换</span></span><br><span class="line">        <span class="built_in">AddRoundKey</span>(round);<span class="comment">// 轮密钥加</span></span><br><span class="line">        <span class="built_in">InvMixColumns</span>();<span class="comment">// 逆列混合变换</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第0轮没有逆列混淆</span></span><br><span class="line">    <span class="built_in">InvShiftRows</span>();<span class="comment">// 逆行移位</span></span><br><span class="line">    <span class="built_in">InvSubBytes</span>();<span class="comment">// 逆字节代换</span></span><br><span class="line">    <span class="built_in">AddRoundKey</span>(<span class="number">0</span>);<span class="comment">// 轮密钥加</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出明文 16字节</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; (<span class="number">4</span> * Nb); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        output[i] =  State[i % <span class="number">4</span>][ i / <span class="number">4</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/****轮密钥加****/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据传入的轮数来把状态矩阵State[i][j]与相应的W[4 * ((round * 4) + j) + i]异或</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddRoundKey</span><span class="params">(<span class="type">int</span> round)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j;  <span class="comment">//i行 j列// 因为密钥W(x)是一列一列排列的，W(x) = w[4x+0] w[4x+1] w[4x+2] w[4x+3]</span></span><br><span class="line">    <span class="comment">// 即 w[4x+0]  w[4x+1] w[4x+2] w[4x+3]x = (round * 4) + j</span></span><br><span class="line">    <span class="comment">// k0   k4 k8 k12</span></span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)  <span class="comment">//k1  k5 k9 k13</span></span><br><span class="line">    &#123;  <span class="comment">//k2  k6 k10k14</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)  <span class="comment">//k3  k7 k11k15</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 所以i行j列的下标是4 * ((round * 4) + j) + i即16 * round + 4 * j+ i</span></span><br><span class="line">            State[i][j]=(<span class="type">unsigned</span> <span class="type">char</span>)((<span class="type">int</span>)State[i][j] ^ (<span class="type">int</span>)w[<span class="number">4</span> * ((round * <span class="number">4</span>) + j) + i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/****字节代换函数****/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 状态矩阵中的元素按照下面的方式映射为一个新的字节：把该字节的高4位作为行值，低4位作为列值，取出S盒或者逆S盒中对应的行的元素作为输出。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SubBytes</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            State[i][j] = AesSbox[State[i][j]];</span><br><span class="line">            <span class="comment">//因为 16 * (State[i][j] &gt;&gt; 4) + State[i][j] &amp; 0x0f = State[i][j]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/****逆字节代换函数****/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆字节代换也就是查逆S盒来变换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InvSubBytes</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            State[i][j] = AesiSbox[State[i][j]];</span><br><span class="line">            <span class="comment">//因为 16 * (State[i][j] &gt;&gt; 4) + State[i][j] &amp; 0x0f = State[i][j]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/****行移位函数****/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 行移位是一个简单的左循环移位操作。当密钥长度为128比特时，状态矩阵的第0行左移0字节，第1行左移1字节，第2行左移2字节，第3行左移3字节</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShiftRows</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp[<span class="number">4</span> * <span class="number">4</span>];</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp[<span class="number">4</span> * i + j] = State[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>)State[i][j] = temp[<span class="number">4</span> * i + (j + <span class="number">1</span>) % <span class="number">4</span>];<span class="comment">//第一行左移1位</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">2</span>)State[i][j] = temp[<span class="number">4</span> * i + (j + <span class="number">2</span>) % <span class="number">4</span>];<span class="comment">//第二行左移2位</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">3</span>)State[i][j] = temp[<span class="number">4</span> * i + (j + <span class="number">3</span>) % <span class="number">4</span>];<span class="comment">//第三行左移3位</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/****逆行移位函数****/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆行移位是一个简单的右循环移位操作。当密钥长度为128比特时，状态矩阵的第0行右移0字节，第1行右移1字节，第2行右移2字节，第3行右移3字节</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InvShiftRows</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp[<span class="number">4</span> * <span class="number">4</span>];</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp[<span class="number">4</span> * i + j] = State[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1</span>)State[i][j] = temp[<span class="number">4</span> * i + (j + <span class="number">3</span>) % <span class="number">4</span>];<span class="comment">//第一行右移1位 j-1+4=j+3</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">2</span>)State[i][j] = temp[<span class="number">4</span> * i + (j + <span class="number">2</span>) % <span class="number">4</span>];<span class="comment">//第二行右移2位 j-2+4=j+2</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i == <span class="number">3</span>)State[i][j] = temp[<span class="number">4</span> * i + (j + <span class="number">1</span>) % <span class="number">4</span>];<span class="comment">//第三行右移3位 j-3+4=j+2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/****列混合变换函数*****/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 列混合变换是通过矩阵相乘来实现的，经行移位后的状态矩阵与固定的矩阵相乘，得到混淆后的状态矩阵</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MixColumns</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp[<span class="number">4</span> * <span class="number">4</span>];</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp[<span class="number">4</span> * i + j] = State[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        State[<span class="number">0</span>][j] = (<span class="type">unsigned</span> <span class="type">char</span>) ((<span class="type">int</span>)<span class="built_in">gfmultby02</span>(temp[<span class="number">0</span> + j]) ^ (<span class="type">int</span>)<span class="built_in">gfmultby03</span>(temp[<span class="number">4</span> * <span class="number">1</span> + j]) ^</span><br><span class="line">                                       (<span class="type">int</span>)<span class="built_in">gfmultby01</span>(temp[<span class="number">4</span> * <span class="number">2</span> + j]) ^ (<span class="type">int</span>)<span class="built_in">gfmultby01</span>(temp[<span class="number">4</span> * <span class="number">3</span> + j]) );</span><br><span class="line">        State[<span class="number">1</span>][j] = (<span class="type">unsigned</span> <span class="type">char</span>) ((<span class="type">int</span>)<span class="built_in">gfmultby01</span>(temp[<span class="number">0</span> + j]) ^ (<span class="type">int</span>)<span class="built_in">gfmultby02</span>(temp[<span class="number">4</span> * <span class="number">1</span> + j]) ^</span><br><span class="line">                                       (<span class="type">int</span>)<span class="built_in">gfmultby03</span>(temp[<span class="number">4</span> * <span class="number">2</span> + j]) ^ (<span class="type">int</span>)<span class="built_in">gfmultby01</span>(temp[<span class="number">4</span> * <span class="number">3</span> + j]) );</span><br><span class="line">        State[<span class="number">2</span>][j] = (<span class="type">unsigned</span> <span class="type">char</span>) ((<span class="type">int</span>)<span class="built_in">gfmultby01</span>(temp[<span class="number">0</span> + j]) ^ (<span class="type">int</span>)<span class="built_in">gfmultby01</span>(temp[<span class="number">4</span> * <span class="number">1</span> + j]) ^</span><br><span class="line">                                       (<span class="type">int</span>)<span class="built_in">gfmultby02</span>(temp[<span class="number">4</span> * <span class="number">2</span> + j]) ^ (<span class="type">int</span>)<span class="built_in">gfmultby03</span>(temp[<span class="number">4</span> * <span class="number">3</span> + j]) );</span><br><span class="line">        State[<span class="number">3</span>][j] = (<span class="type">unsigned</span> <span class="type">char</span>) ((<span class="type">int</span>)<span class="built_in">gfmultby03</span>(temp[<span class="number">0</span> + j]) ^ (<span class="type">int</span>)<span class="built_in">gfmultby01</span>(temp[<span class="number">4</span> * <span class="number">1</span> + j]) ^</span><br><span class="line">                                       (<span class="type">int</span>)<span class="built_in">gfmultby01</span>(temp[<span class="number">4</span> * <span class="number">2</span> + j]) ^ (<span class="type">int</span>)<span class="built_in">gfmultby02</span>(temp[<span class="number">4</span> * <span class="number">3</span> + j]) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/****逆列混合变换函数*****/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆变换矩阵同正变换矩阵的乘积恰好为单位矩阵</span></span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">InvMixColumns</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> temp[<span class="number">4</span> * <span class="number">4</span>];</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp[<span class="number">4</span> * i + j] =  State[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        State[<span class="number">0</span>][j] = (<span class="type">unsigned</span> <span class="type">char</span>) ( (<span class="type">int</span>)<span class="built_in">gfmultby0e</span>(temp[j]) ^ (<span class="type">int</span>)<span class="built_in">gfmultby0b</span>(temp[<span class="number">4</span> + j]) ^</span><br><span class="line">                                        (<span class="type">int</span>)<span class="built_in">gfmultby0d</span>(temp[<span class="number">4</span> * <span class="number">2</span> + j]) ^ (<span class="type">int</span>)<span class="built_in">gfmultby09</span>(temp[<span class="number">4</span> * <span class="number">3</span> + j]) );</span><br><span class="line">        State[<span class="number">1</span>][j] = (<span class="type">unsigned</span> <span class="type">char</span>) ( (<span class="type">int</span>)<span class="built_in">gfmultby09</span>(temp[j]) ^ (<span class="type">int</span>)<span class="built_in">gfmultby0e</span>(temp[<span class="number">4</span> + j]) ^</span><br><span class="line">                                        (<span class="type">int</span>)<span class="built_in">gfmultby0b</span>(temp[<span class="number">4</span> * <span class="number">2</span> + j]) ^ (<span class="type">int</span>)<span class="built_in">gfmultby0d</span>(temp[<span class="number">4</span> * <span class="number">3</span> + j]) );</span><br><span class="line">        State[<span class="number">2</span>][j] = (<span class="type">unsigned</span> <span class="type">char</span>) ( (<span class="type">int</span>)<span class="built_in">gfmultby0d</span>(temp[j]) ^ (<span class="type">int</span>)<span class="built_in">gfmultby09</span>(temp[<span class="number">4</span> + j]) ^</span><br><span class="line">                                        (<span class="type">int</span>)<span class="built_in">gfmultby0e</span>(temp[<span class="number">4</span> * <span class="number">2</span> + j]) ^ (<span class="type">int</span>)<span class="built_in">gfmultby0b</span>(temp[<span class="number">4</span> * <span class="number">3</span> + j]) );</span><br><span class="line">        State[<span class="number">3</span>][j] = (<span class="type">unsigned</span> <span class="type">char</span>) ( (<span class="type">int</span>)<span class="built_in">gfmultby0b</span>(temp[j]) ^ (<span class="type">int</span>)<span class="built_in">gfmultby0d</span>(temp[<span class="number">4</span> + j]) ^</span><br><span class="line">                                        (<span class="type">int</span>)<span class="built_in">gfmultby09</span>(temp[<span class="number">4</span> * <span class="number">2</span> + j]) ^ (<span class="type">int</span>)<span class="built_in">gfmultby0e</span>(temp[<span class="number">4</span> * <span class="number">3</span> + j]) );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span> <span class="title">gfmultby01</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span> <span class="title">gfmultby02</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b &lt; <span class="number">0x80</span>)</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">char</span>)(<span class="type">int</span>)(b &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">return</span> (<span class="type">unsigned</span> <span class="type">char</span>)((<span class="type">int</span>)(b &lt;&lt; <span class="number">1</span>) ^ (<span class="type">int</span>)(<span class="number">0x1b</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span> <span class="title">gfmultby03</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">char</span>) ((<span class="type">int</span>)<span class="built_in">gfmultby02</span>(b) ^ (<span class="type">int</span>)b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span> <span class="title">gfmultby09</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">char</span>)((<span class="type">int</span>)<span class="built_in">gfmultby02</span>(<span class="built_in">gfmultby02</span>(<span class="built_in">gfmultby02</span>(b))) ^ (<span class="type">int</span>)b );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span> <span class="title">gfmultby0b</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">char</span>)((<span class="type">int</span>)<span class="built_in">gfmultby02</span>(<span class="built_in">gfmultby02</span>(<span class="built_in">gfmultby02</span>(b))) ^</span><br><span class="line">                           (<span class="type">int</span>)<span class="built_in">gfmultby02</span>(b) ^ (<span class="type">int</span>)b );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span> <span class="title">gfmultby0d</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">char</span>)((<span class="type">int</span>)<span class="built_in">gfmultby02</span>(<span class="built_in">gfmultby02</span>(<span class="built_in">gfmultby02</span>(b))) ^</span><br><span class="line">                           (<span class="type">int</span>)<span class="built_in">gfmultby02</span>(<span class="built_in">gfmultby02</span>(b)) ^ (<span class="type">int</span>)(b) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">char</span> <span class="title">gfmultby0e</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">char</span>)((<span class="type">int</span>)<span class="built_in">gfmultby02</span>(<span class="built_in">gfmultby02</span>(<span class="built_in">gfmultby02</span>(b))) ^</span><br><span class="line">                           (<span class="type">int</span>)<span class="built_in">gfmultby02</span>(<span class="built_in">gfmultby02</span>(b)) ^(<span class="type">int</span>)<span class="built_in">gfmultby02</span>(b) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 函数名称：AES_Init</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 函数描述：初始化AES 密钥，密钥用于加密解密</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 调用参数：keysize 待加解密文长度（单位：字节）    keyBytes： 待加解密文</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 返回数值：无</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AES_Init</span><span class="params">(<span class="type">int</span> keysize, <span class="type">unsigned</span> <span class="type">char</span>* keyBytes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">SetNbNkNr</span>(keysize);                         <span class="comment">//设置密钥长度，轮数</span></span><br><span class="line">    <span class="built_in">memcpy</span>(key, keyBytes, keysize);<span class="comment">//字符串拷贝函数，把keyBytes的keysize个字符复制到key中</span></span><br><span class="line">    <span class="built_in">KeyExpansion</span>();<span class="comment">//密钥扩展，必须提前做的初始化</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 函数名称：OnAesEncrypt</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 函数描述：用AES加密算法加密数据</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 调用参数：InBuffer： 待加密明文，InLength：待加密明文的长度， OutBuffer：加密后的密文</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 返回数值：加密后的数据大小 ，错误返回值  0</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD <span class="title">OnAesEncrypt</span><span class="params">(LPVOID InBuffer, DWORD InLength, LPVOID OutBuffer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD OutLength = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> j;</span><br><span class="line">    <span class="type">long</span> i;</span><br><span class="line"></span><br><span class="line">    UCHAR *lpCurInBuff  = (UCHAR *)InBuffer;<span class="comment">// 输入的明文</span></span><br><span class="line">    UCHAR *lpCurOutBuff = (UCHAR *)OutBuffer;<span class="comment">// 输出的密文</span></span><br><span class="line">    <span class="type">long</span> blocknum = InLength / <span class="number">16</span>;</span><br><span class="line">    <span class="type">long</span> leftnum = InLength % <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    UCHAR iv[<span class="number">20</span>] = AESIV;<span class="comment">// 获取初始 IV 向量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/******加密前面能被16字节整除的明文长度******/</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; blocknum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++ )</span><br><span class="line">        &#123;</span><br><span class="line">            lpCurOutBuff[j] = (<span class="type">unsigned</span> <span class="type">char</span>)(lpCurInBuff[j] ^ iv[j]);<span class="comment">// 将 明文 与 IV向量 进行异或</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Cipher</span>(lpCurOutBuff, lpCurOutBuff);<span class="comment">// 对处理过的明文进行加密</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">memcpy</span>(iv, lpCurOutBuff, <span class="number">16</span>);<span class="comment">// 将上一段16字节明文加密后的密文作为下一次加密操作的IV向量</span></span><br><span class="line"></span><br><span class="line">        lpCurInBuff+=<span class="number">16</span>;</span><br><span class="line">        lpCurOutBuff+=<span class="number">16</span>;</span><br><span class="line">        OutLength+=<span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*****填充明文扩展区，再进行加密操作******/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 情况1：待加密明文长度不能被16整除的部分，以0补足16字节</span></span><br><span class="line">    <span class="keyword">if</span>(leftnum)</span><br><span class="line">    &#123;</span><br><span class="line">        UCHAR inbuff[<span class="number">16</span>];</span><br><span class="line">        <span class="built_in">memset</span>(inbuff, <span class="number">0</span>, <span class="number">16</span>);<span class="comment">// WJ 填充模式：0</span></span><br><span class="line">        <span class="built_in">memcpy</span>(inbuff, lpCurInBuff, leftnum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++ )</span><br><span class="line">        &#123;</span><br><span class="line">            lpCurOutBuff[j] = (<span class="type">unsigned</span> <span class="type">char</span>)( inbuff[j] ^ iv[j] );<span class="comment">// 将 明文 与 IV向量 进行异或</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Cipher</span>(lpCurOutBuff, lpCurOutBuff);<span class="comment">// Aes加密</span></span><br><span class="line"></span><br><span class="line">        lpCurOutBuff+=<span class="number">16</span>;</span><br><span class="line">        OutLength+=<span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 情况2：待加密明文长度能被16整除，直接新增16个字节，填充值为0</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//新增16个字节，用以确定增加的字节数</span></span><br><span class="line">        UCHAR extrabuff[<span class="number">16</span>];</span><br><span class="line">        <span class="built_in">memset</span>(extrabuff, <span class="number">0</span>, <span class="number">16</span>);<span class="comment">// WJ 填充模式：0 2022/5/18</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++ )</span><br><span class="line">        &#123;</span><br><span class="line">            lpCurOutBuff[j] = (<span class="type">unsigned</span> <span class="type">char</span>)( extrabuff[j] ^ iv[j] );<span class="comment">// 将 明文 与 IV向量 进行异或</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Cipher</span>(lpCurOutBuff, lpCurOutBuff);<span class="comment">// Aes加密</span></span><br><span class="line"></span><br><span class="line">        OutLength+=<span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OutLength;<span class="comment">// 输出加密后的密文长度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// 函数名称：OnAesUncrypt</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 函数描述：用AES加密算法解密数据</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 调用参数：InBuffer： 待解密密文，InLength：待解密密文的长度， OutBuffer：解密后的明文</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 返回数值：解密后的数据大小 ，错误返回值  0</span></span><br><span class="line"><span class="comment">//------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function">DWORD <span class="title">OnAesUncrypt</span><span class="params">(LPVOID InBuffer, DWORD InLength, LPVOID OutBuffer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DWORD OutLength = <span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> blocknum = InLength / <span class="number">16</span>;</span><br><span class="line">    <span class="type">long</span> leftnum = InLength % <span class="number">16</span>;</span><br><span class="line">    <span class="type">long</span> j;</span><br><span class="line">    <span class="type">long</span> i;</span><br><span class="line"><span class="comment">//unsigned char temp[16];</span></span><br><span class="line">    UCHAR iv[<span class="number">20</span>] = AESIV;<span class="comment">// 获取初始 IV 向量</span></span><br><span class="line"></span><br><span class="line">    UCHAR *lpCurInBuff = (UCHAR *)InBuffer;</span><br><span class="line">    UCHAR *lpCurOutBuff = (UCHAR *)OutBuffer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 密文长度必须为16的倍数，否则解密失败</span></span><br><span class="line">    <span class="keyword">if</span>(leftnum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/******循环blocknum次，每次解密16字节长度的密文******/</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; blocknum; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">InvCipher</span>(lpCurInBuff, lpCurOutBuff);<span class="comment">// Aes解密</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++ )</span><br><span class="line">        &#123;</span><br><span class="line">            lpCurOutBuff[j] = (<span class="type">unsigned</span> <span class="type">char</span>)(lpCurOutBuff[j] ^ iv[j]);<span class="comment">// 将 密文 与 IV向量 进行异或</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memcpy</span>(iv, lpCurInBuff, <span class="number">16</span>);<span class="comment">// 将上一段16字节解密前的密文作为下一次解密操作的IV向量</span></span><br><span class="line"></span><br><span class="line">        lpCurInBuff+=<span class="number">16</span>;</span><br><span class="line">        lpCurOutBuff+=<span class="number">16</span>;</span><br><span class="line">        OutLength+=<span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> OutLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>main.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AES.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">uint8_t</span> InBuff[<span class="number">1024</span>];</span><br><span class="line"><span class="type">uint8_t</span> OutBuff[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> AesLen_Byte;</span><br><span class="line"></span><br><span class="line"><span class="type">uint16_t</span> OutLength;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> BUF_SIZE=<span class="number">1024</span>;</span><br><span class="line"><span class="type">char</span> sendBuf[BUF_SIZE];<span class="comment">//发送缓冲区</span></span><br><span class="line"><span class="type">char</span> inputBuf[BUF_SIZE]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">uint8_t</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//std::string msg;</span></span><br><span class="line">    <span class="comment">//std::cin&gt;&gt;msg;</span></span><br><span class="line">    <span class="comment">//char FileBuff[ msg.length()+1];</span></span><br><span class="line">    cin.<span class="built_in">getline</span>(inputBuf, <span class="number">1024</span>, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(sendBuf, inputBuf);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;changdu:&quot;</span>&lt;&lt;<span class="built_in">strlen</span>(sendBuf)&lt;&lt;endl;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    msg.copy(FileBuff, msg.length(), 0);//这里5代表复制几个字符，0代表复制的位置，</span></span><br><span class="line"><span class="comment">    *(FileBuff+msg.length())=&#x27;\0&#x27;;//注意手动加结束符！！！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    std::string AESKEY=<span class="string">&quot;IMNKUPSL20011227&quot;</span>;</span><br><span class="line">    <span class="built_in">AES_Init</span>(<span class="number">16</span>, (<span class="type">unsigned</span> <span class="type">char</span>*)AESKEY.<span class="built_in">c_str</span>());<span class="comment">// 设置AES密钥长度为4 * 4 = 16字节(16 * 8 = 128位) ，密钥初始值为 AESKEY</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//加密</span></span><br><span class="line"></span><br><span class="line">    OutLength = <span class="built_in">OnAesEncrypt</span>(sendBuf, <span class="built_in">strlen</span>(sendBuf), OutBuff);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;changdu:&quot;</span>&lt;&lt;<span class="built_in">strlen</span>(sendBuf)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;changduhou:&quot;</span>&lt;&lt;OutLength&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加密后： &quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; OutLength; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %02x &quot;</span>, OutBuff[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout&lt;&lt;std::endl;</span><br><span class="line">    <span class="comment">//解密</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输出:&quot;</span>&lt;&lt;OutBuff;</span><br><span class="line">    <span class="built_in">memcpy</span>(InBuff, OutBuff, OutLength);</span><br><span class="line"></span><br><span class="line">    OutLength = <span class="built_in">OnAesUncrypt</span>(InBuff, OutLength, OutBuff);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解密后：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; OutLength; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, OutBuff[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="RSA代码">RSA代码</h3><p>考虑到大多数人都是抄袭的16级信安法巨神周子祎流传下来的代码（赵梓杰抄的那份），那希望大家看懂，原理去看他们的报告即可。 <strong>注意，需要自己封装一下。</strong></p><p>下面给出我对于RSA的一些封装工作，如下所示</p><figure class="highlight c++"><figcaption><span>BigInt.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//存放一些已知的素数，用于之后的初步检测</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> prime[] = &#123; <span class="number">3</span>,    <span class="number">5</span>,    <span class="number">7</span>,    <span class="number">11</span>,   <span class="number">13</span>,   <span class="number">17</span>,   <span class="number">19</span>,   <span class="number">23</span>,   <span class="number">29</span>,   <span class="number">31</span>,</span><br><span class="line">                       <span class="number">37</span>,   <span class="number">41</span>,   <span class="number">43</span>,   <span class="number">47</span>,   <span class="number">53</span>,   <span class="number">59</span>,   <span class="number">61</span>,   <span class="number">67</span>,   <span class="number">71</span>,   <span class="number">73</span>,</span><br><span class="line">                       <span class="number">79</span>,   <span class="number">83</span>,   <span class="number">89</span>,   <span class="number">97</span>,   <span class="number">101</span>,  <span class="number">103</span>,  <span class="number">107</span>,  <span class="number">109</span>,  <span class="number">113</span>,  <span class="number">127</span>,</span><br><span class="line">                       <span class="number">131</span>,  <span class="number">137</span>,  <span class="number">139</span>,  <span class="number">149</span>,  <span class="number">151</span>,  <span class="number">157</span>,  <span class="number">163</span>,  <span class="number">167</span>,  <span class="number">173</span>,  <span class="number">179</span>,</span><br><span class="line">                       <span class="number">181</span>,  <span class="number">191</span>,  <span class="number">193</span>,  <span class="number">197</span>,  <span class="number">199</span>,  <span class="number">211</span>,  <span class="number">223</span>,  <span class="number">227</span>,  <span class="number">229</span>,  <span class="number">233</span>,</span><br><span class="line">                       <span class="number">239</span>,  <span class="number">241</span>,  <span class="number">251</span>,  <span class="number">257</span>,  <span class="number">263</span>,  <span class="number">269</span>,  <span class="number">271</span>,  <span class="number">277</span>,  <span class="number">281</span>,  <span class="number">283</span>,</span><br><span class="line">                       <span class="number">293</span>,  <span class="number">307</span>,  <span class="number">311</span>,  <span class="number">313</span>,  <span class="number">317</span>,  <span class="number">331</span>,  <span class="number">337</span>,  <span class="number">347</span>,  <span class="number">349</span>,  <span class="number">353</span>,</span><br><span class="line">                       <span class="number">359</span>,  <span class="number">367</span>,  <span class="number">373</span>,  <span class="number">379</span>,  <span class="number">383</span>,  <span class="number">389</span>,  <span class="number">397</span>,  <span class="number">401</span>,  <span class="number">409</span>,  <span class="number">419</span>,</span><br><span class="line">                       <span class="number">421</span>,  <span class="number">431</span>,  <span class="number">433</span>,  <span class="number">439</span>,  <span class="number">443</span>,  <span class="number">449</span>,  <span class="number">457</span>,  <span class="number">461</span>,  <span class="number">463</span>,  <span class="number">467</span>,</span><br><span class="line">                       <span class="number">479</span>,  <span class="number">487</span>,  <span class="number">491</span>,  <span class="number">499</span>,  <span class="number">503</span>,  <span class="number">509</span>,  <span class="number">521</span>,  <span class="number">523</span>,  <span class="number">541</span>,  <span class="number">547</span>,</span><br><span class="line">                       <span class="number">557</span>,  <span class="number">563</span>,  <span class="number">569</span>,  <span class="number">571</span>,  <span class="number">577</span>,  <span class="number">587</span>,  <span class="number">593</span>,  <span class="number">599</span>,  <span class="number">601</span>,  <span class="number">607</span>,</span><br><span class="line">                       <span class="number">613</span>,  <span class="number">617</span>,  <span class="number">619</span>,  <span class="number">631</span>,  <span class="number">641</span>,  <span class="number">643</span>,  <span class="number">647</span>,  <span class="number">653</span>,  <span class="number">659</span>,  <span class="number">661</span>,</span><br><span class="line">                       <span class="number">673</span>,  <span class="number">677</span>,  <span class="number">683</span>,  <span class="number">691</span>,  <span class="number">701</span>,  <span class="number">709</span>,  <span class="number">719</span>,  <span class="number">727</span>,  <span class="number">733</span>,  <span class="number">739</span>,</span><br><span class="line">                       <span class="number">743</span>,  <span class="number">751</span>,  <span class="number">757</span>,  <span class="number">761</span>,  <span class="number">769</span>,  <span class="number">773</span>,  <span class="number">787</span>,  <span class="number">797</span>,  <span class="number">809</span>,  <span class="number">811</span>,</span><br><span class="line">                       <span class="number">821</span>,  <span class="number">823</span>,  <span class="number">827</span>,  <span class="number">829</span>,  <span class="number">839</span>,  <span class="number">853</span>,  <span class="number">857</span>,  <span class="number">859</span>,  <span class="number">863</span>,  <span class="number">877</span>,</span><br><span class="line">                       <span class="number">881</span>,  <span class="number">883</span>,  <span class="number">887</span>,  <span class="number">907</span>,  <span class="number">911</span>,  <span class="number">919</span>,  <span class="number">929</span>,  <span class="number">937</span>,  <span class="number">941</span>,  <span class="number">947</span>,</span><br><span class="line">                       <span class="number">953</span>,  <span class="number">967</span>,  <span class="number">971</span>,  <span class="number">977</span>,  <span class="number">983</span>,  <span class="number">991</span>,  <span class="number">997</span>,  <span class="number">1009</span>, <span class="number">1013</span>, <span class="number">1019</span>,</span><br><span class="line">                       <span class="number">1021</span>, <span class="number">1031</span>, <span class="number">1033</span>, <span class="number">1039</span>, <span class="number">1049</span>, <span class="number">1051</span>, <span class="number">1061</span>, <span class="number">1063</span>, <span class="number">1069</span>, <span class="number">1087</span>,</span><br><span class="line">                       <span class="number">1091</span>, <span class="number">1093</span>, <span class="number">1097</span>, <span class="number">1103</span>, <span class="number">1109</span>, <span class="number">1117</span>, <span class="number">1123</span>, <span class="number">1129</span>, <span class="number">1151</span>, <span class="number">1153</span>,</span><br><span class="line">                       <span class="number">1163</span>, <span class="number">1171</span>, <span class="number">1181</span>, <span class="number">1187</span>, <span class="number">1193</span>, <span class="number">1201</span>, <span class="number">1213</span>, <span class="number">1217</span>, <span class="number">1223</span>, <span class="number">1229</span>,</span><br><span class="line">                       <span class="number">1231</span>, <span class="number">1237</span>, <span class="number">1249</span>, <span class="number">1259</span>, <span class="number">1277</span>, <span class="number">1279</span>, <span class="number">1283</span>, <span class="number">1289</span>, <span class="number">1291</span>, <span class="number">1297</span>,</span><br><span class="line">                       <span class="number">1301</span>, <span class="number">1303</span>, <span class="number">1307</span>, <span class="number">1319</span>, <span class="number">1321</span>, <span class="number">1327</span>, <span class="number">1361</span>, <span class="number">1367</span>, <span class="number">1373</span>, <span class="number">1381</span>,</span><br><span class="line">                       <span class="number">1399</span>, <span class="number">1409</span>, <span class="number">1423</span>, <span class="number">1427</span>, <span class="number">1429</span>, <span class="number">1433</span>, <span class="number">1439</span>, <span class="number">1447</span>, <span class="number">1451</span>, <span class="number">1453</span>,</span><br><span class="line">                       <span class="number">1459</span>, <span class="number">1471</span>, <span class="number">1481</span>, <span class="number">1483</span>, <span class="number">1487</span>, <span class="number">1489</span>, <span class="number">1493</span>, <span class="number">1499</span>, <span class="number">1511</span>, <span class="number">1523</span>,</span><br><span class="line">                       <span class="number">1531</span>, <span class="number">1543</span>, <span class="number">1549</span>, <span class="number">1553</span>, <span class="number">1559</span>, <span class="number">1567</span>, <span class="number">1571</span>, <span class="number">1579</span>, <span class="number">1583</span>, <span class="number">1597</span>,</span><br><span class="line">                       <span class="number">1601</span>, <span class="number">1607</span>, <span class="number">1609</span>, <span class="number">1613</span>, <span class="number">1619</span>, <span class="number">1621</span>, <span class="number">1627</span>, <span class="number">1637</span>, <span class="number">1657</span>, <span class="number">1663</span>,</span><br><span class="line">                       <span class="number">1667</span>, <span class="number">1669</span>, <span class="number">1693</span>, <span class="number">1697</span>, <span class="number">1699</span>, <span class="number">1709</span>, <span class="number">1721</span>, <span class="number">1723</span>, <span class="number">1733</span>, <span class="number">1741</span>,</span><br><span class="line">                       <span class="number">1747</span>, <span class="number">1753</span>, <span class="number">1759</span>, <span class="number">1777</span>, <span class="number">1783</span>, <span class="number">1787</span>, <span class="number">1789</span>, <span class="number">1801</span>, <span class="number">1811</span>, <span class="number">1823</span>,</span><br><span class="line">                       <span class="number">1831</span>, <span class="number">1847</span>, <span class="number">1861</span>, <span class="number">1867</span>, <span class="number">1871</span>, <span class="number">1873</span>, <span class="number">1877</span>, <span class="number">1879</span>, <span class="number">1889</span>, <span class="number">1901</span>,</span><br><span class="line">                       <span class="number">1907</span>, <span class="number">1913</span>, <span class="number">1931</span>, <span class="number">1933</span>, <span class="number">1949</span>, <span class="number">1951</span>, <span class="number">1973</span>, <span class="number">1979</span>, <span class="number">1987</span>, <span class="number">1993</span>,</span><br><span class="line">                       <span class="number">1997</span>, <span class="number">1999</span>, <span class="number">2003</span>, <span class="number">2011</span>, <span class="number">2017</span>, <span class="number">2027</span>, <span class="number">2029</span>, <span class="number">2039</span>, <span class="number">2053</span>, <span class="number">2063</span>,</span><br><span class="line">                       <span class="number">2069</span>, <span class="number">2081</span>, <span class="number">2083</span>, <span class="number">2087</span>, <span class="number">2089</span>, <span class="number">2099</span>, <span class="number">2111</span>, <span class="number">2113</span>, <span class="number">2129</span>, <span class="number">2131</span>,</span><br><span class="line">                       <span class="number">2137</span>, <span class="number">2141</span>, <span class="number">2143</span>, <span class="number">2153</span>, <span class="number">2161</span>, <span class="number">2179</span>, <span class="number">2203</span>, <span class="number">2207</span>, <span class="number">2213</span>, <span class="number">2221</span>,</span><br><span class="line">                       <span class="number">2237</span>, <span class="number">2239</span>, <span class="number">2243</span>, <span class="number">2251</span>, <span class="number">2267</span>, <span class="number">2269</span>, <span class="number">2273</span>, <span class="number">2281</span>, <span class="number">2287</span>, <span class="number">2293</span>,</span><br><span class="line">                       <span class="number">2297</span>, <span class="number">2309</span>, <span class="number">2311</span>, <span class="number">2333</span>, <span class="number">2339</span>, <span class="number">2341</span>, <span class="number">2347</span>, <span class="number">2351</span>, <span class="number">2357</span>, <span class="number">2371</span>,</span><br><span class="line">                       <span class="number">2377</span>, <span class="number">2381</span>, <span class="number">2383</span>, <span class="number">2389</span>, <span class="number">2393</span>, <span class="number">2399</span>, <span class="number">2411</span>, <span class="number">2417</span>, <span class="number">2423</span>, <span class="number">2437</span>,</span><br><span class="line">                       <span class="number">2441</span>, <span class="number">2447</span>, <span class="number">2459</span>, <span class="number">2467</span>, <span class="number">2473</span>, <span class="number">2477</span>, <span class="number">2503</span>, <span class="number">2521</span>, <span class="number">2531</span>, <span class="number">2539</span>,</span><br><span class="line">                       <span class="number">2543</span>, <span class="number">2549</span>, <span class="number">2551</span>, <span class="number">2557</span>, <span class="number">2579</span>, <span class="number">2591</span>, <span class="number">2593</span>, <span class="number">2609</span>, <span class="number">2617</span>, <span class="number">2621</span>,</span><br><span class="line">                       <span class="number">2633</span>, <span class="number">2647</span>, <span class="number">2657</span>, <span class="number">2659</span>, <span class="number">2663</span>, <span class="number">2671</span>, <span class="number">2677</span>, <span class="number">2683</span>, <span class="number">2687</span>, <span class="number">2689</span>,</span><br><span class="line">                       <span class="number">2693</span>, <span class="number">2699</span>, <span class="number">2707</span>, <span class="number">2711</span>, <span class="number">2713</span>, <span class="number">2719</span>, <span class="number">2729</span>, <span class="number">2731</span>, <span class="number">2741</span>, <span class="number">2749</span>,</span><br><span class="line">                       <span class="number">2753</span>, <span class="number">2767</span>, <span class="number">2777</span>, <span class="number">2789</span>, <span class="number">2791</span>, <span class="number">2797</span>, <span class="number">2801</span>, <span class="number">2803</span>, <span class="number">2819</span>, <span class="number">2833</span>,</span><br><span class="line">                       <span class="number">2837</span>, <span class="number">2843</span>, <span class="number">2851</span>, <span class="number">2857</span>, <span class="number">2861</span>, <span class="number">2879</span>, <span class="number">2887</span>, <span class="number">2897</span>, <span class="number">2903</span>, <span class="number">2909</span>,</span><br><span class="line">                       <span class="number">2917</span>, <span class="number">2927</span>, <span class="number">2939</span>, <span class="number">2953</span>, <span class="number">2957</span>, <span class="number">2963</span>, <span class="number">2969</span>, <span class="number">2971</span>, <span class="number">2999</span>, <span class="number">3001</span>,</span><br><span class="line">                       <span class="number">3011</span>, <span class="number">3019</span>, <span class="number">3023</span>, <span class="number">3037</span>, <span class="number">3041</span>, <span class="number">3049</span>, <span class="number">3061</span>, <span class="number">3067</span>, <span class="number">3079</span>, <span class="number">3083</span>,</span><br><span class="line">                       <span class="number">3089</span>, <span class="number">3109</span>, <span class="number">3119</span>, <span class="number">3121</span>, <span class="number">3137</span>, <span class="number">3163</span>, <span class="number">3167</span>, <span class="number">3169</span>, <span class="number">3181</span>, <span class="number">3187</span>,</span><br><span class="line">                       <span class="number">3191</span>, <span class="number">3203</span>, <span class="number">3209</span>, <span class="number">3217</span>, <span class="number">3221</span>, <span class="number">3229</span>, <span class="number">3251</span>, <span class="number">3253</span>, <span class="number">3257</span>, <span class="number">3259</span>,</span><br><span class="line">                       <span class="number">3271</span>, <span class="number">3299</span>, <span class="number">3301</span>, <span class="number">3307</span>, <span class="number">3313</span>, <span class="number">3319</span>, <span class="number">3323</span>, <span class="number">3329</span>, <span class="number">3331</span>, <span class="number">3343</span>,</span><br><span class="line">                       <span class="number">3347</span>, <span class="number">3359</span>, <span class="number">3361</span>, <span class="number">3371</span>, <span class="number">3373</span>, <span class="number">3389</span>, <span class="number">3391</span>, <span class="number">3407</span>, <span class="number">3413</span>, <span class="number">3433</span>,</span><br><span class="line">                       <span class="number">3449</span>, <span class="number">3457</span>, <span class="number">3461</span>, <span class="number">3463</span>, <span class="number">3467</span>, <span class="number">3469</span>, <span class="number">3491</span>, <span class="number">3499</span>, <span class="number">3511</span>, <span class="number">3517</span>,</span><br><span class="line">                       <span class="number">3527</span>, <span class="number">3529</span>, <span class="number">3533</span>, <span class="number">3539</span>, <span class="number">3541</span>, <span class="number">3547</span>, <span class="number">3557</span>, <span class="number">3559</span>, <span class="number">3571</span>, <span class="number">3581</span>,</span><br><span class="line">                       <span class="number">3583</span>, <span class="number">3593</span>, <span class="number">3607</span>, <span class="number">3613</span>, <span class="number">3617</span>, <span class="number">3623</span>, <span class="number">3631</span>, <span class="number">3637</span>, <span class="number">3643</span>, <span class="number">3659</span>,</span><br><span class="line">                       <span class="number">3671</span>, <span class="number">3673</span>, <span class="number">3677</span>, <span class="number">3691</span>, <span class="number">3697</span>, <span class="number">3701</span>, <span class="number">3709</span>, <span class="number">3719</span>, <span class="number">3727</span>, <span class="number">3733</span>,</span><br><span class="line">                       <span class="number">3739</span>, <span class="number">3761</span>, <span class="number">3767</span>, <span class="number">3769</span>, <span class="number">3779</span>, <span class="number">3793</span>, <span class="number">3797</span>, <span class="number">3803</span>, <span class="number">3821</span>, <span class="number">3823</span>,</span><br><span class="line">                       <span class="number">3833</span>, <span class="number">3847</span>, <span class="number">3851</span>, <span class="number">3853</span>, <span class="number">3863</span>, <span class="number">3877</span>, <span class="number">3881</span>, <span class="number">3889</span>, <span class="number">3907</span>, <span class="number">3911</span>,</span><br><span class="line">                       <span class="number">3917</span>, <span class="number">3919</span>, <span class="number">3923</span>, <span class="number">3929</span>, <span class="number">3931</span>, <span class="number">3943</span>, <span class="number">3947</span>, <span class="number">3967</span>, <span class="number">3989</span>, <span class="number">4001</span>,</span><br><span class="line">                       <span class="number">4003</span>, <span class="number">4007</span>, <span class="number">4013</span>, <span class="number">4019</span>, <span class="number">4021</span>, <span class="number">4027</span>, <span class="number">4049</span>, <span class="number">4051</span>, <span class="number">4057</span>, <span class="number">4073</span>,</span><br><span class="line">                       <span class="number">4079</span>, <span class="number">4091</span>, <span class="number">4093</span>, <span class="number">4099</span>, <span class="number">4111</span>, <span class="number">4127</span>, <span class="number">4129</span>, <span class="number">4133</span>, <span class="number">4139</span>, <span class="number">4153</span>,</span><br><span class="line">                       <span class="number">4157</span>, <span class="number">4159</span>, <span class="number">4177</span>, <span class="number">4201</span>, <span class="number">4211</span>, <span class="number">4217</span>, <span class="number">4219</span>, <span class="number">4229</span>, <span class="number">4231</span>, <span class="number">4241</span>,</span><br><span class="line">                       <span class="number">4243</span>, <span class="number">4253</span>, <span class="number">4259</span>, <span class="number">4261</span>, <span class="number">4271</span>, <span class="number">4273</span>, <span class="number">4283</span>, <span class="number">4289</span>, <span class="number">4297</span>, <span class="number">4327</span>,</span><br><span class="line">                       <span class="number">4337</span>, <span class="number">4339</span>, <span class="number">4349</span>, <span class="number">4357</span>, <span class="number">4363</span>, <span class="number">4373</span>, <span class="number">4391</span>, <span class="number">4397</span>, <span class="number">4409</span>, <span class="number">4421</span>,</span><br><span class="line">                       <span class="number">4423</span>, <span class="number">4441</span>, <span class="number">4447</span>, <span class="number">4451</span>, <span class="number">4457</span>, <span class="number">4463</span>, <span class="number">4481</span>, <span class="number">4483</span>, <span class="number">4493</span>, <span class="number">4507</span>,</span><br><span class="line">                       <span class="number">4513</span>, <span class="number">4517</span>, <span class="number">4519</span>, <span class="number">4523</span>, <span class="number">4547</span>, <span class="number">4549</span>, <span class="number">4561</span>, <span class="number">4567</span>, <span class="number">4583</span>, <span class="number">4591</span>,</span><br><span class="line">                       <span class="number">4597</span>, <span class="number">4603</span>, <span class="number">4621</span>, <span class="number">4637</span>, <span class="number">4639</span>, <span class="number">4643</span>, <span class="number">4649</span>, <span class="number">4651</span>, <span class="number">4657</span>, <span class="number">4663</span>,</span><br><span class="line">                       <span class="number">4673</span>, <span class="number">4679</span>, <span class="number">4691</span>, <span class="number">4703</span>, <span class="number">4721</span>, <span class="number">4723</span>, <span class="number">4729</span>, <span class="number">4733</span>, <span class="number">4751</span>, <span class="number">4759</span>,</span><br><span class="line">                       <span class="number">4783</span>, <span class="number">4787</span>, <span class="number">4789</span>, <span class="number">4793</span>, <span class="number">4799</span>, <span class="number">4801</span>, <span class="number">4813</span>, <span class="number">4817</span>, <span class="number">4831</span>, <span class="number">4861</span>,</span><br><span class="line">                       <span class="number">4871</span>, <span class="number">4877</span>, <span class="number">4889</span>, <span class="number">4903</span>, <span class="number">4909</span>, <span class="number">4919</span>, <span class="number">4931</span>, <span class="number">4933</span>, <span class="number">4937</span>, <span class="number">4943</span>,</span><br><span class="line">                       <span class="number">4951</span>, <span class="number">4957</span>, <span class="number">4967</span>, <span class="number">4969</span>, <span class="number">4973</span>, <span class="number">4987</span>, <span class="number">4993</span>, <span class="number">4999</span> , <span class="number">5003</span>, <span class="number">5009</span>,</span><br><span class="line">                       <span class="number">5011</span>, <span class="number">5021</span>, <span class="number">5023</span>, <span class="number">5039</span>, <span class="number">5051</span>, <span class="number">5059</span>, <span class="number">5077</span>, <span class="number">5081</span>, <span class="number">5087</span>, <span class="number">5099</span>,</span><br><span class="line">                       <span class="number">5101</span>, <span class="number">5107</span>, <span class="number">5113</span>, <span class="number">5119</span>, <span class="number">5147</span>, <span class="number">5153</span>, <span class="number">5167</span>, <span class="number">5171</span>, <span class="number">5179</span>, <span class="number">5189</span>,</span><br><span class="line">                       <span class="number">5197</span>, <span class="number">5209</span>, <span class="number">5227</span>, <span class="number">5231</span>, <span class="number">5233</span>, <span class="number">5237</span>, <span class="number">5261</span>, <span class="number">5273</span>, <span class="number">5279</span>, <span class="number">5281</span>,</span><br><span class="line">                       <span class="number">5297</span>, <span class="number">5303</span>, <span class="number">5309</span>, <span class="number">5323</span>, <span class="number">5333</span>, <span class="number">5347</span>, <span class="number">5351</span>, <span class="number">5381</span>, <span class="number">5387</span>, <span class="number">5393</span>,</span><br><span class="line">                       <span class="number">5399</span>, <span class="number">5407</span>, <span class="number">5413</span>, <span class="number">5417</span>, <span class="number">5419</span>, <span class="number">5431</span>, <span class="number">5437</span>, <span class="number">5441</span>, <span class="number">5443</span>, <span class="number">5449</span>,</span><br><span class="line">                       <span class="number">5471</span>, <span class="number">5477</span>, <span class="number">5479</span>, <span class="number">5483</span>, <span class="number">5501</span>, <span class="number">5503</span>, <span class="number">5507</span>, <span class="number">5519</span>, <span class="number">5521</span>, <span class="number">5527</span>,</span><br><span class="line">                       <span class="number">5531</span>, <span class="number">5557</span>, <span class="number">5563</span>, <span class="number">5569</span>, <span class="number">5573</span>, <span class="number">5581</span>, <span class="number">5591</span>, <span class="number">5623</span>, <span class="number">5639</span>, <span class="number">5641</span>,</span><br><span class="line">                       <span class="number">5647</span>, <span class="number">5651</span>, <span class="number">5653</span>, <span class="number">5657</span>, <span class="number">5659</span>, <span class="number">5669</span>, <span class="number">5683</span>, <span class="number">5689</span>, <span class="number">5693</span>, <span class="number">5701</span>,</span><br><span class="line">                       <span class="number">5711</span>, <span class="number">5717</span>, <span class="number">5737</span>, <span class="number">5741</span>, <span class="number">5743</span>, <span class="number">5749</span>, <span class="number">5779</span>, <span class="number">5783</span>, <span class="number">5791</span>, <span class="number">5801</span>,</span><br><span class="line">                       <span class="number">5807</span>, <span class="number">5813</span>, <span class="number">5821</span>, <span class="number">5827</span>, <span class="number">5839</span>, <span class="number">5843</span>, <span class="number">5849</span>, <span class="number">5851</span>, <span class="number">5857</span>, <span class="number">5861</span>,</span><br><span class="line">                       <span class="number">5867</span>, <span class="number">5869</span>, <span class="number">5879</span>, <span class="number">5881</span>, <span class="number">5897</span>, <span class="number">5903</span>, <span class="number">5923</span>, <span class="number">5927</span>, <span class="number">5939</span>, <span class="number">5953</span>,</span><br><span class="line">                       <span class="number">5981</span>, <span class="number">5987</span>, <span class="number">6007</span>, <span class="number">6011</span>, <span class="number">6029</span>, <span class="number">6037</span>, <span class="number">6043</span>, <span class="number">6047</span>, <span class="number">6053</span>, <span class="number">6067</span>,</span><br><span class="line">                       <span class="number">6073</span>, <span class="number">6079</span>, <span class="number">6089</span>, <span class="number">6091</span>, <span class="number">6101</span>, <span class="number">6113</span>, <span class="number">6121</span>, <span class="number">6131</span>, <span class="number">6133</span>, <span class="number">6143</span>,</span><br><span class="line">                       <span class="number">6151</span>, <span class="number">6163</span>, <span class="number">6173</span>, <span class="number">6197</span>, <span class="number">6199</span>, <span class="number">6203</span>, <span class="number">6211</span>, <span class="number">6217</span>, <span class="number">6221</span>, <span class="number">6229</span>,</span><br><span class="line">                       <span class="number">6247</span>, <span class="number">6257</span>, <span class="number">6263</span>, <span class="number">6269</span>, <span class="number">6271</span>, <span class="number">6277</span>, <span class="number">6287</span>, <span class="number">6299</span>, <span class="number">6301</span>, <span class="number">6311</span>,</span><br><span class="line">                       <span class="number">6317</span>, <span class="number">6323</span>, <span class="number">6329</span>, <span class="number">6337</span>, <span class="number">6343</span>, <span class="number">6353</span>, <span class="number">6359</span>, <span class="number">6361</span>, <span class="number">6367</span>, <span class="number">6373</span>,</span><br><span class="line">                       <span class="number">6379</span>, <span class="number">6389</span>, <span class="number">6397</span>, <span class="number">6421</span>, <span class="number">6427</span>, <span class="number">6449</span>, <span class="number">6451</span>, <span class="number">6469</span>, <span class="number">6473</span>, <span class="number">6481</span>,</span><br><span class="line">                       <span class="number">6491</span>, <span class="number">6521</span>, <span class="number">6529</span>, <span class="number">6547</span>, <span class="number">6551</span>, <span class="number">6553</span>, <span class="number">6563</span>, <span class="number">6569</span>, <span class="number">6571</span>, <span class="number">6577</span>,</span><br><span class="line">                       <span class="number">6581</span>, <span class="number">6599</span>, <span class="number">6607</span>, <span class="number">6619</span>, <span class="number">6637</span>, <span class="number">6653</span>, <span class="number">6659</span>, <span class="number">6661</span>, <span class="number">6673</span>, <span class="number">6679</span>,</span><br><span class="line">                       <span class="number">6689</span>, <span class="number">6691</span>, <span class="number">6701</span>, <span class="number">6703</span>, <span class="number">6709</span>, <span class="number">6719</span>, <span class="number">6733</span>, <span class="number">6737</span>, <span class="number">6761</span>, <span class="number">6763</span>,</span><br><span class="line">                       <span class="number">6779</span>, <span class="number">6781</span>, <span class="number">6791</span>, <span class="number">6793</span>, <span class="number">6803</span>, <span class="number">6823</span>, <span class="number">6827</span>, <span class="number">6829</span>, <span class="number">6833</span>, <span class="number">6841</span>,</span><br><span class="line">                       <span class="number">6857</span>, <span class="number">6863</span>, <span class="number">6869</span>, <span class="number">6871</span>, <span class="number">6883</span>, <span class="number">6899</span>, <span class="number">6907</span>, <span class="number">6911</span>, <span class="number">6917</span>, <span class="number">6947</span>,</span><br><span class="line">                       <span class="number">6949</span>, <span class="number">6959</span>, <span class="number">6961</span>, <span class="number">6967</span>, <span class="number">6971</span>, <span class="number">6977</span>, <span class="number">6983</span>, <span class="number">6991</span>, <span class="number">6997</span>, <span class="number">7001</span>,</span><br><span class="line">                       <span class="number">7013</span>, <span class="number">7019</span>, <span class="number">7027</span>, <span class="number">7039</span>, <span class="number">7043</span>, <span class="number">7057</span>, <span class="number">7069</span>, <span class="number">7079</span>, <span class="number">7103</span>, <span class="number">7109</span>,</span><br><span class="line">                       <span class="number">7121</span>, <span class="number">7127</span>, <span class="number">7129</span>, <span class="number">7151</span>, <span class="number">7159</span>, <span class="number">7177</span>, <span class="number">7187</span>, <span class="number">7193</span>, <span class="number">7207</span>, <span class="number">7211</span>,</span><br><span class="line">                       <span class="number">7213</span>, <span class="number">7219</span>, <span class="number">7229</span>, <span class="number">7237</span>, <span class="number">7243</span>, <span class="number">7247</span>, <span class="number">7253</span>, <span class="number">7283</span>, <span class="number">7297</span>, <span class="number">7307</span>,</span><br><span class="line">                       <span class="number">7309</span>, <span class="number">7321</span>, <span class="number">7331</span>, <span class="number">7333</span>, <span class="number">7349</span>, <span class="number">7351</span>, <span class="number">7369</span>, <span class="number">7393</span>, <span class="number">7411</span>, <span class="number">7417</span>,</span><br><span class="line">                       <span class="number">7433</span>, <span class="number">7451</span>, <span class="number">7457</span>, <span class="number">7459</span>, <span class="number">7477</span>, <span class="number">7481</span>, <span class="number">7487</span>, <span class="number">7489</span>, <span class="number">7499</span>, <span class="number">7507</span>,</span><br><span class="line">                       <span class="number">7517</span>, <span class="number">7523</span>, <span class="number">7529</span>, <span class="number">7537</span>, <span class="number">7541</span>, <span class="number">7547</span>, <span class="number">7549</span>, <span class="number">7559</span>, <span class="number">7561</span>, <span class="number">7573</span>,</span><br><span class="line">                       <span class="number">7577</span>, <span class="number">7583</span>, <span class="number">7589</span>, <span class="number">7591</span>, <span class="number">7603</span>, <span class="number">7607</span>, <span class="number">7621</span>, <span class="number">7639</span>, <span class="number">7643</span>, <span class="number">7649</span>,</span><br><span class="line">                       <span class="number">7669</span>, <span class="number">7673</span>, <span class="number">7681</span>, <span class="number">7687</span>, <span class="number">7691</span>, <span class="number">7699</span>, <span class="number">7703</span>, <span class="number">7717</span>, <span class="number">7723</span>, <span class="number">7727</span>,</span><br><span class="line">                       <span class="number">7741</span>, <span class="number">7753</span>, <span class="number">7757</span>, <span class="number">7759</span>, <span class="number">7789</span>, <span class="number">7793</span>, <span class="number">7817</span>, <span class="number">7823</span>, <span class="number">7829</span>, <span class="number">7841</span>,</span><br><span class="line">                       <span class="number">7853</span>, <span class="number">7867</span>, <span class="number">7873</span>, <span class="number">7877</span>, <span class="number">7879</span>, <span class="number">7883</span>, <span class="number">7901</span>, <span class="number">7907</span>, <span class="number">7919</span>, <span class="number">7927</span>,</span><br><span class="line">                       <span class="number">7933</span>, <span class="number">7937</span>, <span class="number">7949</span>, <span class="number">7951</span>, <span class="number">7963</span>, <span class="number">7993</span>, <span class="number">8009</span>, <span class="number">8011</span>, <span class="number">8017</span>, <span class="number">8039</span>,</span><br><span class="line">                       <span class="number">8053</span>, <span class="number">8059</span>, <span class="number">8069</span>, <span class="number">8081</span>, <span class="number">8087</span>, <span class="number">8089</span>, <span class="number">8093</span>, <span class="number">8101</span>, <span class="number">8111</span>, <span class="number">8117</span>,</span><br><span class="line">                       <span class="number">8123</span>, <span class="number">8147</span>, <span class="number">8161</span>, <span class="number">8167</span>, <span class="number">8171</span>, <span class="number">8179</span>, <span class="number">8191</span>, <span class="number">8209</span>, <span class="number">8219</span>, <span class="number">8221</span>,</span><br><span class="line">                       <span class="number">8231</span>, <span class="number">8233</span>, <span class="number">8237</span>, <span class="number">8243</span>, <span class="number">8263</span>, <span class="number">8269</span>, <span class="number">8273</span>, <span class="number">8287</span>, <span class="number">8291</span>, <span class="number">8293</span>,</span><br><span class="line">                       <span class="number">8297</span>, <span class="number">8311</span>, <span class="number">8317</span>, <span class="number">8329</span>, <span class="number">8353</span>, <span class="number">8363</span>, <span class="number">8369</span>, <span class="number">8377</span>, <span class="number">8387</span>, <span class="number">8389</span>,</span><br><span class="line">                       <span class="number">8419</span>, <span class="number">8423</span>, <span class="number">8429</span>, <span class="number">8431</span>, <span class="number">8443</span>, <span class="number">8447</span>, <span class="number">8461</span>, <span class="number">8467</span>, <span class="number">8501</span>, <span class="number">8513</span>,</span><br><span class="line">                       <span class="number">8521</span>, <span class="number">8527</span>, <span class="number">8537</span>, <span class="number">8539</span>, <span class="number">8543</span>, <span class="number">8563</span>, <span class="number">8573</span>, <span class="number">8581</span>, <span class="number">8597</span>, <span class="number">8599</span>,</span><br><span class="line">                       <span class="number">8609</span>, <span class="number">8623</span>, <span class="number">8627</span>, <span class="number">8629</span>, <span class="number">8641</span>, <span class="number">8647</span>, <span class="number">8663</span>, <span class="number">8669</span>, <span class="number">8677</span>, <span class="number">8681</span>,</span><br><span class="line">                       <span class="number">8689</span>, <span class="number">8693</span>, <span class="number">8699</span>, <span class="number">8707</span>, <span class="number">8713</span>, <span class="number">8719</span>, <span class="number">8731</span>, <span class="number">8737</span>, <span class="number">8741</span>, <span class="number">8747</span>,</span><br><span class="line">                       <span class="number">8753</span>, <span class="number">8761</span>, <span class="number">8779</span>, <span class="number">8783</span>, <span class="number">8803</span>, <span class="number">8807</span>, <span class="number">8819</span>, <span class="number">8821</span>, <span class="number">8831</span>, <span class="number">8837</span>,</span><br><span class="line">                       <span class="number">8839</span>, <span class="number">8849</span>, <span class="number">8861</span>, <span class="number">8863</span>, <span class="number">8867</span>, <span class="number">8887</span>, <span class="number">8893</span>, <span class="number">8923</span>, <span class="number">8929</span>, <span class="number">8933</span>,</span><br><span class="line">                       <span class="number">8941</span>, <span class="number">8951</span>, <span class="number">8963</span>, <span class="number">8969</span>, <span class="number">8971</span>, <span class="number">8999</span>, <span class="number">9001</span>, <span class="number">9007</span>, <span class="number">9011</span>, <span class="number">9013</span>,</span><br><span class="line">                       <span class="number">9029</span>, <span class="number">9041</span>, <span class="number">9043</span>, <span class="number">9049</span>, <span class="number">9059</span>, <span class="number">9067</span>, <span class="number">9091</span>, <span class="number">9103</span>, <span class="number">9109</span>, <span class="number">9127</span>,</span><br><span class="line">                       <span class="number">9133</span>, <span class="number">9137</span>, <span class="number">9151</span>, <span class="number">9157</span>, <span class="number">9161</span>, <span class="number">9173</span>, <span class="number">9181</span>, <span class="number">9187</span>, <span class="number">9199</span>, <span class="number">9203</span>,</span><br><span class="line">                       <span class="number">9209</span>, <span class="number">9221</span>, <span class="number">9227</span>, <span class="number">9239</span>, <span class="number">9241</span>, <span class="number">9257</span>, <span class="number">9277</span>, <span class="number">9281</span>, <span class="number">9283</span>, <span class="number">9293</span>,</span><br><span class="line">                       <span class="number">9311</span>, <span class="number">9319</span>, <span class="number">9323</span>, <span class="number">9337</span>, <span class="number">9341</span>, <span class="number">9343</span>, <span class="number">9349</span>, <span class="number">9371</span>, <span class="number">9377</span>, <span class="number">9391</span>,</span><br><span class="line">                       <span class="number">9397</span>, <span class="number">9403</span>, <span class="number">9413</span>, <span class="number">9419</span>, <span class="number">9421</span>, <span class="number">9431</span>, <span class="number">9433</span>, <span class="number">9437</span>, <span class="number">9439</span>, <span class="number">9461</span>,</span><br><span class="line">                       <span class="number">9463</span>, <span class="number">9467</span>, <span class="number">9473</span>, <span class="number">9479</span>, <span class="number">9491</span>, <span class="number">9497</span>, <span class="number">9511</span>, <span class="number">9521</span>, <span class="number">9533</span>, <span class="number">9539</span>,</span><br><span class="line">                       <span class="number">9547</span>, <span class="number">9551</span>, <span class="number">9587</span>, <span class="number">9601</span>, <span class="number">9613</span>, <span class="number">9619</span>, <span class="number">9623</span>, <span class="number">9629</span>, <span class="number">9631</span>, <span class="number">9643</span>,</span><br><span class="line">                       <span class="number">9649</span>, <span class="number">9661</span>, <span class="number">9677</span>, <span class="number">9679</span>, <span class="number">9689</span>, <span class="number">9697</span>, <span class="number">9719</span>, <span class="number">9721</span>, <span class="number">9733</span>, <span class="number">9739</span>,</span><br><span class="line">                       <span class="number">9743</span>, <span class="number">9749</span>, <span class="number">9767</span>, <span class="number">9769</span>, <span class="number">9781</span>, <span class="number">9787</span>, <span class="number">9791</span>, <span class="number">9803</span>, <span class="number">9811</span>, <span class="number">9817</span>,</span><br><span class="line">                       <span class="number">9829</span>, <span class="number">9833</span>, <span class="number">9839</span>, <span class="number">9851</span>, <span class="number">9857</span>, <span class="number">9859</span>, <span class="number">9871</span>, <span class="number">9883</span>, <span class="number">9887</span>, <span class="number">9901</span>,</span><br><span class="line">                       <span class="number">9907</span>, <span class="number">9923</span>, <span class="number">9929</span>, <span class="number">9931</span>, <span class="number">9941</span>, <span class="number">9949</span>, <span class="number">9967</span>, <span class="number">9973</span>, <span class="number">10007</span>,<span class="number">10009</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">int</span> BIsize = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BigInt</span> &#123;</span><br><span class="line">    <span class="comment">// 重载运算符</span></span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span>+ (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> BigInt&amp;);</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span>- (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> BigInt&amp;);</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span>- (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> <span class="type">int</span>&amp;);</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span>* (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> BigInt&amp;);</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span>% (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> BigInt&amp;);</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span>/ (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> BigInt&amp;);</span><br><span class="line">    <span class="keyword">friend</span> BigInt <span class="keyword">operator</span>* (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span>&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> BigInt&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> BigInt&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>&lt;= (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> <span class="type">int</span>&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>== (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> BigInt&amp;);</span><br><span class="line">    <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span>== (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> <span class="type">int</span>&amp;);</span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp;, <span class="type">const</span> BigInt&amp;);</span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt; (istream&amp;, BigInt&amp;);</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> BigInt <span class="title">PowerMode</span><span class="params">(<span class="type">const</span> BigInt&amp;, <span class="type">const</span> BigInt&amp;, <span class="type">const</span> BigInt&amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="type">void</span> <span class="title">SortPrime</span><span class="params">(BigInt&amp; n)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">BigInt</span>();</span><br><span class="line">    <span class="built_in">BigInt</span>(<span class="type">const</span> <span class="type">int</span>&amp;);</span><br><span class="line">    <span class="built_in">BigInt</span>(<span class="type">const</span> BigInt&amp;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值</span></span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span>= (<span class="type">const</span> BigInt&amp;);</span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span>= (<span class="type">const</span> <span class="type">int</span>&amp; a) &#123; <span class="built_in">Clear</span>(); data[<span class="number">0</span>] = a; &#125;</span><br><span class="line">    <span class="type">void</span> <span class="keyword">operator</span>&gt;&gt; (<span class="type">const</span> <span class="type">int</span>&amp;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 辅助函数</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">GetLenth</span><span class="params">()</span> <span class="type">const</span></span>;   <span class="comment">//返回大数的长度</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">TestSign</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> sign; &#125;  <span class="comment">//判断大数的正负</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Clear</span><span class="params">()</span></span>;  <span class="comment">//大数清0</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Random</span><span class="params">()</span></span>; <span class="comment">//随机产生一个大数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">RandomSmall</span><span class="params">()</span></span>;  <span class="comment">//随机产生一个稍小的大数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">()</span> <span class="type">const</span></span>;<span class="comment">// 输出</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">Output</span><span class="params">(ostream&amp; out)</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">IsOdd</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> (data[<span class="number">0</span>] &amp; <span class="number">1</span>); &#125;  <span class="comment">//判断大数奇偶性</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">ToInt</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> data[<span class="number">0</span>];&#125;</span><br><span class="line">    <span class="function">string <span class="title">ToHex</span><span class="params">()</span></span>;    <span class="comment">// BigInt转十六进制表示</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> data[BIsize];<span class="comment">// 数据</span></span><br><span class="line">    <span class="type">bool</span> sign;<span class="comment">// 符号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">BigInt <span class="keyword">operator</span>+ (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> BigInt&amp;);</span><br><span class="line">BigInt <span class="keyword">operator</span>- (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> BigInt&amp;);</span><br><span class="line">BigInt <span class="keyword">operator</span>- (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> <span class="type">int</span>&amp;);</span><br><span class="line">BigInt <span class="keyword">operator</span>* (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> BigInt&amp;);</span><br><span class="line">BigInt <span class="keyword">operator</span>/ (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> BigInt&amp;);</span><br><span class="line">BigInt <span class="keyword">operator</span>% (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> BigInt&amp;);</span><br><span class="line">BigInt <span class="keyword">operator</span>* (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span>&amp;);</span><br><span class="line"><span class="function">BigInt <span class="title">PowerMode</span><span class="params">(<span class="type">const</span> BigInt&amp;, <span class="type">const</span> BigInt&amp;, <span class="type">const</span> BigInt&amp;)</span></span>;</span><br><span class="line"><span class="type">bool</span> <span class="built_in">operator</span>&lt; (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> BigInt&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt; (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> BigInt&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;= (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> <span class="type">int</span>&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>== (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> BigInt&amp;);</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>== (<span class="type">const</span> BigInt&amp;, <span class="type">const</span> <span class="type">int</span>&amp;);</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp;, <span class="type">const</span> BigInt&amp;);</span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp;,BigInt &amp;);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SortPrime</span><span class="params">(BigInt&amp; n)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>BigIntdata.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;BigInt.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BigInt清零</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BigInt::Clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BIsize; i++)</span><br><span class="line">        data[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产生一个随机大数，LENTH为SIZE的1/4</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BigInt::Random</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i&lt;(BIsize / <span class="number">4</span>); i++)</span><br><span class="line">        <span class="comment">//由于RAND()最大只能产生0X7FFF的数,为了能产生32位的随机数,需要</span></span><br><span class="line">        <span class="comment">//3次RAND()操作</span></span><br><span class="line">        data[i] = (<span class="built_in">rand</span>() &lt;&lt; <span class="number">17</span>) + (<span class="built_in">rand</span>() &lt;&lt; <span class="number">2</span>) + <span class="built_in">rand</span>() % <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产生一个较小的随机大数,大数的LENGTH为SIZE的1/8</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BigInt::RandomSmall</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (BIsize / <span class="number">16</span>); i++)</span><br><span class="line">        data[i] = (<span class="built_in">rand</span>() &lt;&lt; <span class="number">17</span>) + (<span class="built_in">rand</span>() &lt;&lt; <span class="number">2</span>) + <span class="built_in">rand</span>() % <span class="number">4</span>;<span class="comment">// 通过3次rand()产生32位随机数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BigInt转16进制后输出</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BigInt::display</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> temp, result;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> tempAnd = <span class="number">0xf0000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">GetLenth</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = data[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            result = temp &amp; tempAnd;</span><br><span class="line">            result = (result &gt;&gt; <span class="number">28</span>);</span><br><span class="line">            temp = (temp &lt;&lt; <span class="number">4</span>);</span><br><span class="line">            <span class="keyword">switch</span> (result)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">10</span>:cout &lt;&lt; <span class="string">&quot;A&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">11</span>:cout &lt;&lt; <span class="string">&quot;B&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">12</span>:cout &lt;&lt; <span class="string">&quot;C&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">13</span>:cout &lt;&lt; <span class="string">&quot;D&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">14</span>:cout &lt;&lt; <span class="string">&quot;E&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">15</span>:cout &lt;&lt; <span class="string">&quot;F&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:cout&lt;&lt;result;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="built_in">GetLenth</span>() / <span class="number">2</span>)</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BigInt转16进制存放在string中</span></span><br><span class="line"><span class="function">string <span class="title">BigInt::ToHex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> temp, result;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> tempAnd = <span class="number">0xf0000000</span>;</span><br><span class="line">    string hex=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">GetLenth</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = data[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            result = temp &amp; tempAnd;</span><br><span class="line">            result = (result &gt;&gt; <span class="number">28</span>);</span><br><span class="line">            temp = (temp &lt;&lt; <span class="number">4</span>);</span><br><span class="line">            <span class="type">char</span> val;</span><br><span class="line">            <span class="keyword">switch</span> (result)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:val=<span class="string">&#x27;0&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:val=<span class="string">&#x27;1&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:val=<span class="string">&#x27;2&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:val=<span class="string">&#x27;3&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:val=<span class="string">&#x27;4&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:val=<span class="string">&#x27;5&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:val=<span class="string">&#x27;6&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:val=<span class="string">&#x27;7&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:val=<span class="string">&#x27;8&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">9</span>:val=<span class="string">&#x27;9&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">10</span>:val=<span class="string">&#x27;A&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">11</span>:val= <span class="string">&#x27;B&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">12</span>:val= <span class="string">&#x27;C&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">13</span>:val= <span class="string">&#x27;D&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">14</span>:val= <span class="string">&#x27;E&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">15</span>:val= <span class="string">&#x27;F&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:cout&lt;&lt;result;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            hex+=val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>BigIntcal.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;BigInt.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 竖式相加法实现BigInt求和</span></span><br><span class="line">BigInt <span class="keyword">operator</span>+ (<span class="type">const</span> BigInt&amp; a, <span class="type">const</span> BigInt&amp; b)</span><br><span class="line">&#123;</span><br><span class="line">    BigInt result;</span><br><span class="line">    <span class="type">unsigned</span> __int64 sum;<span class="comment">// 64位数据,存放每两位数相加的临时和</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> carry = <span class="number">0</span>;<span class="comment">// 进位标志</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> sub;<span class="comment">// 两数符号相异，时存放每两位数相减的临时差</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> length = (a.<span class="built_in">GetLenth</span>() &gt;= b.<span class="built_in">GetLenth</span>() ? a.<span class="built_in">GetLenth</span>() : b.<span class="built_in">GetLenth</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当两数符号相同时,进行加法运算</span></span><br><span class="line">    <span class="keyword">if</span> (a.sign == b.sign)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 每一位进行竖式相加</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum = (<span class="type">unsigned</span> __int64)a.data[i] + b.data[i] + carry;</span><br><span class="line">            result.data[i] = (<span class="type">unsigned</span> <span class="type">int</span>)sum;</span><br><span class="line">            <span class="comment">// sum的高位为进位</span></span><br><span class="line">            carry = (sum &gt;&gt; <span class="number">32</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        result.sign = a.sign;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">// 两数符号不同时,进行减法运算</span></span><br><span class="line">    &#123;</span><br><span class="line">        BigInt tempa, tempb;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出a,b中绝对值较大的作为被减数</span></span><br><span class="line">        <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">        &#123;</span><br><span class="line">            tempa = b;</span><br><span class="line">            tempb = a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            tempa = a;</span><br><span class="line">            tempb = b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//每一位进行竖式减</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sub = tempb.data[i] + carry;</span><br><span class="line">            <span class="keyword">if</span> (tempa.data[i] &gt;= sub)</span><br><span class="line">            &#123;</span><br><span class="line">                result.data[i] = tempa.data[i] - sub;</span><br><span class="line">                carry = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//借位减</span></span><br><span class="line">                result.data[i] = (<span class="type">unsigned</span> __int64)tempa.data[i] + (<span class="number">1</span> &lt;&lt; <span class="number">32</span>) - sub;</span><br><span class="line">                carry = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result.sign = tempa.sign;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 竖式相减法BigInt求差</span></span><br><span class="line">BigInt <span class="keyword">operator</span>- (<span class="type">const</span> BigInt&amp; a, <span class="type">const</span> BigInt&amp; b)</span><br><span class="line">&#123;</span><br><span class="line">    BigInt result;</span><br><span class="line">    <span class="type">unsigned</span> __int64 sum;<span class="comment">// 存放每两位数相加的临时和</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> carry = <span class="number">0</span>;<span class="comment">// 进位标志</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> sub;<span class="comment">// 两数符号相异时存放每两位数相减的临时差</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//符号相同时,进行减法运算</span></span><br><span class="line">    <span class="keyword">if</span> (a.sign == b.sign)</span><br><span class="line">    &#123;</span><br><span class="line">        BigInt tempa, tempb;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取出a,b中绝对值较大的作为被减数</span></span><br><span class="line">        <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">        &#123;</span><br><span class="line">            tempa = b;</span><br><span class="line">            tempb = a;</span><br><span class="line">            tempa.sign = !tempa.sign;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            tempa = a;</span><br><span class="line">            tempb = b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每一位进行竖式减</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BIsize; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sub = tempb.data[i] + carry;</span><br><span class="line">            <span class="keyword">if</span> (tempa.data[i] &gt;= sub)</span><br><span class="line">            &#123;</span><br><span class="line">                result.data[i] = tempa.data[i] - sub;</span><br><span class="line">                carry = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 借位减</span></span><br><span class="line">                result.data[i] = (<span class="type">unsigned</span> __int64)tempa.data[i] + (<span class="number">1</span> &lt;&lt; <span class="number">32</span>) - sub;</span><br><span class="line">                carry = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result.sign = tempa.sign;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">// 两数符号不同时,进行加法运算</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 每一位进行竖式相加</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BIsize; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum = (<span class="type">unsigned</span> __int64)a.data[i] + b.data[i] + carry;</span><br><span class="line">            result.data[i] = (<span class="type">unsigned</span> <span class="type">int</span>)sum;</span><br><span class="line">            <span class="comment">// sum的高位为进位</span></span><br><span class="line">            carry = (sum &gt;&gt; <span class="number">32</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        result.sign = a.sign;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BigInt - Int</span></span><br><span class="line">BigInt <span class="keyword">operator</span>- (<span class="type">const</span> BigInt&amp; a, <span class="type">const</span> <span class="type">int</span>&amp; b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">BigInt <span class="title">temp</span><span class="params">(b)</span></span>;</span><br><span class="line">    BigInt result = a - temp;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BigInt * Int</span></span><br><span class="line">BigInt <span class="keyword">operator</span>* (<span class="type">const</span> BigInt&amp; a, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">int</span>&amp; b)</span><br><span class="line">&#123;</span><br><span class="line">    BigInt result;<span class="comment">// B乘以A的每一位的临时积</span></span><br><span class="line">    <span class="type">unsigned</span> __int64 sum;<span class="comment">// 进位</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> carry = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BIsize; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = ((<span class="type">unsigned</span> __int64)a.data[i]) * b + carry;</span><br><span class="line">        result.data[i] = (<span class="type">unsigned</span> <span class="type">int</span>)sum;</span><br><span class="line">        <span class="comment">// 进位在SUM的高位中</span></span><br><span class="line">        carry = (sum &gt;&gt; <span class="number">32</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    result.sign = a.sign;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 竖式相乘求BigInt乘积</span></span><br><span class="line">BigInt <span class="keyword">operator</span>* (<span class="type">const</span> BigInt&amp; a, <span class="type">const</span> BigInt&amp; b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// last存放竖式上一行的积，temp存放当前行的积</span></span><br><span class="line">    BigInt result, last, temp;</span><br><span class="line">    <span class="comment">// sum存放当前行带进位的积</span></span><br><span class="line">    <span class="type">unsigned</span> __int64 sum;</span><br><span class="line">    <span class="comment">// 存放进位</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> carry;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行竖式乘</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; b.<span class="built_in">GetLenth</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        carry = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// B的每一位与A相乘</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; a.<span class="built_in">GetLenth</span>() + <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum = ((<span class="type">unsigned</span> __int64)a.data[j]) * (b.data[i]) + carry;</span><br><span class="line">            <span class="keyword">if</span> ((i + j) &lt; BIsize)</span><br><span class="line">                temp.data[i + j] = (<span class="type">unsigned</span> <span class="type">int</span>)sum;</span><br><span class="line">            carry = (sum &gt;&gt; <span class="number">32</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        result = (temp + last);</span><br><span class="line">        last = result;</span><br><span class="line">        temp.<span class="built_in">Clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断积的符号</span></span><br><span class="line">    result.sign=(a.sign==b.sign);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BigInt除法，采用试商除法+二分查找法</span></span><br><span class="line">BigInt <span class="keyword">operator</span>/ (<span class="type">const</span> BigInt&amp; a, <span class="type">const</span> BigInt&amp; b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// mul为当前试商，low，high为二分查找试商时所用的标志</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> mul, low, high;</span><br><span class="line">    <span class="comment">// sub为除数与当前试商的积，subsequent为除数与下一试商的积</span></span><br><span class="line">    <span class="comment">// dividend存放临时被除数</span></span><br><span class="line">    BigInt dividend, quotient, sub, subsequent;</span><br><span class="line">    <span class="type">int</span> lengtha = a.<span class="built_in">GetLenth</span>(), lengthb = b.<span class="built_in">GetLenth</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果被除数小于除数，返回0</span></span><br><span class="line">    <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        quotient.sign =(a.sign == b.sign);</span><br><span class="line">        <span class="keyword">return</span> quotient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把被除数按除数的长度从高位截位</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; lengthb; i++)</span><br><span class="line">        dividend.data[i] = a.data[lengtha - lengthb + i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = lengtha - lengthb; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果被除数小于除数,再往后补位</span></span><br><span class="line">        <span class="keyword">if</span> (dividend &lt; b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = lengthb; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">                dividend.data[j] = dividend.data[j - <span class="number">1</span>];</span><br><span class="line">            dividend.data[<span class="number">0</span>] = a.data[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        low = <span class="number">0</span>;</span><br><span class="line">        high = <span class="number">0xffffffff</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 二分查找法查找试商</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high)</span><br><span class="line">        &#123;</span><br><span class="line">            mul = (((<span class="type">unsigned</span> __int64)high) + low) / <span class="number">2</span>;</span><br><span class="line">            sub = (b * mul);</span><br><span class="line">            subsequent = (b * (mul + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (((sub &lt; dividend) &amp;&amp; (subsequent &gt; dividend)) || (sub == dividend))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (subsequent == dividend)</span><br><span class="line">            &#123;</span><br><span class="line">                mul++;</span><br><span class="line">                sub = subsequent;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((sub &lt; dividend) &amp;&amp; (subsequent &lt; dividend))</span><br><span class="line">            &#123;</span><br><span class="line">                low = mul;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((sub &gt; dividend) &amp;&amp; (subsequent &gt; dividend))</span><br><span class="line">            &#123;</span><br><span class="line">                high = mul;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 试商结果保存到商中去</span></span><br><span class="line">        quotient.data[i] = mul;</span><br><span class="line">        <span class="comment">// 临时被除数变为被除数与试商积的差</span></span><br><span class="line">        dividend = dividend - sub;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 临时被除数往后补位</span></span><br><span class="line">        <span class="keyword">if</span> ((i - <span class="number">1</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = lengthb; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">                dividend.data[j] = dividend.data[j - <span class="number">1</span>];</span><br><span class="line">            dividend.data[<span class="number">0</span>] = a.data[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断商的符号</span></span><br><span class="line">    quotient.sign = (a.sign == b.sign);</span><br><span class="line">    <span class="keyword">return</span> quotient;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BigInt求模，与除法类似</span></span><br><span class="line">BigInt <span class="keyword">operator</span>% (<span class="type">const</span> BigInt&amp; a, <span class="type">const</span> BigInt&amp; b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> mul, low, high;</span><br><span class="line">    BigInt dividend, quotient, sub, subsequent;</span><br><span class="line">    <span class="type">int</span> lengtha = a.<span class="built_in">GetLenth</span>(), lengthb = b.<span class="built_in">GetLenth</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果被除数小于除数,返回被除数为模</span></span><br><span class="line">    <span class="keyword">if</span> (a &lt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        dividend = a;</span><br><span class="line">        <span class="comment">// 余数的商永远与被除数相同</span></span><br><span class="line">        dividend.sign = a.sign;</span><br><span class="line">        <span class="keyword">return</span> dividend;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行除法运算</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; lengthb; i++)</span><br><span class="line">        dividend.data[i] = a.data[lengtha - lengthb + i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = lengtha - lengthb; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dividend &lt; b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = lengthb; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">                dividend.data[j] = dividend.data[j - <span class="number">1</span>];</span><br><span class="line">            dividend.data[<span class="number">0</span>] = a.data[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        low = <span class="number">0</span>;</span><br><span class="line">        high = <span class="number">0xffffffff</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high)</span><br><span class="line">        &#123;</span><br><span class="line">            mul = (((<span class="type">unsigned</span> __int64)high) + low) / <span class="number">2</span>;</span><br><span class="line">            sub = (b * mul);</span><br><span class="line">            subsequent = (b * (mul + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (((sub &lt; dividend) &amp;&amp; (subsequent &gt; dividend)) || (sub == dividend))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (subsequent == dividend)</span><br><span class="line">            &#123;</span><br><span class="line">                mul++;</span><br><span class="line">                sub = subsequent;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((sub &lt; dividend) &amp;&amp; (subsequent &lt; dividend))</span><br><span class="line">            &#123;</span><br><span class="line">                low = mul;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((sub &gt; dividend) &amp;&amp; (subsequent &gt; dividend))</span><br><span class="line">            &#123;</span><br><span class="line">                high = mul;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        quotient.data[i] = mul;</span><br><span class="line">        dividend = dividend - sub;</span><br><span class="line">        <span class="keyword">if</span> ((i - <span class="number">1</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = lengthb; j &gt; <span class="number">0</span>; j--)</span><br><span class="line">                dividend.data[j] = dividend.data[j - <span class="number">1</span>];</span><br><span class="line">            dividend.data[<span class="number">0</span>] = a.data[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//临时被除数即为所求模</span></span><br><span class="line">    dividend.sign = a.sign;</span><br><span class="line">    <span class="keyword">return</span> dividend;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模幂运算——计算n的p次幂模m</span></span><br><span class="line"><span class="comment">// 利用Montgomery算法，</span></span><br><span class="line"><span class="function">BigInt <span class="title">PowerMode</span><span class="params">(<span class="type">const</span> BigInt &amp;n, <span class="type">const</span> BigInt &amp;p, <span class="type">const</span> BigInt &amp;m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BigInt temp = p;</span><br><span class="line">    BigInt base = n % m;</span><br><span class="line">    <span class="function">BigInt <span class="title">result</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检测指数p的二进制形式的每一位</span></span><br><span class="line">    <span class="keyword">while</span> (!(temp &lt;= <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//如果该位为1，则表示该位需要参与模运算</span></span><br><span class="line">        <span class="keyword">if</span> (temp.<span class="built_in">IsOdd</span>())</span><br><span class="line">            result = (result * base) % m;</span><br><span class="line">        base = (base * base) % m;</span><br><span class="line">        temp &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (base * result) % m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>BigIntop.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;BigInt.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化BigInt</span></span><br><span class="line">BigInt::<span class="built_in">BigInt</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BIsize; i++)</span><br><span class="line">        data[i] = <span class="number">0</span>;</span><br><span class="line">    sign = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">BigInt::<span class="built_in">BigInt</span>(<span class="type">const</span> <span class="type">int</span> &amp;input)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BIsize; i++)</span><br><span class="line">        data[i] = <span class="number">0</span>;</span><br><span class="line">    data[<span class="number">0</span>] = input;</span><br><span class="line">    <span class="keyword">if</span> (input &gt;= <span class="number">0</span>)</span><br><span class="line">        sign = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        sign = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">BigInt::<span class="built_in">BigInt</span>(<span class="type">const</span> BigInt &amp;input)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BIsize; i++)</span><br><span class="line">        data[i] = input.data[i];</span><br><span class="line">    sign = input.sign;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line"><span class="type">void</span> BigInt::<span class="keyword">operator</span>=(<span class="type">const</span> BigInt &amp;input)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BIsize; i++)</span><br><span class="line">        data[i] = input.data[i];</span><br><span class="line">    sign = input.sign;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较</span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> BigInt &amp;a, <span class="type">const</span> BigInt &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = BIsize - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.data[i] &lt; b.data[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (a.data[i] &gt; b.data[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a.data[<span class="number">0</span>] &lt; b.data[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&gt;(<span class="type">const</span> BigInt &amp;a, <span class="type">const</span> BigInt &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = BIsize - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.data[i] &gt; b.data[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (a.data[i] &lt; b.data[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;=(<span class="type">const</span> BigInt &amp;a, <span class="type">const</span> <span class="type">int</span> &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; a.<span class="built_in">GetLenth</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.data[i] != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (a.data[<span class="number">0</span>] &lt;= b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相等判断（!=也可用==结果判断</span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> BigInt &amp;a, <span class="type">const</span> BigInt &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; BIsize; i++)</span><br><span class="line">        <span class="keyword">if</span> (a.data[i] != b.data[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> BigInt &amp;a, <span class="type">const</span> <span class="type">int</span> &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; a.<span class="built_in">GetLenth</span>(); i++)</span><br><span class="line">        <span class="keyword">if</span> (a.data[i] != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> a.data[<span class="number">0</span>] == b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载输出运算符，实现文件写BigInt</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BigInt::Output</span><span class="params">(ostream &amp;out)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> temp, result;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> tempAnd = <span class="number">0xf0000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">GetLenth</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = data[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            result = temp &amp; tempAnd;</span><br><span class="line">            result = (result &gt;&gt; <span class="number">28</span>);</span><br><span class="line">            temp = (temp &lt;&lt; <span class="number">4</span>);</span><br><span class="line">            <span class="keyword">switch</span> (result)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">10</span>:out &lt;&lt; <span class="string">&quot;A&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">11</span>:out &lt;&lt; <span class="string">&quot;B&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">12</span>:out &lt;&lt; <span class="string">&quot;C&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">13</span>:out &lt;&lt; <span class="string">&quot;D&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">14</span>:out &lt;&lt; <span class="string">&quot;E&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">15</span>:out &lt;&lt; <span class="string">&quot;F&quot;</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:out &lt;&lt; result;<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    out &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;out, <span class="type">const</span> BigInt &amp;num)</span><br><span class="line">&#123;</span><br><span class="line">    num.<span class="built_in">Output</span>(out);</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载输入运算符，实现从文件中读BigInt</span></span><br><span class="line">istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;in, BigInt &amp;num)</span><br><span class="line">&#123;</span><br><span class="line">    num=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> temp;</span><br><span class="line">    in.<span class="built_in">get</span>(temp);</span><br><span class="line">    <span class="keyword">while</span>(temp!=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        <span class="comment">// 16进制转十进制</span></span><br><span class="line">        <span class="keyword">switch</span> (temp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:val=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:val=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:val=<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:val=<span class="number">3</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:val=<span class="number">4</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:val=<span class="number">5</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:val=<span class="number">6</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:val=<span class="number">7</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>:val=<span class="number">8</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;9&#x27;</span>:val=<span class="number">9</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:val=<span class="number">10</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:val=<span class="number">11</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:val=<span class="number">12</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:val=<span class="number">13</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:val=<span class="number">14</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;F&#x27;</span>:val=<span class="number">15</span>;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        num = num * <span class="number">16</span> + val;<span class="comment">// 累加求值</span></span><br><span class="line">        in.<span class="built_in">get</span>(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回data中不为0的位数</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">BigInt::GetLenth</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> lenth = BIsize;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = BIsize - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//第一位不为0即为LENGTH</span></span><br><span class="line">        <span class="keyword">if</span> (data[i] == <span class="number">0</span>)</span><br><span class="line">            lenth--;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lenth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载移位操作符，向右移N位</span></span><br><span class="line"><span class="type">void</span> BigInt::<span class="keyword">operator</span>&gt;&gt;(<span class="type">const</span> <span class="type">int</span> &amp;a)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> bit;</span><br><span class="line">    data[<span class="number">0</span>] = (data[<span class="number">0</span>] &gt;&gt; a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">GetLenth</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 先将每一位的低位移到BIT中</span></span><br><span class="line">        bit = data[i] &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 再把BIT移到上一位的高位中</span></span><br><span class="line">        bit = bit &lt;&lt; (<span class="number">32</span> - a);</span><br><span class="line">        data[i - <span class="number">1</span>] = data[i - <span class="number">1</span>] | bit;</span><br><span class="line">        data[i] = (data[i] &gt;&gt; a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>genPrime.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;BigInt.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对大奇数n进行RabinMiller检测</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">RabinMiller</span><span class="params">(<span class="type">const</span> BigInt&amp; n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BigInt r, a, y;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> s, j;</span><br><span class="line">    r = n - <span class="number">1</span>;</span><br><span class="line">    s = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!r.<span class="built_in">IsOdd</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        s++;</span><br><span class="line">        r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//随机产生一个小于N-1的检测数a</span></span><br><span class="line">    a.<span class="built_in">Randomsmall</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//y = a的r次幂模n</span></span><br><span class="line">    y = <span class="built_in">PowerMode</span>(a, r, n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检测J=2至J&lt;S轮</span></span><br><span class="line">    <span class="keyword">if</span> ((!(y == <span class="number">1</span>)) &amp;&amp; (!(y == (n - <span class="number">1</span>))))</span><br><span class="line">    &#123;</span><br><span class="line">        j = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ((j &lt;= s - <span class="number">1</span>) &amp;&amp; (!(y == (n - <span class="number">1</span>))))</span><br><span class="line">        &#123;</span><br><span class="line">            y = (y*y) % n;</span><br><span class="line">            <span class="keyword">if</span> (y == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(y == (n - <span class="number">1</span>)))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产生一个素数</span></span><br><span class="line"><span class="function">BigInt <span class="title">GeneratePrime</span><span class="params">(<span class="type">int</span> &amp;time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BigInt n;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无限次循环，不断产生素数，直到i==5时（通过五轮RabinMiller测试）才会跳出while循环</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//记录生成了多少次大奇数</span></span><br><span class="line">        time++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//产生一个待测素数</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++&quot;</span> &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;产生待测大奇数：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">SortPrime</span>(n);</span><br><span class="line">        n.<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//进行五轮RABINMILLER测试,五轮全部通过则素数合格</span></span><br><span class="line">        <span class="keyword">for</span> (; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;正在进行第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;轮RabinMiller测试：&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">RabinMiller</span>(n))</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;…………测试失败&quot;</span> &lt;&lt; endl&lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;…………测试通过&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求两个大数的最大公约数,采用辗转相除法</span></span><br><span class="line"><span class="function">BigInt <span class="title">Gcd</span><span class="params">(<span class="type">const</span> BigInt&amp; m, <span class="type">const</span> BigInt&amp; n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Gcd</span>(n, m%n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用扩展欧几里德算法求乘法模逆</span></span><br><span class="line"><span class="function">BigInt <span class="title">ExtendedGcd</span><span class="params">(<span class="type">const</span> BigInt&amp; a, <span class="type">const</span> BigInt&amp; b, BigInt&amp; x, BigInt&amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BigInt t, d;</span><br><span class="line">    <span class="comment">//如果一个操作数为零则无法进行除法运算</span></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    d = <span class="built_in">ExtendedGcd</span>(b, a%b, x, y);</span><br><span class="line">    t = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = t - ((a / b)*y);</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>rsa.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> RSA_rsa_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RSA_rsa_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;BigInt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Rsa</span></span><br><span class="line">&#123;</span><br><span class="line">    BigInt n, e, d; <span class="comment">// e为公钥，d为私钥</span></span><br><span class="line">    <span class="built_in">Rsa</span>();</span><br><span class="line">    <span class="built_in">Rsa</span>(BigInt&amp; N, BigInt&amp; E);</span><br><span class="line">    <span class="built_in">Rsa</span>(BigInt&amp; N, BigInt&amp; E, BigInt&amp; D);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SortPrime</span><span class="params">(BigInt &amp;n)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">RabinMiller</span><span class="params">(<span class="type">const</span> BigInt &amp;n)</span></span>;</span><br><span class="line"><span class="function">BigInt <span class="title">GeneratePrime</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">BigInt <span class="title">Gcd</span><span class="params">(<span class="type">const</span> BigInt &amp;m, <span class="type">const</span> BigInt &amp;n)</span></span>;</span><br><span class="line"><span class="function">BigInt <span class="title">ExtendedGcd</span><span class="params">(<span class="type">const</span> BigInt &amp;a, <span class="type">const</span> BigInt &amp;b, BigInt &amp;x, BigInt &amp;y)</span></span>;</span><br><span class="line"><span class="function">BigInt <span class="title">StringToBigInt</span><span class="params">(string str)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">BigIntToString</span><span class="params">(BigInt num)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">BigIntToHex</span><span class="params">(BigInt &amp;num)</span></span>;</span><br><span class="line"><span class="function">BigInt <span class="title">HexToBigInt</span><span class="params">(string hex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//RSA_rsa_H</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>rsa.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;rsa.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 产生一个奇数作为待测素数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SortPrime</span><span class="params">(BigInt&amp; n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    BigInt divisor;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> length = <span class="built_in">sizeof</span>(prime) / <span class="built_in">sizeof</span>(<span class="type">int</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i != length)</span><br><span class="line">    &#123;</span><br><span class="line">        n.<span class="built_in">Random</span>();</span><br><span class="line">        <span class="keyword">while</span> (!n.<span class="built_in">IsOdd</span>())</span><br><span class="line">            n.<span class="built_in">Random</span>();</span><br><span class="line"></span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; length; i++)</span><br><span class="line">            <span class="keyword">if</span> ((n % prime[i]) == <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RabinMiller检测某个数是否是素数</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">RabinMiller</span><span class="params">(<span class="type">const</span> BigInt&amp; n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BigInt r, a, y;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> s, j;</span><br><span class="line">    r = n - <span class="number">1</span>;</span><br><span class="line">    s = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!r.<span class="built_in">IsOdd</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        s++;</span><br><span class="line">        r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a.<span class="built_in">RandomSmall</span>();<span class="comment">// 随机产生一个小于N-1的检测数a</span></span><br><span class="line"></span><br><span class="line">    y = <span class="built_in">PowerMode</span>(a, r, n);<span class="comment">//y = a的r次幂模n</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//检测J=2至J&lt;S轮</span></span><br><span class="line">    <span class="keyword">if</span> ((!(y == <span class="number">1</span>)) &amp;&amp; (!(y == (n - <span class="number">1</span>))))</span><br><span class="line">    &#123;</span><br><span class="line">        j = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((j &lt;= s - <span class="number">1</span>) &amp;&amp; (!(y == (n - <span class="number">1</span>))))</span><br><span class="line">        &#123;</span><br><span class="line">            y = (y * y) % n;</span><br><span class="line">            <span class="keyword">if</span> (y == <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(y == (n - <span class="number">1</span>)))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产生一个素数</span></span><br><span class="line"><span class="function">BigInt <span class="title">GeneratePrime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>((<span class="type">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    BigInt n;</span><br><span class="line">    <span class="type">int</span> time = <span class="number">0</span>;<span class="comment">// 记录产生素数次数</span></span><br><span class="line">    <span class="type">bool</span> success=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环产生素数，通过5轮RabinMiller测试</span></span><br><span class="line">    <span class="keyword">while</span> (!success)</span><br><span class="line">    &#123;</span><br><span class="line">        time++;</span><br><span class="line">        <span class="comment">//产生一个待测素数</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;生成第&quot;</span> &lt;&lt; time &lt;&lt; <span class="string">&quot;个大奇数：&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">SortPrime</span>(n);</span><br><span class="line">        n.<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行五轮RABINMILLER测试,五轮全部通过则素数合格</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;第&quot;</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&quot;轮RabinMiller测试：&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">RabinMiller</span>(n))</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;Fail..&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;Pass!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            success=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 辗转相除法求两个大数的最大公约数</span></span><br><span class="line"><span class="function">BigInt <span class="title">Gcd</span><span class="params">(<span class="type">const</span> BigInt&amp; m, <span class="type">const</span> BigInt&amp; n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Gcd</span>(n, m % n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展欧几里德求乘法逆元</span></span><br><span class="line"><span class="function">BigInt <span class="title">ExtendedGcd</span><span class="params">(<span class="type">const</span> BigInt&amp; a, <span class="type">const</span> BigInt&amp; b, BigInt&amp; x, BigInt&amp; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BigInt t, d;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果一个操作数为零则无法进行除法运算</span></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    d = <span class="built_in">ExtendedGcd</span>(b, a % b, x, y);</span><br><span class="line">    t = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = t - ((a / b) * y);</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BigInt <span class="title">StringToBigInt</span><span class="params">(string str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">BigInt <span class="title">a</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=str.<span class="built_in">length</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x=str[i]+<span class="number">128</span>;</span><br><span class="line">        BigInt temp=a*<span class="number">256</span>;</span><br><span class="line">        a=temp+x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; &quot;a&quot; &lt;&lt; a.GetLenth() &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">BigIntToString</span><span class="params">(BigInt num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string str=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(!(num==<span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        BigInt temp=num%<span class="number">256</span>;</span><br><span class="line">        <span class="type">int</span> x=temp.<span class="built_in">ToInt</span>();</span><br><span class="line">        num=num/<span class="number">256</span>;</span><br><span class="line">        str+=(<span class="type">char</span>)(x<span class="number">-128</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">BigIntToHex</span><span class="params">(BigInt &amp;num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num.<span class="built_in">ToHex</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BigInt <span class="title">HexToBigInt</span><span class="params">(string hex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">BigInt <span class="title">result</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;hex.<span class="built_in">length</span>();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> val;</span><br><span class="line">        <span class="keyword">switch</span> (hex[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:val=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:val=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:val=<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:val=<span class="number">3</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:val=<span class="number">4</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:val=<span class="number">5</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:val=<span class="number">6</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:val=<span class="number">7</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>:val=<span class="number">8</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;9&#x27;</span>:val=<span class="number">9</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:val=<span class="number">10</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:val=<span class="number">11</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:val=<span class="number">12</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:val=<span class="number">13</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:val=<span class="number">14</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;F&#x27;</span>:val=<span class="number">15</span>;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result = result * <span class="number">16</span> + val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Rsa::<span class="built_in">Rsa</span>()</span><br><span class="line">&#123;</span><br><span class="line">    BigInt p = <span class="built_in">GeneratePrime</span>();</span><br><span class="line">    BigInt q = <span class="built_in">GeneratePrime</span>();</span><br><span class="line">    n = p * q;</span><br><span class="line">    BigInt f = (p - <span class="number">1</span>) * (q - <span class="number">1</span>);</span><br><span class="line">    BigInt x,temp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环生成e，直到满足条件</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//产生与fn互质的e</span></span><br><span class="line">        e.<span class="built_in">Random</span>();</span><br><span class="line">        <span class="keyword">while</span> (!(<span class="built_in">Gcd</span>(e, f) == <span class="number">1</span>))</span><br><span class="line">            e.<span class="built_in">Random</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用扩展欧几里德算法试图求出e模t的乘法逆元</span></span><br><span class="line">        temp = <span class="built_in">ExtendedGcd</span>(e, f, d, x);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// e*d模t结果为1 -&gt; d是e模t的乘法逆元，计算完成</span></span><br><span class="line">        temp = (e * d) % f;</span><br><span class="line">        <span class="keyword">if</span> (temp == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Rsa::<span class="built_in">Rsa</span>(BigInt &amp;N, BigInt &amp;E)</span><br><span class="line">&#123;</span><br><span class="line">    n=N;</span><br><span class="line">    e=E;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Rsa::<span class="built_in">Rsa</span>(BigInt &amp;N, BigInt &amp;E, BigInt &amp;D)</span><br><span class="line">&#123;</span><br><span class="line">    n=N;</span><br><span class="line">    e=E;</span><br><span class="line">    d=D;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>main.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;BigInt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;rsa.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">BigInt <span class="title">RSAEncode</span><span class="params">(BigInt &amp;m, Rsa &amp;R)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">PowerMode</span>(m, R.d, R.n);&#125;</span><br><span class="line"><span class="function">BigInt <span class="title">RSADecode</span><span class="params">(BigInt &amp;c, Rsa &amp;R)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">PowerMode</span>(c, R.e, R.n);&#125;</span><br><span class="line"><span class="function">string <span class="title">try1try</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BigInt cn, ce, cd;</span><br><span class="line">    <span class="function">ifstream <span class="title">openc</span><span class="params">(<span class="string">&quot;ServerRsa.txt&quot;</span>)</span></span>;</span><br><span class="line">    openc &gt;&gt; cn;</span><br><span class="line">    openc &gt;&gt; ce;</span><br><span class="line">    openc &gt;&gt; cd;</span><br><span class="line">    openc.<span class="built_in">close</span>();</span><br><span class="line">    <span class="function">Rsa <span class="title">ClientRsa</span><span class="params">(cn, ce, cd)</span></span>;<span class="comment">// for encode</span></span><br><span class="line">    string message=<span class="string">&quot;20011227IMNKUPSL&quot;</span>;</span><br><span class="line">    BigInt m = <span class="built_in">StringToBigInt</span>(message);<span class="comment">// message to BigInt</span></span><br><span class="line">    BigInt c = <span class="built_in">RSAEncode</span>(m, ClientRsa);<span class="comment">// encode</span></span><br><span class="line">    string text = <span class="built_in">BigIntToHex</span>(c);    <span class="comment">// text to send</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;加密后:&quot;</span>&lt;&lt;text&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// read RSA keys from txt</span></span><br><span class="line">    BigInt sn, se, sd, cn, ce;</span><br><span class="line">    <span class="function">ifstream <span class="title">openc</span><span class="params">(<span class="string">&quot;ServerPk.txt&quot;</span>)</span></span>;</span><br><span class="line">    <span class="function">ifstream <span class="title">opens</span><span class="params">(<span class="string">&quot;ClientRsa.txt&quot;</span>)</span></span>;</span><br><span class="line">    openc &gt;&gt; cn;</span><br><span class="line">    openc &gt;&gt; ce;</span><br><span class="line">    opens &gt;&gt; sn;</span><br><span class="line">    opens &gt;&gt; se;</span><br><span class="line">    opens &gt;&gt; sd;</span><br><span class="line">    openc.<span class="built_in">close</span>();</span><br><span class="line">    opens.<span class="built_in">close</span>();</span><br><span class="line">    <span class="function">Rsa <span class="title">ServerRsa</span><span class="params">(sn, se, sd)</span></span>;<span class="comment">// for encode</span></span><br><span class="line">    <span class="function">Rsa <span class="title">ClientRsa</span><span class="params">(cn, ce)</span></span>;<span class="comment">// for decode</span></span><br><span class="line">    string msg=<span class="built_in">try1try</span>();</span><br><span class="line">    BigInt c = <span class="built_in">HexToBigInt</span>(msg);</span><br><span class="line">    BigInt m = <span class="built_in">RSADecode</span>(c, ClientRsa);</span><br><span class="line">    string message = <span class="built_in">BigIntToString</span>(m);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;---&gt;Receive from Client: &quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; message &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他">其他</h3><p>唯一需要自己写的地方在于，密码算法大多数只能处理数值，因此需要自己写一些字符串和数值转化的函数。这部分我已经写在rsa里了，如果你上面的代码没好好看的话，可以往上翻翻好好看看。</p><h3 id="协议设计">协议设计</h3><p>就是用对方的RSA公钥加密自己的AES密钥，再用AES密钥加密消息，然后发送出去。接收方用自己的RSA私钥解密，得到对方的AES密钥，然后用这个AES密钥来解密。</p><p>按理说AES密钥应该是随机生成，不过我的程序没有实现。是我提前设定好的。</p><p>附上一些有关密钥分发的函数吧。别的就不在此展示了，就是纯纯缝合了。</p><figure class="highlight c++"><figcaption><span>密钥分发</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">sendAESkey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BigInt cn, ce, cd;</span><br><span class="line">    <span class="function">ifstream <span class="title">openc</span><span class="params">(<span class="string">&quot;ClientRsa.txt&quot;</span>)</span></span>;</span><br><span class="line">    openc &gt;&gt; cn;</span><br><span class="line">    openc &gt;&gt; ce;</span><br><span class="line">    openc &gt;&gt; cd;</span><br><span class="line">    openc.<span class="built_in">close</span>();</span><br><span class="line">    <span class="function">Rsa <span class="title">ClientRsa</span><span class="params">(cn, ce, cd)</span></span>;<span class="comment">// for encode</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;我的AES密钥为:&quot;</span>&lt;&lt;clientAESkey&lt;&lt;endl&lt;&lt;endl;</span><br><span class="line">    BigInt m1= <span class="built_in">StringToBigInt</span>(clientAESkey);<span class="comment">// message to BigInt</span></span><br><span class="line">    BigInt c1 = <span class="built_in">RSAEncode</span>(m1, ClientRsa);<span class="comment">// encode</span></span><br><span class="line">    string text = <span class="built_in">BigIntToHex</span>(c1);    <span class="comment">// text to send</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;加密后发出的AES密钥:&quot;</span>&lt;&lt;text&lt;&lt;endl&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">getAESkey</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    BigInt  sn, se;</span><br><span class="line">    <span class="function">ifstream <span class="title">opens</span><span class="params">(<span class="string">&quot;ServerPk.txt&quot;</span>)</span></span>;</span><br><span class="line">    opens &gt;&gt; sn;</span><br><span class="line">    opens &gt;&gt; se;</span><br><span class="line">    opens.<span class="built_in">close</span>();</span><br><span class="line">    <span class="function">Rsa <span class="title">ServerRsa</span><span class="params">(sn, se)</span></span>;<span class="comment">// for decode</span></span><br><span class="line">    BigInt c = <span class="built_in">HexToBigInt</span>(s);</span><br><span class="line">    BigInt m = <span class="built_in">RSADecode</span>(c, ServerRsa);</span><br><span class="line">    string message = <span class="built_in">BigIntToString</span>(m);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;解密后对方的AES原文为:&quot;</span>&lt;&lt;message&lt;&lt;endl&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更多代码见github仓库">更多代码见github仓库</h2><p><a href="https://github.com/TephrocactusHC/NKU_cryptography">关于密码学的所有代码都在这里</a></p>]]></content>
      
      
      <categories>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
            <tag> Project </tag>
            
            <tag> Final Lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Computer Network Knowledge</title>
      <link href="/post/20344235.html"/>
      <url>/post/20344235.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Pre4APS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> My Notes </tag>
            
            <tag> Computer Network </tag>
            
            <tag> Pre4APS </tag>
            
            <tag> knowledge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cryptography Knowledge</title>
      <link href="/post/70d6b5e4.html"/>
      <url>/post/70d6b5e4.html</url>
      
        <content type="html"><![CDATA[<h2 id="密码学终极">密码学终极</h2><ol><li class="lvl-3"><p>信息安全威胁： 自然威胁，人为威胁</p></li><li class="lvl-3"><p>人为威胁包括被动攻击和主动攻击，被动攻击是对系统保密性进行攻击</p><p>被动攻击在于预防不在于检测</p><p>主动攻击是对信息流进行篡改或产生假消息。包括中断（可用性）、篡改（完整性）、伪造（真实性）</p><p>主动攻击是检测，以及恢复</p></li><li class="lvl-3"><p>人为攻击来自用户和恶意软件。恶意软件包括有主程序和不需要主程序；能自我复制和不能自我复制</p></li><li class="lvl-3"><p>安全业务：保密、认证、完整、不可否认、访问控制</p></li><li class="lvl-3"><p>消息的安全传输技术基本成分：消息安全传输（加密和认证）、双方共享秘密信息（加密密钥）</p></li><li class="lvl-3"><p>第三方作用：为双方发布秘密信息或通信双方有争议进行仲裁。</p></li><li class="lvl-3"><p>网络通信四个方面：加密算法、用于加密算法的秘密信息（k）、秘密信息的分布与共享、协议</p></li><li class="lvl-3"><p>访问控制的模型：两道防线为守卫者和内部控制部件</p></li><li class="lvl-3"><p>信息安全三个层次：系统、数据、内容安全。</p></li><li class="lvl-4"><p>保密系统要求：（1）实际上不可破，不能通过截获密文和明文密文对，要决定密钥和任意明文计算上不可行</p><p>（2）保密性不依赖于对加密体制或算法的保密。</p><p>（3）加密和解密算法适用于密钥空间中所有元素</p><p>（4）系统便于实现和使用</p></li><li class="lvl-4"><p>单钥体制加密和解密密钥相同，保密性取决于密钥的安全性，与算法的保密性无关。需要保密的只有密钥！</p><p>单钥体制加密方式：流密码（明文消息按字符逐位加密），分组密码（逐组加密）。用于数据加密和消息认证。</p><p>特点： 加密和解密分开，保密通信（多用户加密一个用户解读） 消息认证（一个用户加密多用户解读）</p></li><li class="lvl-4"><p>密码攻击类型：攻击者可获取的信息量划分。</p><p>最难的攻击类型是唯密文攻击，是穷搜索方法。</p><p>已知明文攻击的一种方法：可能字攻击。</p></li><li class="lvl-4"><p>加密算法无条件安全</p></li><li class="lvl-4"><p>shannon:密钥至少和明文一样长时，才能达到无条件安全。（一次一密可以达到）</p><p>比无条件安全弱：计算上安全。（1）破译代价大于加密信息价值（2）破译时间超过信息有用期。</p></li><li class="lvl-4"><p>古典密码分为单表和多表代换：每个字母逐个进行还是多个字母同时进行。</p></li><li class="lvl-4"><p>分组密码和流密码的区别：有无记忆性。流密码分为同步和自同步，我们学的是没有依赖输入明文的同步流密码。</p></li><li class="lvl-4"><p>同步流密码的加密器分为密钥流产生器和加密变换器，关键是密钥流产生器。</p></li><li class="lvl-4"><p>一次一密密码是加法流密码原型。密钥流具有性质：极大周期、良好统计特性、抗线性分析、抗统计分析。</p></li><li class="lvl-4"><p>流密码具有密文和明文长度一致的性质。</p></li><li class="lvl-4"><p>线性反馈移位寄存器输出序列的性质完全由其反馈函数决定。</p></li><li class="lvl-4"><p>流密码的安全性取决于密钥流的安全性，要求密钥流有良好随机性。因为是周期序列所以不可能做到随机性，所以叫做伪随机序列。</p></li><li class="lvl-4"><p>非线性序列：实现周期极大化。Geffe 、JK、Pless、钟控序列生成器。</p></li><li class="lvl-4"><p>分组密码实质是字长为n的数字序列的代换密码</p></li><li class="lvl-4"><p>分组密码要求：分组长度足够长、密钥量足够大、置换算法复杂、数据扩展小，差错传播小。</p></li><li class="lvl-4"><p>shannon提出设计密码系统两个方法：扩散和混淆，目的是抗击对系统的分析。shannon的理想密码系统：所有统计特性都与所使用的密钥独立。</p><p>扩散：密文中每一位由明文中多位产生：多次置换实现。</p><p>混淆：密文和密钥之间的统计关系复杂，代换算法实现。</p></li><li class="lvl-4"><p>分组密钥基于Feistel网络结构。</p></li><li class="lvl-4"><p>DES 分组长度64 ，密钥长度54。早期Lucifer密码发展修改来的。作为FIPS-46标准。</p></li><li class="lvl-4"><p>两重DES可能遇到的攻击：中途相遇攻击。</p></li><li class="lvl-4"><p>攻击迭代密码最有效的方法：差分密码分析。基本思想：通过分析明文对的差值对密文对的差值的影响来恢复密钥比特。</p></li><li class="lvl-4"><p>线性密码分析是对迭代密码的一种已知明文攻击，利用密码算法中不平衡的线性逼近。</p></li><li class="lvl-4"><p>DES的四种模式：（1） ECB电码本模式</p><p>（2）CBC密码分组链接模式</p><p>（3）CFB密码反馈模式</p><p>（4）OFB输出反馈模式</p></li><li class="lvl-4"><p>安全传输DES密钥，用ECB是最合适的</p></li><li class="lvl-4"><p>CFB和OFB将DES转换为流密码，不需要对消息填充为分组。</p></li><li class="lvl-4"><p>OFB的优点是传输过程中比特错误不会被传播。缺点是更容易受到篡改。</p></li><li class="lvl-4"><p>AES要求： 比三重DES快，至少和三重DES一样安全，明文长128，k长度128、192、256</p></li><li class="lvl-4"><p>Rijindael 原型是Square算法，策略是宽轨迹策略。针对差分分析和线性分析提出，优点是给出算法的最佳差分特征的概率及最佳线性逼近的偏差的界，可以分析算法抵抗差分密码分析以及线性分析的能力。</p></li><li class="lvl-4"><p>Rijndael标准： （1）抵抗所有已知攻击（2）速度快，编码紧凑（3）设计简单</p></li><li class="lvl-4"><p>轮函数由三个不同的可逆均匀变换组成。</p><p>线性混合层：确保多轮高度扩散；</p><p>非线性层：最坏情况非线性S盒并行使用；</p><p>密钥加层：实现一次性覆盖</p></li><li class="lvl-4"><p>Rijndael是迭代型分组密码，分组长度和密钥长度可变，可独立指定</p></li><li class="lvl-4"><p>SM4算法用于WAPI分组密码算法，数据分组长度128bit ，密钥长度128bit。加密和密码扩展用32轮迭代结构。</p></li><li class="lvl-4"><p>SM4中S盒以字节为单位的非线性替换，作用是混淆。线性变换部件是以字为单位，作用是扩散。合成变换T是线性变换和非线性变换的复合，作用是扩散和混淆。</p></li><li class="lvl-4"><p>祖冲之算法ZUC被批准为宽带无线移动通信系统LTE的国际标准，即4G国际标准。主要用于4G通信中移动用户设备UE和无线网络控制设备RNC之间无线链路上通信信令和数据的加解密。</p><p>算法以分组密码的方式产生面向字的流密码所使用的密钥流。输入128初始密钥和128IV，输出32bit字为单位的密钥流。</p></li><li class="lvl-4"><p>祖冲之算法分为三层：16级线性反馈移位寄存器、比特重组BR、非线性函数F</p></li><li class="lvl-4"><p>ZUC初始化模式每个寄存器单元不是32bit 是31bit,存在重用的情况，舍弃的是32bit的最低位。LFSR的作用是为中层的BR提供随机性好的输入驱动。</p></li><li class="lvl-4"><p>公钥密码体制基本工具不是代换和混淆，而是数学函数。</p><p>公钥密码算法解决两个问题：数字签名和密钥分配。Diffe Hellman</p></li><li class="lvl-4"><p>公钥密码最大特点：两个密钥将加密解密分开。特性：已知密码算法和加密密钥，求解密密钥不可行。</p></li><li class="lvl-4"><p>认证符特性：保持认证符的值不变而修改文件在计算上不可行。</p></li><li class="lvl-4"><p>公钥密码主要用于密钥管理和数字签字，因为密钥太长加密性能慢，太短会被穷举攻击。</p><p>另一种攻击方法是可能字攻击，本质是对56bit DES 密钥的穷搜索攻击。抵抗方法是发送的明文消息加上随机比特</p></li><li class="lvl-4"><p>Rabin是对RSA的修正：不是一一对应的单向陷门函数，一个密文对应多个明文。破译等价于大整数分解。</p></li><li class="lvl-4"><p>NTRU是基于环的公钥密码系统， 由Jeffrey Hoffstein 提出。特点：密钥短、容易产生、运算速度快、存储空间小。</p></li><li class="lvl-4"><p>单钥加密体制的密钥分配：密码系统强度取决于密钥分配技术。</p></li><li class="lvl-4"><p>KDC有主密钥为n个，会话密钥为n(n-1)/2 个。会话密钥有效期：面向连接协议，每次连接是才更新会话密钥；无连接协议每一次交换更换一次密钥。</p></li><li class="lvl-4"><p>无中心的密钥控制: 主密钥是n(n-1)/2 ，适用于小范围。</p></li><li class="lvl-4"><p>主密钥安全性高于会话密钥安全性，主密钥又称密钥加密密钥，会话密钥又称数据加密密钥。</p></li><li class="lvl-4"><p>单钥体制的密钥控制技术：密钥标签和控制矢量。</p><p>密钥标签是DES密钥中的8bit,限制了长度，以<u>密文形式传送</u>限制了控制方式。</p><p>控制矢量相当于一个文档，长度可变；用于和主密钥加密会话密钥。以<u>明文方式</u>发送矢量。</p></li><li class="lvl-4"><p>公钥加密体制的密钥管理：公开发布、公用目录表、公钥管理机构、公钥证书。</p></li><li class="lvl-4"><p>公钥证书由公钥证书管理机构CA为用户建立</p></li><li class="lvl-4"><p>公钥加密分配单钥密码体制的密钥：简单分配（主动攻击）、具有保密性和认证性的密钥分配（防止被动和主动攻击）</p></li><li class="lvl-4"><p>Diffe-Hellman密钥交换：目的是两个用户能够得到会话密钥，本身不能用于加密和解密。算法基于离散对数的困难性</p></li><li class="lvl-4"><p>随机数用于相互认证、会话密钥产生、公钥算法中密钥。随机数序列满足不可预测性和随机性</p><p>随机性：均匀分布和独立性。不可预测性：每个数独立于其他数</p></li><li class="lvl-4"><p>伪随机数产生器：线性同余算法、变形（幂形式、离散指数形式）</p></li><li class="lvl-4"><p>基于密码算法的随机数产生器：循环加密、DES的OFB模式、ANSI X9.17的伪随机数产生器（3个EDE）</p><p>ANSI X9.17的伪随机数产生器是密码强度最高的伪随机数产生器之一。</p></li><li class="lvl-4"><p>随机比特产生器：BBS产生器 （密码强度最强，安全性基于大整数分解的困难性）、Rabin产生器、离散指数比特产生器。</p></li><li class="lvl-4"><p>秘密分割门限方案：k为门限值。</p><p>两种秘密分隔门限方案：shamir门限方案（lagrange插值）、基于中国剩余定理的门限方案</p></li><li class="lvl-4"><p>抗击主动攻击：消息认证。用于验证消息真实性和完整性，消息的顺序性和时间性。不可否认性：数字签字，也可以用于抗击主动攻击。</p></li><li class="lvl-4"><p>消息认证技术和数字签字机制：认证符功能。产生方法：MAC 消息认证码、哈希函数</p></li><li class="lvl-4"><p>消息认证码是消息被密钥控制的公开函数作用后产生的、用作认证符的、固定长度的数值，称消息校验和。</p></li><li class="lvl-4"><p>消息认证吗：（1）数据认证算法（作为FIPS PUB113 ANSI标准，基于CBC的DES,IV取零向量）</p><p>（2）基于ZUC的完整性算法 128-EIA3</p></li><li class="lvl-4"><p>哈希函数：输入任意长度，输出固定长度。哈希函数不使用密钥，不能直接用于MAC。</p></li><li class="lvl-4"><p>MD5前身是MD4,SHA前期版本是SHA0,基于MD4算法。</p></li><li class="lvl-4"><p>HMAC用于将哈希函数构造MAC的方法，在IPSec和其他网络协议SSL中应用。</p></li><li class="lvl-4"><p>基于密码的哈希函数构造的MAC的安全性取决于镶嵌的哈希函数的安全性。</p></li><li class="lvl-4"><p>SM3哈希算法是中国国家密码管理局颁布的一种密码哈希函数。压缩函数是哈希函数安全的关键，</p><p>其中SM3输出256bit,非线性函数（压缩函数CF中FF和GG）用于混淆。线性函数（置换函数P0(X) P1(X)）用于扩散。</p></li><li class="lvl-4"><p>数字签名应用包括身份认证、数据完整性、不可否认性、匿名性。具有认证功能。</p></li><li class="lvl-4"><p>数字签字的产生：加密算法和特定数字签名算法（三元组表示）</p></li><li class="lvl-4"><p>数字签字的执行方式：直接方式和具有仲裁的方式。</p></li><li class="lvl-4"><p>直接方式执行数字签字，有效性取决于发送方密钥的安全性。</p></li><li class="lvl-4"><p>数字签字的标准DSS是美国NIST公布的FIPS PUB186 ，采用了SHA和一种新的签名技术，称为DSA.</p></li><li class="lvl-4"><p>DSS只能用于提供数字签名功能。</p></li><li class="lvl-4"><p>DSA是ElGamal和Schnorr两个签名方案的基础上设计的，安全性基于离散对数的困难性。</p></li><li class="lvl-4"><p>认证协议：对数据来源的可靠性、通信实体的真实性加以认证，防止欺骗伪装等攻击。分为相互认证和单向认证。分别对单钥体制和公钥体制进行讨论</p></li><li class="lvl-4"><p>保证消息的实时性方法：（1）时间戳（2）查询应答。</p><p>时间戳不能用于面向连接过程，询问应答不能用于无连接过程。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Pre4APS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> My Notes </tag>
            
            <tag> Pre4APS </tag>
            
            <tag> knowledge </tag>
            
            <tag> Cryptography </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Database Knowledge</title>
      <link href="/post/abcc0f12.html"/>
      <url>/post/abcc0f12.html</url>
      
        <content type="html"><![CDATA[<h1>数据库系统 知识点集合</h1><h4 id="数据库常用的存储引擎">数据库常用的存储引擎</h4><h5 id="InnoDB和MyISAM">InnoDB和MyISAM</h5><ul class="lvl-0"><li class="lvl-4"><p>InnoDB拥有<strong>行级别的锁定机制</strong>但是MyISAM只能锁一整张表；</p></li><li class="lvl-4"><p>InnoDB拥有更好的<strong>错误恢复机制</strong>；</p></li><li class="lvl-4"><p>InnoDB实现了<strong>事务、外键和约束</strong>，但是MyISAM没有；</p></li><li class="lvl-4"><p>在InnoDB中<strong>数据和索引是集中存储</strong>的而在MyISAM中数据和索引是分开存储的（索引结构的叶子节点指向了数据的对应行），即InnoDB中采用了聚簇索引机制（将数据存储与索引放到了一块，找到索引也就找到了数据）。myisam通过key_buffer把<strong>索引先缓存到内存中</strong>，当需要访问数据时（通过索引访问数据），在内存中直接搜索索引，然后通过索引找到磁盘相应数据，这也就是为什么索引不在key buffer命中时，速度慢的原因。</p></li></ul><h4 id="数据库的三大范式">数据库的三大范式</h4><p>第一范式：确保每列保持原子性，每个字段都是不可再分的原子值；</p><p>第二范式：确保表中的每列都和主键相关。非prime列不能和candidate key中任何一个子集合相关。</p><p>↑它违反了第二范式，因为Manufacturer country是non-prime的，但是它跟{Manufacturer}相关，但不和{Manufacturer, Model}整个相关。</p><p>第三范式：<strong>确保每列都和主键列直接相关而不是间接相关</strong>，<strong>每个非关键字列都独立于其他非关键字列，并依赖于关键字，第三范式指数据库中不能存在传递函数依赖关系</strong></p><p>↑违反了第三范式。因为非候选键winner’s data of birth与winner相关，winner和tournament以及year相关，形成了<strong>间接相关</strong>，应该对表进行拆分。任何非主属性不依赖于其它非主属性。</p><h4 id="数据库的存储数据类型">数据库的存储数据类型</h4><ul class="lvl-0"><li class="lvl-4"><p>整数：TINYINT SMALLINT MEDIUMINT INT BIGINT分别占用8、16、24、32、64位存储空间。值 得注意的是，INT(10)中的10只是表示显示字符的个数，并无实际意义。</p></li><li class="lvl-4"><p>浮点数：FLOAT、DOUBLE及DECIMAL为浮点数类型，DECIMAL是利用字符串进行处理的，能存储精确的小数。相比于FLOAT和DOUBLE，DECIMAL的效率更低些。FLOAT、DOUBLE及DECIMAL都可以 指定列宽，例如<strong>FLOAT(5,2)表示一共5位</strong>，<strong>两位存储小数部分</strong>，三位存储整数部分。</p></li><li class="lvl-4"><p>字符串：CHAR  &amp; VARCHAR。前者定长，后者变长。<strong>相对于定长的字符串而言，变长的字符串能够更加节省空间</strong>。对于经常变更的数据使用CHAR更好，因为CHAR不容易产生碎片。避免使用BLOB或TEXT，因为查询时候会使用临时表，造成严重的性能开销。</p></li><li class="lvl-4"><p>日期类型：</p></li><li class="lvl-4"><p>比较常用的有year、time、date、datetime、timestamp等，datetime保存从1000年到9999年的时间，精度位秒，使用8字节的存储空间，与时区无关。timestamp和UNIX的时间戳相同，保存从1970年1月1日午夜到2038年的时间，精度到秒，使用四个字节的存储空间，并且与时区相关。</p></li></ul><h4 id="数据库索引机制">数据库索引机制</h4><p>为加快数据检索速度我们可以对表中一个列或多个列建立search index，如B+树（所有数据都在叶节点）或者哈希表（redis等nosql好像是用的哈希，哈希索引一般多用于精确的等值查找）。对于经常查询但是不怎么变化的数据我们可以采用索引的方式。但存在缺点是占用物理空间，对索引的维护也是一个overhead。</p><ul class="lvl-0"><li class="lvl-4"><p>聚簇索引：以主键作为B+树索引键值，叶子节点保存完整的数据记录。如果表中没有定义主键，InnoDB 会选择一个<strong>唯一的非空索引</strong>代替。如果没有这样的索引，InnoDB 会<strong>隐式定义一个主键</strong>来作为聚簇索引。**聚簇索引只能有一个。**可以建立辅助索引，在 B+Tree 的叶子节点中只存了索引列和主键的信息。</p></li><li class="lvl-4"><p>非聚簇索引：以非主键的列作为B+树索引，叶子节点记录了主键，然后再从聚簇索引中找到对应的数据记录。</p></li></ul><p>为什么不用红黑树？第一，红黑树是二叉树，深度比B+树高，意味着磁盘I/O可能会更大一些。第二、红黑树一个节点只能存一个数据，但是B+树的节点可以存储大量数据。第三，B+树利用了磁盘预读取机制，将一个节点的大小设置成一个页，就能过通过一次IO完全载入。计算机存储分配都是按页对齐的，就实现了一个node只需一次I/O。</p><p>哈希表 vs B+树：</p><ul class="lvl-0"><li class="lvl-4"><p>哈希表不支持排序，不支持范围查询；</p></li><li class="lvl-4"><p>哈希表不支持模糊查询；</p></li><li class="lvl-4"><p>哈希表中存在哈希冲突，可能会造成性能的不稳定。</p></li></ul><p>InnoDB 存储引擎有一个特殊的功能叫“自适应哈希索引”，当某个索引值被使用的非常频繁时，会在 B+ 树索引之上再创建一个哈希索引，这样就让 B+Tree 索引具有哈希索引的一些优点，比如：快速的哈希查找。</p><p>MySQL的索引失效情况：</p><ul class="lvl-0"><li class="lvl-4"><p>条件中有or（要想使用or，又想让索引生效，<strong>只能将or条件中的每个列都加上索引</strong>）</p></li><li class="lvl-4"><p>多列索引时不满足<strong>最左前缀原则</strong>：mysql 建立多列索引（联合索引）有最左前缀的原则，即最左优先</p></li><li class="lvl-4"><p>如果有一个 2 列的索引 (col1, col2)，则已经对 (col1)、(col1, col2) 上建立了索引；如果有一个 3 列索引 (col1, col2, col3)，则已经对 (col1)、(col1, col2)、(col1, col2, col3) 上建立了索引；</p></li><li class="lvl-4"><p><strong>like查询是以%开头</strong></p></li><li class="lvl-4"><p>如果查询列类型是字符串，但在条件中未将数据使用引号引用起来，<strong>即字符串和数字相比较</strong></p></li><li class="lvl-4"><p>mysql<strong>优化器认为用全表扫描要比使用索引快</strong></p></li></ul><h4 id="事务的特性">事务的特性</h4><ul class="lvl-0"><li class="lvl-4"><p>原子性：事务包含的操作要么全部成功要么全部失败并回滚；</p></li><li class="lvl-4"><p>一致性：事务必须保证某种约束一直是有效的；</p></li><li class="lvl-4"><p>隔离性：事物之间是互不干扰的；</p></li><li class="lvl-4"><p>永久性：事务一旦提交，数据库中的数据改变就是永久的了。</p></li></ul><p>ACID。Atomicity, Consistency, Isolativity, Durability.</p><h4 id="脏读、幻读、不可重复读">脏读、幻读、不可重复读</h4><ul class="lvl-0"><li class="lvl-4"><p>脏读：指的是读到了其他事务还没有提交的数据；</p></li><li class="lvl-4"><p>不可重复读：指的是一个事务中前后读取数据不一致，读到了其他事物已提交的数据，主要是针对update操作；</p></li><li class="lvl-4"><p>幻读：指的是一个事务中前后读取的数据总量不一致，例如前后行数不同，针对insert操作。</p></li></ul><h4 id="事务的隔离级别">事务的隔离级别</h4><ul class="lvl-0"><li class="lvl-4"><p>READ_UNCOMMITTED：读未提交，即能够读取到没有被提交的数据，会造成上述三种错误读；</p></li><li class="lvl-4"><p>READ_COMMITTED：读已提交，即能够读到那些已经被提交的数据，能够解决脏读；</p></li><li class="lvl-4"><p>REPEATABLE_READ：重复读取，在数据读取出来之后<strong>加锁</strong>，明确数据读取出来就是为了更新所用。解决了脏读、不可重复读。</p></li><li class="lvl-4"><p>SERIALIZABLE：**串行化。没有任何并发性。**所有的问题都能够解决了。</p></li></ul><h4 id="锁机制">锁机制</h4><ul class="lvl-0"><li class="lvl-4"><p>共享锁：被加锁的对象可以被持有锁的事务读取，但是不能够修改。其他事务也可以继续加锁。shared_ptr</p></li><li class="lvl-4"><p>排它锁：被加锁的对象只能被持有锁的事务读取和修改，其他事物无法在该对象上加其他锁，也不能读写。unique_ptr</p></li></ul><h4 id="基于锁机制的封锁协议">基于锁机制的封锁协议</h4><ul class="lvl-0"><li class="lvl-4"><p>一级封锁协议：事务在对需要修改的数据上面（就是在发生修改的瞬间） 对其加共享锁（其他事务不能更改，但是可以读取-导致“脏读”），直到事务结束才释放。事务结束包括正常结束（COMMIT）和非正常结束（ROLLBACK)。</p></li><li class="lvl-4"><p>二级封锁协议：事务在对需要更新的数据上面（就是在发生修改的瞬间） 对其加排它锁（无法被其他事务读写），避免了脏读。事务 对当前被读取的数据上面加共享锁（当读到时加上共享锁），<strong>一旦读完该行，立即释放该行的共享锁。</strong></p></li><li class="lvl-4"><p>三级封锁协议：事务在对需要更新的数据上面（就是在发生修改的瞬间） 对其加排它锁（无法被其他事务读写）。事务在读取数据的瞬间必须先对其加上一把共享锁，<strong>但是事务结束的时候才释放，保证了可重复读。</strong></p></li><li class="lvl-4"><p>四级封锁协议：对事务涉及的表直接加表锁。</p></li></ul><h4 id="数据库中水平切分和垂直切分的区别">数据库中水平切分和垂直切分的区别</h4><ul class="lvl-0"><li class="lvl-4"><p>水平切分：水平切分是将同一个表中的记录拆分到多个结构相同的表中。当一个表的数据不断增多时，水平切分是必然的选择，它可以将数据分布到集群的不同节点上，<strong>从而缓存单个数据库的压力。</strong></p></li><li class="lvl-4"><p>垂直切分：从逻辑上将数据库分割。垂直切分是将一张表按列切分成多个表，通常是按照列的关系密集程度进行切分，也可以利用垂直切分将经常被使用的列和不经常被使用的列切分到不同的表中。例如：将原来的电商数据库垂直切分成商品数据库、用户数据库等。</p></li></ul><h4 id="数据库的主从复制">数据库的主从复制</h4><p>主从复制、读写分离一般是一起使用的。目的很简单，就是<strong>为了提高数据库的并发性能</strong>。</p><p>主从复制中主要涉及到三个线程：binlog、IO线程和SQL线程。</p><ol><li class="lvl-4"><p>binlog 线程 ：负责将<strong>主服务器上的数据更改</strong>写入二进制日志（Binary log）中。</p></li><li class="lvl-4"><p>I/O 线程 ：负责<strong>从主服务器上读取二进制日志</strong>，并写入从服务器的重放日志（Relay log）中。</p></li><li class="lvl-4"><p>SQL 线程 ：负责读取重放日志并重放其中的 SQL 语句。</p></li></ol><p>假如一个服务器开放 Ｎ 个连接给客户端，这样有会有大并发的更新操作, 但是从服务器的里面读取 binlog 的线程仅有一个， 当某个 SQL 在从服务器上执行的时间稍长或者由于某个 SQL 要进行锁表就会导致主服务器的 SQL 大量积压，未被同步到从服务器里。这就导致了主从不一致， 也就是主从延迟。</p><p>读写分离：提高并发性，降低主服务器的读写竞争可能，防止单点失效。读写分离常用代理方式来实现，代理服务器接收应用层传来的读写请求，然后决定转发到哪个服务器。主服务器处理写操作以及实时性要求比较高的读操作，而从服务器处理读操作。</p><h4 id="错误恢复">错误恢复</h4><p>采用undo log和redo log。undo记录修改前的数值，redo记录修改后的数值，先进行一次redo，再进行一次undo。为了加快速度可以采用checkpoint机制，保证checkpoint之前的事务都已经被正确commit掉了。checkpoint错误恢复机制是反向扫end to start of checkpoint然后undo没有commit的事务，随后把夹杂在checkpoint之间的事务给undo了，最后把start of checkpoint to end的事务给redo了。</p><h4 id="意向锁、共享锁、排它锁">意向锁、共享锁、排它锁</h4><p>意向锁是在存在<strong>行锁场景下</strong>的表锁快速失败机制。A锁了一行但是B想锁表的话，会导致锁定效率低，意向锁可以提前告知B的表锁不能锁。<strong>IX，IS是表级锁，不会和行级的X，S锁发生冲突。只会和表级的X，S发生冲突。</strong></p><p>此处XS是表级别的锁。</p><p>排他锁可以使用命令<code>SELECT ... FOR UPDATE</code>对几行的数据进行加锁。</p><h4 id="乐观锁和悲观锁">乐观锁和悲观锁</h4><ul class="lvl-0"><li class="lvl-4"><p>悲观锁：总是假设最坏的情况，每次取数据的时候都认为别人会修改这个数据，所以总是对数据上锁。</p></li><li class="lvl-4"><p>乐观锁：总是假设事务读取数据的时候没有干扰，不去上锁。在更新的时候会判断一下是否有人更新了这个数据。乐观锁协议一般使用的是时间戳、版本号等机制。如果发现事务发现执行期间版本号发生了改变，那么久拒绝本次修改。</p><ul class="lvl-2"><li class="lvl-8">如果<strong>业务要求比较高的响应速度</strong>就不要使用悲观锁；</li><li class="lvl-8">如果<strong>冲突频率不高</strong>，建议采用乐观锁；</li><li class="lvl-8">如果<strong>重试代价很大</strong>使用悲观锁。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Pre4APS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> My Notes </tag>
            
            <tag> Pre4APS </tag>
            
            <tag> knowledge </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Structures  Knowledge</title>
      <link href="/post/37965384.html"/>
      <url>/post/37965384.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Pre4APS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pre4APS </tag>
            
            <tag> knowledge </tag>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Machine Learning Knowledge</title>
      <link href="/post/7f08f35c.html"/>
      <url>/post/7f08f35c.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Pre4APS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> My Notes </tag>
            
            <tag> Pre4APS </tag>
            
            <tag> knowledge </tag>
            
            <tag> ML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漫步华尔街</title>
      <link href="/post/a7712224.html"/>
      <url>/post/a7712224.html</url>
      
        <content type="html"><![CDATA[<h1>《  商法（保险、票据、证券） 》课程期中作业</h1><p>伯顿·G·马尔基尔.漫步华尔街（原书第11版）.机械工业出版社.2018年</p><h2 id="写在最前">写在最前</h2><p>本文主要以摘录和评论、心得的方式写完，其中我的心得和评论将在摘录的原文之下以阴影背景的形式给出，以和摘录做到区分。</p><h1>漫步华尔街</h1><h2 id="作者的投资观点">作者的投资观点</h2><p>最新版严格地检视了以前各版一直持有的有关股市“随机漫步”的基本观点：股市对股票的定价非常有效，连被蒙住眼睛的猴子朝报纸股票行情版投掷飞镖，完全随机地选出投资组合，也能获得和专家管理的投资组合一样的业绩。经过40年，这一观点一直颠扑不破。2/3以上的专业投资组合经理，其表现都比不上无人管理的以大型指数为标的的指数基金。然而，仍有学者和专业人士怀疑这一观点的可靠性。——书中前言部分第VI页</p><h3 id="我的评论、心得">我的评论、心得</h3><p>本书的作者，在前言中就开宗明义：强调自己对市场这个机制的信任。同时，前言中我们也看出，本书的初版在1973年就面世了，而这么多年来，本书虽然数次再版，但是仍然坚持初版的观点，这一点是极为吸引我的。同时也体现了后续这本书的大致走向。</p><h2 id="什么是投资">什么是投资</h2><p>我将投资视为一种购买资产的方式，其目的是获得可以合理预期的收入（股利、利息或租金），并且在较长时期里获得资产增值。投资与投机的区别，通常就在于对投资回报期的定义和投资回报的可预期性。投机者买入股票，期望在接下来的几天或几周内获得一笔短期回报；投资者买入股票，期望股票在未来会产生可靠的现金流回报，在几年或几十年里带来资本利得。…实际上，若给本书加上一个副标题——“稳步致富”恐怕会很贴切。——书第5页</p><h3 id="我的评论、心得-2">我的评论、心得</h3><p>在本书正文的一开始，作者便纠正了一个关于投资的误区：即投资可以短时间内获得高额回报。尽管确实有人因为好运气实现了这一点，但作者仍将投资视为资产保值、增值的一种技术手段，同时希望本书的读者通过学习这类“技术”，来获得投资的本领。</p><h2 id="投资的理论">投资的理论</h2><p>一切投资回报，无论来自普通股还是稀有钻石，都不同程度地取决于未来事件。正是这一点造就了投资的魅力，投资就是一种冒险活动，是否成功取决于预测未来的能力。——书第7页坚实基础理论声称：每一个投资工具，无论它是一只普通股还是一处房地产，都有一个被称为内在价值（intrinsic value）的坚实基础，通过细致分析这个投资工具的现状和前景，可以确定它的内在价值。当市场价格下跌而低于（上涨而高于）作为坚实基础的内在价值时，买入（卖出）的机会便出现了，因为按照该理论的说法，这种价格波动最终总会得以修正。照此看来，投资就变成了一件枯燥而简单的事情，不过是将某物的实际价格与其坚实基础价值进行比较。——书第8页他认为专业投资者不愿将精力用于估计内在价值，而宁愿分析投资大众将来会如何行动，分析他们在乐观时期如何将自己的希望建成空中楼阁。成功投资者会估计出什么样的投资形势最易被大众建成空中楼阁，然后在大众之前先行买入，从而占得市场先机。——书第10页</p><h3 id="我的评论、心得-3">我的评论、心得</h3><p>这两种理论实际上一种是应用数学、经济学等内容，估算内在价值，而对第二种我更感兴趣，这比较接近行为金融学的内容，比如著名的阿莱斯悖论就展示了人的非理性的一面。我个人认为，投资问题，也确实不是完全的数学问题。而在后面第二章“大众疯狂”里，作者就详细介绍了投资市场的非理性行为。</p><h2 id="非理性行为">非理性行为</h2><p>在历史上，每出现一次壮观的经济热潮，一个最显著的特征便是贪婪的欲望一时间会恣意泛滥。在疯狂追逐金钱的过程中，市场参与者将价值的坚实基础抛诸脑后，转而沉迷于靠不住却又令人发狂的臆想：以为自己也能建成空中楼阁，在短时间内大发横财。这种想法在历史上曾风靡一些国家。——书第14页股票交易的操纵行为越来越恶劣，不断刷新着寡廉鲜耻的纪录，最能说明这一点的便是联手做庄。有庄家曾操纵美国无线电公司的股价，短短4天之内便将股价拉升61%。联手做庄一方面要求参与的人密切配合，另一方面要求完全漠视投资大众。一般说来，当若干个交易者为操纵某只股票而串通一气时，运作便启动了。他们选定一个庄主（此人这方面的运作能力应颇为高超），并相互承诺不得通过私下操作来出卖其他成员。——书第26页根据我的个人经验，在市场上不断输钱的人，正是那些未能抵制郁金香球茎热一类事件且被其冲昏头脑的人。其实，要在股市赚钱也并不难。真正难以避免的，是人们受到诱惑时，情不自禁地将自己的资金投向短期快速致富的投机盛宴之中。这一教训如此显而易见，然而又常常为人们所忽视。——书第32页那么，这一时期美国证券交易委员会（SEC）在哪里呢？难道新股发行人在发行新股时不得按规定向证券交易委员会申请注册吗？难道不能对发行人（及其承销商）因其虚假、误导性陈述进行处罚吗？答案都是肯定的。证券交易委员会也在其位谋其政，但是根据法律法规，它只能默默地袖手旁观。只要公司准备好（并向投资者提供）符合要求的招股说明书，证券交易委员会就无力阻止投资者自尝苦果。——书第36页在集团企业风潮这一投机阶段过后，暴露出两个令人不安的因素。首先，集团企业并非总能控制自己疆域辽阔的帝国。…其次，政府和会计界对日益加快的并购步伐和可能存在的违规行为表示担忧。这两方面的担忧促使投资者抛售股票，从而降低了（在大多数个股上消除了）只是因预计收购过程本身会产生盈利而付出的高倍市盈率。——书第42页于是，20世纪60年代末，业绩为王的投资理念风靡华尔街。…因此，所谓的概念股便应运而生了。<br>…很多华尔街人把这种做法视为一种好得无以复加的新投资策略，其实，约翰·梅纳德·凯恩斯早在1936年就发现了它的所有奥妙。——书第43-44页不过，这次发行之所以别具一格，是因为这次发行表明一分钱仍能买到很多东西。公司提交的发行方案是以区区一分钱的价格发行数单位复合股权凭证，每单位由一股股票与两股认购权证构成。——书第48页股市历史给我们的教训非常清楚。在对股票进行定价时，投资者中流行的观念和做法可能而且经常会起到关键性的作用。这时，股市的运行就很符合空中楼阁理论所做的阐述。正因为如此，投资游戏有时可能会极其危险。——书第53页然而，他们的收入并非建立在分析质量之上，而是建立能否为公司引来利润丰厚的投资银行业务之上。他们会含蓄地向投资银行业务客户许诺，持续进行的有利研究将为IPO新股上市后的市场表现提供持续的支持。——书第67页</p><h3 id="我的评论、心得-4">我的评论、心得</h3><p>在本书第一部分中，作者以大篇幅介绍了历史上关于投资的种种狂热引发的泡沫和危机。并进一步解释了“空中楼阁”理论和作者自己关于投资的观点。当然，这部分实际上出现了大量专业名词，比如：市盈率、股票、股价、股权、成分股、个股、折现、折旧、收益率、回报率、IPO等，这些专业名词在本书中并没有被解释，这一点正好与我们课内所学的知识联系上了，如果没有在课内学到的知识，想必在阅读本书的过程中仍需到大量查阅概念，这将会使阅读过程变得缓慢。同时，我们也从这一部分，可以窥探到投资市场的复杂，从一开始的大众狂热，到后来有规模、有组织的金融犯罪，这一切不光引发了极其严重的经济问题，更对社会发展产生影响。因此，我们可以在这一部分体会到商法之中，立法的目的和精神，至少在历史上几次大的泡沫之后，我们都观察到了商法尤其是商法对于投资者的保护。</p><h2 id="投资建议">投资建议</h2><p>据我个人的经验，在市场上屡屡输钱的人，正是那些未能抵制被郁金香球茎热一类事件冲昏头脑的人。其实，要在股市赚钱并不难。我们在后面的内容中会看到，投资者只要购买并持有涵盖范围广泛的股票组合，就能获得相当不错的长期回报。真正难以避免的，是受到诱惑时情不自禁地将自己的资金投向短期快速致富的投机盛宴之中。——书第76-77页市场并非总是正确，甚至通常都不正确。但是，没有任何个人或机构能始终如一地比市场整体知道得更多。——书第86页因此，只是买入并持有符合理财目标的多样化投资组合，会使你节省投资费用、经纪佣金和税款。——书第141页</p><h3 id="我的评论、心得-5">我的评论、心得</h3><p>本部分摘录主要来自于原书中的第一部分结尾和第二部分，由于原书中充满了大量的技术细节，本文不予摘录，仅摘录一些提纲挈领的投资意见。我个人认为，在本书长达180余页的描述中，我们可以学到两个最重要的知识：一是不要盲目，不要狂热地追逐利益，要保持理性；二是相信市场，市场有能力提供我们所需的信息，我们所缺乏的仅仅是获取和分析信息的能力。当然，这两点很难做到，但是如果可以坚持这样的原则，我们就可以避免一夜破产的下场。</p><h2 id="关于风险">关于风险</h2><p>风险且只有风险，决定了收益高于或低于市场平均水平的幅度。——书第173-174页在金融领域，文献记述最多的一个观点是：平均而言，投资者由于承担了更大的风险，获得了更多的投资回报。——书第177页投资组合理论的立论前提是：所有投资者都像我的夫人一样——厌恶风险。他们想得到高收益和有保证的投资结果。该理论告诉投资者如何将股票纳入投资组合，以便与寻求的收益相对应的风险尽可能实现最小化。该理论也对一句存在已久的投资格言给出了严格的数学证明，这句格言说的是，对于任何想降低风险的人，多样化都是应采用的一个明智策略。——书第179页总而言之，历久长新的多样化操作在今天也一如既往是强有力的投资策略。——书第190页资本资产定价模型背后的基本逻辑是：承担多样化可以分散掉的风险，不会获得任何溢价收益。因此，为了从投资组合中获取更高的长期平均收益，你得相应提高组合中多样化不能分散掉的风险的水平。根据这一理论，聪明的投资者通过运用一种风险测量工具来调整自己的投资组合，就可以战胜市场。这种工具便是声名远播的β（beta）。…计算β值，实质上就是将单只股票（或投资组合）的变动与市场整体的变动做一个比较。<br>——书第192-193页如此看来，要获得更高的长期投资收益，唯一的出路就是承担更多的风险。遗憾的是，并不存在完美的风险测量方法。——书第207页大致说来，有四种因素使非理性的市场行为得以存在，这些因素是：过度自信、判断偏差、羊群效应以及风险厌恶。——书第212页唯一能保护你的，是要认识到：任何东西若看上去太好，显得不真实，那毫无疑问就是假的。——书第240页现在没有任何理由调整本书先前数版中长期坚持的投资建议：每一个投资组合的核心部分，应当由成本低廉、税收高效、股票涉及面广泛的指数基金构成。如果你的确想冒险赌一赌某个风险因素未来会产生超额收益，那么只有投资组合的核心部分由按市值确定权重的涉及面广泛的指数基金构成时，你的做法才算是非常谨慎的。如果你确实希望向投资组合中加入额外的风险因素，比如向小市值股票做些额外的风险暴露，那么通过购买成本低廉、以市值确定权重、追踪小市值股票指数的基金，便可以非常有效地达到目的。——书第268页</p><h3 id="我的评论、心得-6">我的评论、心得</h3><p>本部分内容，主要来自于原书中的第三部分。首先，这一部分有大量的数学、统计学内容，关于这些本文不予摘录。这一部分介绍了一个较为古老但是公认的理论：即风险与收益挂钩，风险越大收益越高。当然，作者进一步阐述了关于风险的内容，尤其是介绍了计算系统风险的β这一方法，尤其花了大篇幅介绍了很多模型。原书第11章主要介绍了行为金融学的相关理论，这一部分是对前面大量数学计算得出结论的补充和修正。行为金融学比较好地反映了人们的一种赌徒心理，这一部分也是数学计算所解释不了的，不过关于心理学是一个很难量化的内容，因此这部分的投资建议恐怕对初学者并不适用，因为对人的心理的了解我认为主要来源于经验而不是计算。我个人认为，这一部分的理论非常精彩，但是部分案例有一定程度的过时，本书的第12版好像已经出版，可能会介绍一些更新的案例。</p><h2 id="生命周期投资指南">生命周期投资指南</h2><p>即使是同样的投资工具，对于不同的人也有着不同的意义，这取决于每个人的风险承受能力。——书第332页资产配置五项原则：</p><ol><li class="lvl-4">历史表明，风险与收益相关。</li><li class="lvl-4">投资普通股和债券的风险，取决于持有投资品的期限长短；投资者持有期限越长，投资收益的波动性便会越小。</li><li class="lvl-4">定期等额平均成本投资法虽有争议，但可以作为降低股票和债券投资风险的一种有用的方法。</li><li class="lvl-4">重新调整投资组合内资产类别的权重，可以降低风险，在某些情况下，还可以提高投资收益。</li><li class="lvl-4">必须将你对风险所持有的态度与你承担风险的能力区分开来。你承担得起的风险取决于你的总体财务状况，包括你的收入类型和收入来源，但不包括投资性收入。——书第333-334页某一特定需要必须由专门用以满足这一需要的特定资产来提供资金。——书第347页</li></ol><h3 id="我的评论、心得-7">我的评论、心得</h3><p>这一部分主要来自于原书的第四部分和第五部分，主要摘录了作者关于对于投资者在人生中各个阶段所给出的通用化建议，这是由于书中的举例主要来自于美国人的投资习惯，但是中国的国情特殊，比如储蓄这一点，中国投资者对于储蓄的热情就远远超过美国，而各个年龄段中美投资者的差异就会更大了，因此对于原书中的细节问题不予摘录。在本部分，投资者可以学到很多哲理，比如要根据自己对于风险的态度来调整自己的投资方案，并且妥善处理投资组合。同时，证券市场上，如果能够坚持并长期投资，最后的收益大概率是可观的。</p><h2 id="一些其他内容">一些其他内容</h2><p>菲吉先生并非唯一欺骗华尔街的人。其他集团企业的管理人在迷惑投资界的过程中，几乎创造了一种全新的语言。他们谈论市场矩阵、核心技术支点、模块化构成要素、核子增长理论。虽然华尔街专业人士谁也没有真正弄懂这些话的意思，但对于身处技术主流之中，他们感到既惬意又温暖。——书第41页正是在这一天，我们终于见识了，这家若在5年之前连尽职调查也通不过的公司，投资者居然会乐意往里扔钱。——书第66页有一次，我的一位图表师朋友请我共进晚餐，席间他就说过这样的话，我当场被食物噎着，弄得自己非常尴尬。此后，我就立下个规矩，永远不和图表师一起吃饭。这不利于消化。——书第116页老妇人说：“好吧，我的第三个愿望是把我的猫变成年轻英俊的王子。”一眨眼，年轻王子出现了，他转过脸问老妇人：“你把我阉了，现在不觉得后悔吗？”——书第209页</p><h3 id="我的评论、心得-8">我的评论、心得</h3><p>本书作者行文幽默风趣，作为入门的图书，想必以吸引读者为重要任务，同时由于本书充斥着大量专业名词和数学计算，因此这样的写作风格也使读者在阅读期间得到了一定的放松。不过，作者喜欢在书中穿插一些黄色笑话，可能与美国开放的文化环境有关。</p><h2 id="本书读后感">本书读后感</h2><p>这部分我对本书做出一个整体的评价。本书的定位是给投资者的投资建议，内容非常详实，在说理清晰的同时也辅以实务操作，不光列举了主流的、作者信奉的学术观点，也给出了合理的投资建议，我认为这是一本优秀的投资入门作品。不过，本书的一些奇怪之处在于，对于经济学中的种种概念解释较少，很多基础（甚至并不基础）的概念并未给出定义，相反书中对于数学和统计学的计算花了较大篇幅，可能是作者默认读者了解证券市场的专业名词但却不掌握估值能力。这本书我是在学期末所阅读的，事实上如果没有学习商法这门课程，恐怕由于知识的匮乏，在阅读本书时会遇到较大困难。本书在阅读过后，我无法将书中内容和商法紧密联系起来，不过书中前半部分对于种种泡沫的介绍，以及相关法律规定，也许可以得出一个我自认为较深刻的商法主旨：在我们相信市场有效的前提下，商法的核心精神是维持“市场”这一经济领域的核心的有效运转。尽管本书是面向投资者的，不过商法并不偏袒市场中的任何一方，尽管我们在课上学到了太多保护投资者的法律内容，但商法仍应该是维护市场的利器，这一点上学习商法可能会使我们得到一个较高的视角，而不是局限于技术上的细节。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 法学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读刘邦</title>
      <link href="/post/19207635.html"/>
      <url>/post/19207635.html</url>
      
        <content type="html"><![CDATA[<h1>写在最前</h1><p>最近花了一些时间，通宵读了有关刘邦的内容，受益匪浅、感慨良多。本篇文章将会持续更新我所看重的史实以及我的收获。仅仅浅显的阅读，我就下定决心做出了人生中的重要决定，相信在精读之后会大有裨益。</p><h1>一、怎样对我有好处</h1><p>更新于2022/12/3</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm-Week2</title>
      <link href="/post/d91aba56.html"/>
      <url>/post/d91aba56.html</url>
      
        <content type="html"><![CDATA[<h1>最近压力太大，算法学习暂时停更</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>computer-network-lab3</title>
      <link href="/post/f8e0a368.html"/>
      <url>/post/f8e0a368.html</url>
      
        <content type="html"><![CDATA[<h1>LAB3要求</h1><p>实验3-1：利用数据报套接字在用户空间实现面向连接的可靠数据传输，功能包括：建立连接、差错检测、确认重传等。流量控制采用停等机制，完成给定测试文件的传输。实验3-2：在实验3-1的基础上，将停等机制改成基于滑动窗口的流量控制机制，采用固定窗口大小，支持累积确认，完成给定测试文件的传输。实验3-3：在实验3-2的基础上，选择实现一种拥塞控制算法，也可以是改进的算法，完成给定测试文件的传输。实验3-4：基于给定的实验测试环境，通过改变延迟时间和丢包率，完成下面3组性能对比实验：（1）停等机制与滑动窗口机制性能对比；（2）滑动窗口机制中不同窗口大小对性能的影响；（3）有拥塞控制和无拥塞控制的性能比较。</p><p>实验要求：实现单向传输。对于每一个任务要求给出详细的协议设计。给出实现的拥塞控制算法的原理说明。完成给定测试文件的传输，显示传输时间和平均吞吐率。性能测试指标：吞吐率、时延，给出图形结果并进行分析。完成详细的实验报告（每个任务完成一份）。编写的程序应结构清晰，具有较好的可读性。提交程序源码和实验报告。</p><p>评分标准：每个任务最高100分。每个任务分值分配协议设计、功能实现（40分）演示并讲解（20分）程序及规范性（20分）实验报告（20分）</p><h1>助教给的路由程序</h1><p>就是client发送给路由程序，路由程序给服务端，同理服务端给路由程序，路由程序给客户端。所以说在代码中：client和server都发送到路由段，同理，接收端也接收路由的信息。因此，在程序里需要声明路由器需要的套接字以及套接字需要绑定的地址，然后进行转发功能。<a href="https://github.com/wbf1015/computer_network/tree/main/%E5%A4%A7%E4%BD%9C%E4%B8%9A/routeruse">这里给出魏伯繁的一个讲解</a>反正我是用不了那个破玩意，只能自己设置丢包和延时玩了。原理很简单，弄个随机数，然后mod100，然后设置一个阈值，超过了就啥都不干，就是丢包了。延时就是sleep。</p><h1>实验评价</h1><p>很烂的实验，很无语的实验，首先这门课没有实验指导书，但是让你随意发散着做，会有几种结果：要不就是一通抄，要不就是一堆人卷疯了，要不就是魔改学长的作业，只有很小的可能是自己在过程中有了巨大的收获。因此建议随便找一个学长学姐的抄抄改改，然后自己学学cs144。如果说要说什么好处的话，这个实验和理论课是结合得较为紧密的，某种程度上比编译和操作系统合理一些。如果是作为加深课堂知识的角度做的实验，是有一定意义的。当然，这个破实验我自己写了以后才发现是真浪费时间。</p><h1>四个小lab的连接</h1><p><a href="https://tephrocactushc.github.io/post/d2d6a337.html">3-1</a><br><a href="https://tephrocactushc.github.io/post/4bdff28d.html">3-2</a><br><a href="https://tephrocactushc.github.io/post/3cd8c21b.html">3-3</a><br><a href="https://tephrocactushc.github.io/post/a2bc57b8.html">3-4</a><br><a href="https://github.com/TephrocactusHC/netweork">github仓库</a></p><h6 id="小技巧">小技巧</h6><p>待出分后更新，对21级及以后的宝贝们应该帮助巨大</p>]]></content>
      
      
      <categories>
          
          <category> cs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer network </tag>
            
            <tag> lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>computer-network-lab3-4</title>
      <link href="/post/a2bc57b8.html"/>
      <url>/post/a2bc57b8.html</url>
      
        <content type="html"><![CDATA[<h1>要求</h1><p>NKU COMPUTER NETWORK LAB3-4<br>基于给定的实验测试环境，通过改变延迟时间和丢包率，完成下面3组性能对比实验：（1）停等机制与滑动窗口机制性能对比；（2）滑动窗口机制中不同窗口大小对性能的影响；（3）有拥塞控制和无拥塞控制的性能比较。</p><h1>本实验没啥可说的。</h1><p>注意尽量不要使用给的router.exe跑程序，很容易出问题具体分析见lxm的博客。</p><p><strong>务必要注意：必须控制变量！不然得分会极低！</strong><br><strong>高分技巧是把图画的漂亮一些！尽量使用sns或者echarts等绘图工具，多画图，分就高。</strong><br><s>数据是否真实并不重要</s>这里上传一个绘图的代码</p><figure class="highlight plaintext"><figcaption><span>python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">x=[]</span><br><span class="line">y=[]</span><br><span class="line">plt.plot(x, y, &quot;b&quot;, marker=&#x27;D&#x27;, markersize=5)</span><br><span class="line">#绘制坐标轴标签</span><br><span class="line">plt.xlabel(&quot;xx&quot;)</span><br><span class="line">plt.ylabel(&quot;xx&quot;)</span><br><span class="line">plt.title(&quot;xx&quot;)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer network </tag>
            
            <tag> lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>computer-network-lab3-3</title>
      <link href="/post/3cd8c21b.html"/>
      <url>/post/3cd8c21b.html</url>
      
        <content type="html"><![CDATA[<h1>要求</h1><p>NKU COMPUTER NETWORK LAB3-3<br>在实验3-2的基础上，选择实现一种拥塞控制算法，也可以是改进的算法，完成给定测试文件的传输。</p><h1>实验设计</h1><p>事实上3-2和3-3都是看懂理论之后，就不算太难了。只需要加很少的代码就行了。当然，代码涉及到多线程可能会比较困难。由于3-2编程有很多底层细节压根就没学会，也没时间了，因此到3-3彻底摆了。不过在看懂了3-2的代码之后，3-3的修改会变得非常简单而且轻松。具体内容见实验报告吧，在知道拥塞控制的原理之后，就没啥了。</p><h2 id="一些说明">一些说明</h2><p>还是时钟的问题，时钟的线程很多人写的都是错的。目前看到写对的人很少，20级有几个。</p>]]></content>
      
      
      <categories>
          
          <category> cs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer network </tag>
            
            <tag> lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>computer-network-lab3-2</title>
      <link href="/post/4bdff28d.html"/>
      <url>/post/4bdff28d.html</url>
      
        <content type="html"><![CDATA[<h1>要求</h1><p>NKU COMPUTER NETWORK LAB3-2<br>在实验3-1的基础上，将停等机制改成基于滑动窗口的流量控制机制，采用固定窗口大小，支持累积确认，完成给定测试文件的传输。</p><h1>实验流程</h1><p>大部分内容与3-1相同。此处应该采用多线程编程，由于<code>我不会多线程</code>，因此摆了，没弄懂机制自己改了改别人的程序就交了。具体内容见实验报告吧。。。</p><h2 id="一些说明">一些说明</h2><p>我的代码并没有完美解决线程的并发控制等问题，因此有各种毁灭性BUG。不建议参考。毕竟我给出了足够多的参考链接，可供选择了。非阻塞这事，如果设置成非阻塞，系统会自己给你开四个线程，因此在3-1中能够实现很多功能，在3-2中可以参考朱浩泽的继续这样做，也可以自己写线程（大多数人应该选择自己实现多线程）。<br><strong>线程这块可能会有很多死锁问题和并发控制的问题，我也没学过也没时间自学了，只能在此提醒后来人注意此处了。</strong><br>另，很多人貌似实现了多线程，首先收发其实并不是真正的GBN or SR所要求的样子，只能说勉强实现了功能（仔细一看还是非阻塞停等），其次很多人对于时钟的设计都是错的，建议在研究理论并看明白那些人的代码以后参考。20级很多人也写的不对，我在单步他们的代码时发现不少问题。</p>]]></content>
      
      
      <categories>
          
          <category> cs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer network </tag>
            
            <tag> lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>computer-network-lab3-1</title>
      <link href="/post/d2d6a337.html"/>
      <url>/post/d2d6a337.html</url>
      
        <content type="html"><![CDATA[<h1>要求</h1><p>NKU COMPUTER NETWORK LAB3-1</p><h2 id="实验要求">实验要求</h2><p>利用数据报套接字在用户空间实现面向连接的可靠数据传输，功能包括：建立连接、差错检测、确认重传等。流量控制采用停等机制，完成给定测试文件的传输。</p><h2 id="写在前面">写在前面</h2><p>实验报告的.tex文件，我也附在了GITHUB仓库之中，有需要的自取，记得<code>STAR</code>。</p><h2 id="一些说明">一些说明</h2><p>也是不同评分对应不同要求吧，比如说rdt2.0 2.1 2.2 3.0，肯定会有评分上的不同的，不过一般写到这个作业的时候已经比较紧了，编译和OS的压力很大，那么最推荐的情况就是完成基础要求，顺利拿到90分。</p><p>当然我是20级，深陷内卷地狱之中，实在是不敢不卷，因此我一直在实现一些加分的要求。~~学弟学妹们可以直接使用rdt2.0，只完成两次握手，不完成挥手，这样在我看来是最简单的。当然，看着我的代码，可以自己修改，或者直接减少某些功能，这样也会降低实验难度。~~好像不太星，因为rdt2.0没有重传的机制，这时候建议魔改rdt2.2，是比较好的实现方式。</p><h1>实验步骤</h1><h2 id="协议本身">协议本身</h2><p><strong>最最重要的一点，协议要自己设计一下。</strong><br>有以下几种选择以及具体实现：</p><ul class="lvl-0"><li class="lvl-2"><p>定义一个很大的字符数组，不完全实现rdt的内容，通过下标的方式设置伪首部的标志位。字符串在程序中操作会很容易，会大大简化程序。这种模式的典型为我丁学长和孙一丁。<code>墙裂推荐！</code></p></li><li class="lvl-2"><p>定义一个class或者struct，对应你自己将要实现的报文，这时你的报文可以设计得很复杂~~（搞一大堆乱七八糟的东西）~~。然后传递这个class或者struct即可。不过这里最好考虑对齐的问题，因为你很可能无法正好地使用1Byte。这种模式的典型为我斌哥和朱哥。</p></li><li class="lvl-2"><p>定义一个很大的数组，但是设计非常水的报文格式。这种模式嘛，感觉像是装x失败，随意吧。。。</p></li></ul><p>以下是我的报文格式此处应该有个图片，但是目前没有。过些日子看看能不能弄出个mermaid的形式来画一下，图床太慢了。</p><p>下面进入具体程序的内容</p><h2 id="首先是文件读写">首先是文件读写</h2><p>先来看一下图片格式的读写。注意，下面这段小的程序并不会每一行都被用在实际的lab3-1中，仅仅是以此说明。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span><span class="comment">//必须有这个头文件，这是文件读写的关键</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 1. 打开图片文件</span></span><br><span class="line">    <span class="function">ifstream <span class="title">is</span><span class="params">(<span class="string">&quot;1.jpg&quot;</span>, ifstream::in | ios::binary)</span></span>;</span><br><span class="line">    <span class="comment">// 2. 计算图片长度</span></span><br><span class="line">    is.<span class="built_in">seekg</span>(<span class="number">0</span>, is.end);  <span class="comment">//将文件流指针定位到流的末尾</span></span><br><span class="line">    <span class="type">int</span> length = is.<span class="built_in">tellg</span>();</span><br><span class="line">    is.<span class="built_in">seekg</span>(<span class="number">0</span>, is.beg);  <span class="comment">//将文件流指针重新定位到流的开始</span></span><br><span class="line">    <span class="comment">// 3. 创建内存缓存区</span></span><br><span class="line">    <span class="type">char</span> * buffer = <span class="keyword">new</span> <span class="type">char</span>[length];</span><br><span class="line">    <span class="comment">// 4. 读取图片</span></span><br><span class="line">    is.<span class="built_in">read</span>(buffer, length);</span><br><span class="line">    <span class="comment">// 到此，图片已经成功的被读取到内存（buffer）中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//接下来是写入图片</span></span><br><span class="line">    ofstream out;   <span class="comment">// 读取图像</span></span><br><span class="line">    out.<span class="built_in">open</span>(<span class="string">&quot;mashikei.jpg&quot;</span>, ios::out | ios::binary);</span><br><span class="line">    <span class="comment">//从buffer中写数据到out指向的文件中</span></span><br><span class="line">    out.<span class="built_in">write</span>((<span class="type">const</span> <span class="type">char</span>*)buffer, length * <span class="built_in">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="comment">//关闭文件指针，释放buffer内存</span></span><br><span class="line">    out.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个简单的小程序，重点在于通过二进制的方式读入图片。采用C++风格的ftream。至于txt文件，可以再加一个对文件名的判定，然后写一种不使用二进制的读写方式，当然更推荐与图片相同的读写方式。更多关于文件读写的内容，这里给出<a href="https://www.cnblogs.com/ZY-Dream/p/11181924.html">参考链接</a>，非常详细。<br><strong>注意，很多人写入的图片没有内容或者损坏（是个裂开的标志）甚至不完整，这里都是你的buffer的内容不正确导致的。</strong></p><p>然后这里有一个<a href="https://github.com/Mr-zho/UdpFileTransfer">UDP发送文件的连接</a>，没啥大用，经供参考吧。<strong>本次实验，核心中的核心就是把图片和txt发送过去，在你的接收端，能顺利接收图片然后打开，就已经成功了一大半！而不是其他的东西</strong>。</p><h2 id="非阻塞">非阻塞</h2><p>首先说说非阻塞是干啥的，经历了lab1我们知道如果阻塞了，程序就会卡住，确切的说就会卡在发送or接收函数上，那么这时候你的重传机制就不起作用了。这个东西很闪人，如果你的程序写的不好（比如我的），就会需要一直在阻塞与非阻塞之间进行切换，而且稍微没弄好就写错了。如果是学过多线程，也可以考虑使用多线程代替非阻塞。关于阻塞与非阻塞，提供一些<a href="https://blog.csdn.net/mayue_web/article/details/82873115">csdn的参考</a></p><h2 id="然后进入各个功能实现">然后进入各个功能实现</h2><p>注意，这里的代码都不全，仅讲解重点功能。</p><h3 id="报文设计">报文设计</h3><p>我搞了个大结构体，<s>被这种写法坑惨了</s>，大概如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">message</span></span><br><span class="line">&#123;</span><br><span class="line">    u_long flag;<span class="comment">//首部标志位信息</span></span><br><span class="line">    u_short seq;<span class="comment">//序列号</span></span><br><span class="line">    u_short ack;<span class="comment">//确认号</span></span><br><span class="line">    u_long len;<span class="comment">//数据部分长度</span></span><br><span class="line">    u_long num; <span class="comment">//发送的消息包含几个包</span></span><br><span class="line">    u_short checksum;<span class="comment">//校验和</span></span><br><span class="line">    <span class="type">char</span> data[<span class="number">1024</span>];<span class="comment">//数据长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="握手">握手</h3><p>设置为三次握手，是很无聊的东西，直接上程序。这里注意，第三次握手并不能被server段真的收到。因为只需要单方传输。</p><figure class="highlight c++"><figcaption><span>客户端</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">beginconnect</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;开始连接！发送第一次握手！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    message recvMsg, sendMsg;</span><br><span class="line">    sendMsg.<span class="built_in">setSYN</span>();</span><br><span class="line">    sendMsg.seq = <span class="number">88</span>;</span><br><span class="line">    <span class="built_in">sendmessage</span>(sendMsg);</span><br><span class="line">    <span class="type">int</span> start = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="type">int</span> end;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        recvMsg = <span class="built_in">recvmessage</span>();</span><br><span class="line">        <span class="keyword">if</span> (recvMsg.<span class="built_in">isACK</span>() &amp;&amp; recvMsg.<span class="built_in">isSYN</span>()&amp;&amp; recvMsg.ack == sendMsg.seq + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">SetColor</span>(<span class="number">14</span>,<span class="number">0</span>);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;收到第二次握手!&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sendMsg.<span class="built_in">init_message</span>();</span><br><span class="line">    sendMsg.<span class="built_in">setACK</span>();</span><br><span class="line">    sendMsg.seq = <span class="number">89</span>;</span><br><span class="line">    sendMsg.ack = recvMsg.seq + <span class="number">1</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;发送第三次握手的数据包&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">sendmessage</span>(sendMsg);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>服务器</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">WaitConnect</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;服务器等待连接&quot;</span> &lt;&lt; endl;</span><br><span class="line">    message recvMsg, sendMsg;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        recvMsg = <span class="built_in">recvmessage</span>();</span><br><span class="line">        <span class="keyword">if</span> (recvMsg.<span class="built_in">isSYN</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;收到第一次握手成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sendMsg.<span class="built_in">setSYN</span>();</span><br><span class="line">    sendMsg.<span class="built_in">setACK</span>();</span><br><span class="line">    sendMsg.ack = recvMsg.seq + <span class="number">1</span>;   <span class="comment">// 将要发送确认包的ack设为收到包的seq+1</span></span><br><span class="line">    sendMsg.<span class="built_in">setSYN</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;发送第二次握手信息！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">sendmessage</span>(sendMsg);</span><br><span class="line">    <span class="built_in">SetColor</span>(<span class="number">14</span>,<span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;接收到确认连接，连接成功&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="挥手">挥手</h3><p>贼TM离谱的东西，其实挥手这一步是没必要的，因为文件是否传输完是按照最后一个包的检测进行判断的，在得到消息后直接结束程序即可。只是考虑到可能我们想在一次运行的时候传输多个文件，<s>那你把协议改了不就行了</s>，非要实现挥手我也拦不住，建议仅仅实现两次挥手。我仅仅实现了两次挥手，代码如下所示：</p><figure class="highlight c++"><figcaption><span>客户端</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">closeconnect</span><span class="params">()</span> </span>&#123;  <span class="comment">// 断开连接</span></span><br><span class="line">    message recvMsg, sendMsg;</span><br><span class="line">    sendMsg.<span class="built_in">setFIN</span>();</span><br><span class="line">    sendMsg.seq = <span class="number">8888</span>;</span><br><span class="line">    <span class="built_in">sendmessage</span>(sendMsg);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        recvMsg = <span class="built_in">recvmessage</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;接收到确认连接，断开连接成功&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>服务器</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (msg.<span class="built_in">isFIN</span>()) &#123;</span><br><span class="line">    sendMsg.<span class="built_in">setACK</span>();</span><br><span class="line">    sendMsg.ack = msg.seq + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">sendmessage</span>(sendMsg);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;已经收到客户端发过来的挥手请求，并且发送了第二次挥手，服务器将结束运行！再见！&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="校验和">校验和</h3><p>推荐直接用老师给的函数。也可以自己设计校验和的内容然后更改函数，强者们实现的都不一样。代码如下所示：</p><figure class="highlight c++"><figcaption><span>两端基本相同</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">u_short <span class="title">cksum</span><span class="params">(u_short* buf, <span class="type">int</span> count)</span> </span>&#123;</span><br><span class="line"><span class="keyword">register</span> u_long sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (count--) &#123;</span><br><span class="line">sum += *(buf++);</span><br><span class="line"><span class="comment">// if cksum overflow 16 bits, it will keep its carry-bit</span></span><br><span class="line"><span class="keyword">if</span> (sum &amp; <span class="number">0xffff0000</span>) &#123;</span><br><span class="line">sum &amp;= <span class="number">0xffff</span>;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ~(sum &amp; <span class="number">0xffff</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="确认重传的实现">确认重传的实现</h3><p>这块看起来比较复杂，但是很直观，应该都能看懂。不过我在此遇到的问题是，我的server端不能超时重传，想实现的话会非常复杂，感觉有点浪费时间，因此没做。此处大量代码如下所示：</p><figure class="highlight c++"><figcaption><span>客户端</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">waitSend</span><span class="params">(message sendMsg, <span class="type">int</span> seq)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    message recvMsg;</span><br><span class="line">    sendMsg.seq = seq;</span><br><span class="line">    <span class="built_in">sendmessage</span>(sendMsg);</span><br><span class="line">    <span class="type">int</span> iMode = <span class="number">1</span>; <span class="comment">//1：非阻塞，0：阻塞</span></span><br><span class="line">    <span class="built_in">ioctlsocket</span>(Client, FIONBIO, (u_long FAR*) &amp; iMode);<span class="comment">//非阻塞设置</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">clock_t</span> start = <span class="built_in">clock</span>();</span><br><span class="line">    <span class="type">clock_t</span> end;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        end = <span class="built_in">clock</span>();</span><br><span class="line">        <span class="keyword">if</span> (end - start &gt; <span class="number">50</span>) &#123;</span><br><span class="line">            <span class="built_in">SetColor</span>(<span class="number">0</span>,<span class="number">12</span>);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;应答超时，重新发送数据包&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="built_in">sendmessage</span>(sendMsg);</span><br><span class="line">            count++;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;尝试重新发送第&quot;</span>&lt;&lt;count&lt;&lt;<span class="string">&quot;次，最多10次&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">if</span>(count&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">                <span class="built_in">SetColor</span>(<span class="number">0</span>,<span class="number">12</span>);</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;重发失败，请确认网络通畅以及服务端启动后，重新启动客户端并重新发送文件！再见！&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            start = <span class="built_in">clock</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        recvMsg = <span class="built_in">recvmessage</span>();</span><br><span class="line">        <span class="keyword">if</span> (recvMsg.<span class="built_in">isACK</span>() &amp;&amp; recvMsg.ack == seq) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;收到服务器发来的ack正确的确认数据包！&quot;</span> &lt;&lt; endl;</span><br><span class="line">            cout &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>服务器</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (recvMsg.seq == seq) &#123;</span><br><span class="line">    sendMsg.<span class="built_in">setACK</span>();</span><br><span class="line">    sendMsg.ack = recvMsg.seq;</span><br><span class="line">    <span class="built_in">SetColor</span>(<span class="number">14</span>,<span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;收到seq为&quot;</span> &lt;&lt; recvMsg.seq &lt;&lt; <span class="string">&quot;的数据包&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">SetColor</span>(<span class="number">14</span>,<span class="number">0</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;发送确认收到的数据包(对应的ack)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">sendmessage</span>(sendMsg);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    out.<span class="built_in">write</span>(recvMsg.data, recvMsg.len);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主函数">主函数</h3><p>依次调用上面的各个功能即可。</p><figure class="highlight c++"><figcaption><span>客户端</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">SetColor</span>();</span><br><span class="line">    <span class="comment">// 初始化套接字</span></span><br><span class="line">    <span class="built_in">Start</span>();</span><br><span class="line">    <span class="built_in">SetColor</span>(<span class="number">0</span>,<span class="number">12</span>);</span><br><span class="line">    <span class="built_in">beginconnect</span>();</span><br><span class="line">    <span class="built_in">sendFirstName</span>();</span><br><span class="line">    <span class="built_in">closesocket</span>(Client);</span><br><span class="line">    <span class="built_in">WSACleanup</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>服务器</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">SetColor</span>(<span class="number">14</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">Start</span>();</span><br><span class="line">    <span class="built_in">WaitConnect</span>();</span><br><span class="line">    <span class="built_in">getFileName</span>();</span><br><span class="line">    <span class="comment">//关闭套接字</span></span><br><span class="line">    <span class="built_in">closesocket</span>(Server);</span><br><span class="line">    <span class="built_in">WSACleanup</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件传输的其他讲解">文件传输的其他讲解</h2><p>关于文件发送，这里没有写的很详细，因为我实现的不好。大致解释，我们需要先把文件名发送过去，然后再发送文件内容。这一步我个人认为是必要的，因为如果你不发送文件名，对方怎么知道你传输的文件是什么格式呢？至于说服务器写文件时，是不是必须使用这个文件名，就随意了。第一个包，应该是类似于“心跳包”一样的东西。而最后一个包，也要处理以下，需要告诉服务器，传输完毕了。同时如果是定长的数据包的话，对最后一个包要进行填充。我个人认为，最好上手的程序是我丁哥的，逻辑清楚，协议合理，代码可读性强。将会在本学期结束附上他的代码<a href="www.baidu.com">链接</a>。</p><h1>小小总结</h1><h2 id="关于代码">关于代码</h2><p>写的并不好，而且可能有错，**反正记住只要改不了程序就改协议！**不建议直接复制，仅供参考。</p><h2 id="关于整个lab3">关于整个lab3</h2><p>这个玩意和后面的实验有着比较直观的联系，我还是建议学弟学妹们谨慎设计协议以及程序，不要让程序在3-1就陷入不可更改、不可维护的地步，那样会导致3-2和3-3的进行异常困难。因此，尽量简化程序也是后续实验得以顺利进行的一种可能性。</p><h2 id="一些吐槽">一些吐槽</h2><p><strong>又没有实验指导书</strong>，让哐哐写出1k行程序来。。。这个实验的质量远不如cs144，而且开专的实验由于都是自己设计，很容易让你养成把所有东西写在main里的坏习惯，比如孙一丁的丑代码，居然还是18级的优秀作业呢。。。有余力的可以看一下CS144，国外的实验会让你学会怎么构建project，怎么写出框架，而不是自己写一堆离谱的开放式要求的程序。</p><p><a href="https://github.com/TephrocactusHC/netweork">github仓库</a></p>]]></content>
      
      
      <categories>
          
          <category> cs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer network </tag>
            
            <tag> lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>os-knwoledge2</title>
      <link href="/post/59839d86.html"/>
      <url>/post/59839d86.html</url>
      
        <content type="html"><![CDATA[<p>本文主要来自《精髓与设计原理》一书，黑书作为补充，部分来自于PPT，发现PPT的相当多内容来自于《精髓与设计原理》，看来这书得反复看。</p><p>不知道为什么宫老师的课讲的和哪本书都不能完全对上，因此我也是串着看，串着写。</p><h1>一些总结</h1><p>进程主要是由于<code>Timesharing</code>(时分复用)的观念而产生，希望最大限度利用CPU。</p><p>进程的实现，主要由进程控制块解决。</p><p>进程的切换，主要涉及进程控制块PCB的内容。</p><p>进程的设计目标：</p><ul class="lvl-0"><li class="lvl-2"><p>由全部寄存器打包组成“上下文”context，通过保存和恢复“上下文”，实现进程的无感知启停切换</p></li><li class="lvl-2"><p>通过对“触发慢操作”的函数的封装和指令权限限定，实现进程的运行与等待状态切换的感知</p></li><li class="lvl-2"><p>监控硬件事件，用以驱动“进程状态机的变化”，从而实现对多个进程正确分类，有效处理</p></li></ul><p>CPU资源的时分复用：</p><ul class="lvl-0"><li class="lvl-2"><p>进程切换：CPU资源的当前占用者切换</p><ul class="lvl-2"><li class="lvl-6">保存当前进程在PCB中的执行上下文(CPU状态)</li><li class="lvl-6">恢复下一个进程的执行上下文</li></ul></li><li class="lvl-2"><p>处理机调度</p><ul class="lvl-2"><li class="lvl-6">从就绪队列中挑选下一个占用CPU运行的进程</li><li class="lvl-6">从多个可用CPU中挑选就绪进程可使用的CPU资源</li></ul></li><li class="lvl-2"><p>调度程序：挑选就绪进程的内核函数</p><ul class="lvl-2"><li class="lvl-6">调度策略</li><li class="lvl-6">调度时机</li></ul></li></ul><p>如何比较调度算法？定义指标:</p><ul class="lvl-0"><li class="lvl-2"><p>CPU使用率</p></li><li class="lvl-2"><p>吞吐量</p></li><li class="lvl-2"><p>周转时间</p></li><li class="lvl-2"><p>等待时间</p></li><li class="lvl-2"><p>响应时间</p></li></ul><h1>进程</h1><p>CPU其实就是在各个进程之间不停切换，因此每个进程都有自己的虚拟CPU。</p><h2 id="定义">定义</h2><p>进程的如下几个定义：</p><ul class="lvl-0"><li class="lvl-2"><p>一个正在执行的程序。</p></li><li class="lvl-2"><p>一个正在计算机上执行的程序实例。</p></li><li class="lvl-2"><p>能分配给处理器并由处理器执行的实体。</p></li><li class="lvl-2"><p>由一组执行的指令、一个当前状态和一组相关的系统资源表征的活动单元。</p></li></ul><p>事实上，不太需要区分进程与程序。就是一段执行的代码</p><h2 id="进程控制块（process-control-block）">进程控制块（process control block）</h2><p>为了实现下文的进程模型，操作系统维护着一张表（一个数据结构数组），即进程表(process table)，每个进程表占用一个进程表项（进程控制块），这个块，包含了进程状态的重要信息。</p><p>进程的两个基本元素是<code>程序代码</code>（<code>program code</code>,可能被执行相同程序的其他进程共享）和<code>与代码相关联的数据集</code>（set of data)</p><p>以下信息可以表征程序执行的任何时刻：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>标识符</strong>：与进程相关的唯一标识符，用来区分其他进程。</p></li><li class="lvl-2"><p><strong>状态</strong>：若进程正在执行，则进程处于运行态。</p></li><li class="lvl-2"><p><strong>优先级</strong>：相对于其他进程的优先顺序。</p></li><li class="lvl-2"><p><strong>程序计数器</strong>：程序中即将执行的下一条指令的地址。</p></li><li class="lvl-2"><p><strong>内存指针</strong>：包括程序代码和进程相关数据的指针，以及与其他进程共享内存块的指针。</p></li><li class="lvl-2"><p><strong>上下文数据</strong>：进程执行时处理器的寄存器中的数据。</p></li><li class="lvl-2"><p><strong>I/O状态信息</strong>：包括显式1/0请求、分配给进程的1/0设备（如磁带驱动器）和被进程使用的文件列表等。</p></li><li class="lvl-2"><p><strong>记账信息</strong>：包括处理器时间总和、使用的时钟数总和、时间限制、记账号等。</p></li></ul><p>控制块由操作系统创建和管理。因此，我们可以说进程由程序代码和相关数据及进程控制块组成。</p><h2 id="进程状态">进程状态</h2><h3 id="轨迹-trace">轨迹(trace)</h3><p>列出为进程执行的指令序列，可描述单个进程的行为，这样的序列称为进程轨迹（trace）。给出各个进程轨迹的交替方式，就可描述处理器的行为。然后有一个调度器负责按照轨迹调度。</p><h3 id="进程状态模型">进程状态模型</h3><p>首先来看一下最简单的状态模型，这部分比较简单，不记笔记了。<br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/osk2-1.png" alt=""></p><p>未运行进程必须位于某种类型的队列中，并等待执行时机。<img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/osk2-2.png" alt=""><br>图3.5（b)给出了一个结构，该结构中有一个队列，队列中的每项都指向某个特定进程的指针，或队列可以由数据块构成 的链表组成，每个数据块表示一个进程。 我们可以用这个排队图来描述调度器的行为。被中断的进程转移到等待进程队列中，或在进程结束或取消时销毁它（离开系统）。在任何情形下，调度器均从队列中选择一个进程来执行。</p><h3 id="进程的创建和终止">进程的创建和终止</h3><h4 id="进程的创建">进程的创建</h4><p>一个新进程添加到正被管理的进程集时.操作系统需要建立用于管理该进程的数据结构，并在内存中给它分配地址空间，这些行为构成了一个新进程的创建过程。</p><h5 id="触发创建的情况">触发创建的情况</h5><p>触发进程创建的事件通常有4个，如表所示。</p><table><thead><tr><th style="text-align:center">事件</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">新的批处理作业</td><td style="text-align:center">磁带或磁盘中的批处理作业控制流通常会提供给操作系统。当操作系统准备接收新工作时，将读取下一个作业控制命令</td></tr><tr><td style="text-align:center">交互登录</td><td style="text-align:center">终端用户登录到系统</td></tr><tr><td style="text-align:center">为提供服务而由操作系统创建</td><td style="text-align:center">操作系统耵以创建一个进程，代表用户程序执行一个功能，使用户无须等待（如控制打印的进程）</td></tr><tr><td style="text-align:center">由现有进程派生</td><td style="text-align:center">基于模块化的考虑或开发并行性，用户程序可以指示创逑多个进程</td></tr></tbody></table><p>当操作系统为另一个进程的显式请求创建一个进程时，这个动作就称为<code>进程派生(process spawning)</code>这个操作很有用处。</p><p>当一个进程派生另一个进程吋，前一个称为<code>父进程(parent process)</code>,被派生的进程称为<code>子进程 (child process)</code>。</p><h5 id="创建的过程">创建的过程</h5><p>这里可能需要一些后面的知识步骤如下：</p><ol><li class="lvl-3"><p>为新进程分配一个唯一的进程标识符。</p></li><li class="lvl-3"><p>为进程分配空间。</p></li><li class="lvl-3"><p>初始化进程控制块。</p></li><li class="lvl-3"><p>设置正确的链接。</p></li><li class="lvl-3"><p>创建或扩充其他数据结构。</p></li></ol><h4 id="进程终止">进程终止</h4><p>黑砖给出了四种终止情况：</p><ol><li class="lvl-3"><p>正常退出（自愿的）</p></li><li class="lvl-3"><p>出错退出（自愿的）</p></li><li class="lvl-3"><p>严重错误（非自愿）</p></li><li class="lvl-3"><p>被其他进程杀死（非自愿）</p></li></ol><p>《精髓与设计原理》的表概括了更加详细的进程终止的典型原因。</p><table><thead><tr><th style="text-align:center">事 件</th><th style="text-align:center">说 明</th></tr></thead><tbody><tr><td style="text-align:center">正常完成</td><td style="text-align:center">进程自行执行一个操作系统服务调用，表示它己经结束运行</td></tr><tr><td style="text-align:center">超过时限</td><td style="text-align:center">进程运行时闾超过规定的时限可以测星多种类型的时间，包括总运行时间(“挂钟时间”)、花费在执 行上的吋间.以及对于交互进程从上一次用户输入到当前时刻的时间总量</td></tr><tr><td style="text-align:center">无可用内存</td><td style="text-align:center">系统无法满足进程需要的内存空间</td></tr><tr><td style="text-align:center">超出范围</td><td style="text-align:center">进程试图访问不允许访问的内存单元</td></tr><tr><td style="text-align:center">保护错误</td><td style="text-align:center">进程试图使用不允许使用的资源或文件.或试图以一种不正确的方式使用，如往只读文件中写</td></tr><tr><td style="text-align:center">算术错误</td><td style="text-align:center">进程试图进行被禁止的计算，如除以零或存储大于硬件可以接纳的数字</td></tr><tr><td style="text-align:center">时问超出</td><td style="text-align:center">进程等待某一事件发生的时间超过了规定的最大值</td></tr><tr><td style="text-align:center">I/O失败</td><td style="text-align:center">在输入或输出期间发生错误，如找不到文件、在超过规定的最多努力次数后仍然读/写失败(如遇到磁 带上的一个坏区时)或无效操作(如从行式打印机中读)</td></tr><tr><td style="text-align:center">无效指令</td><td style="text-align:center">进程试图执行一个不存在的指令(通常是由于转移到了数据区并企图执行数裾)</td></tr><tr><td style="text-align:center">特权指令</td><td style="text-align:center">进程试图使用为操作系统保留的指令</td></tr><tr><td style="text-align:center">数据误用</td><td style="text-align:center">错误类型或未初始化的一块数据</td></tr><tr><td style="text-align:center">操作员或操作系统干涉</td><td style="text-align:center">由于某些原因.操作员或操作系统终止进程(如出现死锁时)</td></tr><tr><td style="text-align:center">父进程终止</td><td style="text-align:center">当一个父进程终止时，操作系统可能会自动终止该进程的所有子进程</td></tr><tr><td style="text-align:center">父进程请求</td><td style="text-align:center">父进程通常具有终止其任何子进程的权力</td></tr><tr><td style="text-align:center">（了解即可，感觉作用不大）</td><td style="text-align:center"></td></tr></tbody></table><h3 id="状态模型">状态模型</h3><p>黑砖上称为三状态模型：<code>运行态</code>、<code>就绪态</code>、<code>阻塞态</code>。《精髓》上称五状态模型，即还有<code>新建态</code>、<code>退出态</code>。PPT上介绍了更多，比如<code>挂起进程模型</code>。</p><h3 id="挂起进程模型">挂起进程模型</h3><h4 id="挂起">挂起</h4><p>由于处理器远快于I/O,会出现内存中的所有 进程都在等待I/O的现象。因此，即便是多道程序设计，处理器多数时间仍可能处于空闲状态。解决方案之一是交换，即把内存中某个进程的一部分或全部移到磁盘中。有时需要对进程做分级处理，引入优先级会使某进程等待时间过长而被换至外存，这被称为进程挂起，其目的：</p><ul class="lvl-0"><li class="lvl-2"><p>提高处理机效率：就绪进程表为空时，要提交新进程，以提高处理机效率；</p></li><li class="lvl-2"><p>为运行进程提供足够内存：资源紧张时，暂停某些进程，如CPU繁忙（或实时任务执行）时内存会比较紧张；</p></li><li class="lvl-2"><p>便于调试：在调试时，挂起被调试进程对其地址空间进行读写。</p></li></ul><h4 id="队列">队列</h4><p>可以看到，进程是在状态之间不停切换。那么，每个状态，可以给一个队列。</p><p>图3.8(a)给出了可能实现的排队规则，此时有两个队列：就绪队列和阻塞队列。进入系统的每个进程都放置在就绪队列中，当操作 系统选择另一个进程运行时，将从就绪队列中进行选择。对于无优先级的方案，这可以是一个简单 先进先出队列。当一个正在运行的进程被移出处理器时，它根据情况要么终止，要么放置在就绪或阻塞队列中。最后，当一个事件发生时，所有位于阻塞队列中等待该事件的进程都被放到就绪队列中。</p><p>后一种方案意味着当一个事件发生时，操作系统必须扫描整个阻塞队列，搜索那些等待该事件的进程。在大型操作系统中，队列中可能有几百甚至几千个进程，此吋拥有多个队列将会很有效，一个事件可以对应一个队列。因此，事件发生时，相应队列中的所有进程都将转换到就绪态［见图3.8(b)］。 最后一种改进是，如果按照优先级方案分派进程.，那么维护多个就绪队列，每个优先级一个队 列.将会带來很大的便利。操作系统很容易就可确定哪个就绪进程具有最高优先级且等待时间最长。<br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/osk2-3.png" alt=""></p><h4 id="挂起状态模型">挂起状态模型</h4><p>有单挂起态和双挂起态的区别，不同操作系统差别非常大。</p><p>其状态大致可分为：</p><ul class="lvl-0"><li class="lvl-2"><p>就绪状态(Ready)：进程在内存且可立即进入运行状态；</p></li><li class="lvl-2"><p>阻塞状态(Blocked)：进程在内存并等待某事件的出现；</p></li><li class="lvl-2"><p>阻塞挂起状态（Blocked, suspend）：进程在外存并等待某事件的出现；</p></li><li class="lvl-2"><p>就绪挂起状态（Ready, suspend）：进程在外存，但只要进入内存，即可运行；</p></li></ul><h2 id="进程描述">进程描述</h2><h3 id="操作系统的控制结构">操作系统的控制结构</h3><p>操作系统为了管理进程和资源，必须掌握每个进 程和资源的当前状态。普遍采用的方法是，操作系统 构造并维护其管理的每个实体的信息表。阍3.11给 出了这种方法的大致范围，即操作系统维护的4种不 同类型的表：内存、I/O、文件和进程。尽管不同操作 系统的实现细节不同，但所有操作系统维护的信息基本都可以分为这4类。<br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/osk2-5.png" alt=""></p><h3 id="进程控制结构">进程控制结构</h3><p>主要就是进程表的内容</p><h4 id="进程位置">进程位置</h4><p>因此，一个进程至少应有足够的内存空间来保存其的程序和数据；此外，程序的执行通常涉及用于跟踪过程调用和过程间参数传递的栈。最后，还有与每个进程相关的许多属性，以便操作系统控制该进程。通常，属性集称为<code>进程控制块</code>（process control block）'。程序、数据、栈和属性的集合称为<code>进程映像</code>（process image）（见表）。</p><table><thead><tr><th style="text-align:center">项 目</th><th style="text-align:center">说 明</th></tr></thead><tbody><tr><td style="text-align:center">用户数据</td><td style="text-align:center">用户空间中的吋修改部分，包括程序数据、用户栈区域和吋修改的程序</td></tr><tr><td style="text-align:center">用户程序</td><td style="text-align:center">待执行的程序</td></tr><tr><td style="text-align:center">栈</td><td style="text-align:center">毎个进程有一个或多个后进先出（LIFO）栈，栈用于保存参数、过程调用地址和系统调用地址</td></tr><tr><td style="text-align:center">进程控制块</td><td style="text-align:center">操作系统控制进程所需的数据</td></tr><tr><td style="text-align:center">进程映像的位置取决于所用的内存管理方案。在最简单的情形下，进程映像保存在相邻的内存 块中或连续的内存块中。存储块位于外存（通常是磁盘）中，因此在操作系统管理进程时，其进程 映像至少应有一部分位于内存中。而要执行该进程，则必须将整个进程映像载入内存中或至少载入 虚存中。因此，操作系统需要知道每个进程在磁盘中的位置，并知道每个进程在内存中的位置。</td><td style="text-align:center"></td></tr></tbody></table><p><strong>现代操作系统假定分页硬件允许使用不连续的物理内存来支持部分常驻内存的进程气在任意 时刻，进程映像的一部分可在内存中，剩余部分可在外存中气因此，操作系统维护的进程表必须给出每个进程映像中的每页的位置。</strong></p><p>有一个主进程表，每个进程在表中都有一个表项，每个表项至 少包含一个指向进程映像的指针。如果进程映像包括多个块，则这些信息直接包含在主进程表中， 或通过交叉引用内存表中的表项得到。当然，这种描述是一般性描述，不同操作系统会按自身的方 式来组织位置信息。</p><h4 id="进程属性">进程属性</h4><p>进程控制块信息分为三类：</p><ul class="lvl-0"><li class="lvl-2"><p>进程标识信息</p></li><li class="lvl-2"><p>进程状态信息</p></li><li class="lvl-2"><p>进程控制信息<br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/osk2-6.png" alt=""></p></li></ul><h5 id="标识信息">标识信息</h5><p>对于所有操作系统中的进程标识符（process identification）来说，每个进程都分配了 一个唯一的数字标识符。进程标识符可以简单地表示为主进程表中的一个索引；否则， 就必须有一个映射，以便操作系统可以根裾进程标识符定位相应的表。</p><h5 id="状态信息">状态信息</h5><p><code>处理器状态信息</code>（processor state information）由处理器寄存器的内容组成。运行某个进程时， 进程的信息一定会出现在寄存器中。中断进程时，必须保存该寄存器的所有信息，以便进程恢复执行时可以恢复所有这些信息。所涉寄存器的性质和数量取决于处理器的设计。</p><p>所有处理器设计都包括一个或一组称为<code>程序状态字</code>（Program Status Word, PSW）的寄存器，它包含有状态信 息。PSW通常包含条件码和其他状态信息。Intel x86处理器中的处理器状态字就是一个很好的例子，它称为EFLAGS寄存 器（见图3.12和表3.6）,能被运行在x86 处理器上的任何操作系统（包括UNIX和 Windows）使用。</p><h5 id="控制信息">控制信息</h5><p>它是操作系 统控制和协调各种活动进程所需的额外信息。</p><h4 id="映像在虚存中">映像在虚存中</h4><p>图3.13给出了进行映像在虚存中的结构。每个进程映像都由进程控制块、用户栈、进程专用地 址空间以及与其他进程共享的其他地址空间组成。图中每个进程映像的地址范围看起来是连续的， 但实际情况可能并非如此，具体取决于内存管理方案和操作系统组织控制结构的方式。<br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/osk2-7.png" alt=""></p><h3 id="进程控制块的作用">进程控制块的作用</h3><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/osk2-8.png" alt=""><br>操作系统中的很多例程需要访问进程控制块中的信息。直接 访问这些表并不困难。每个进程都有一个唯一的ID号，它可用作进程控制块的指针表的索引。困难 不是访问而是保护，具体表现为两个问题：</p><ol><li class="lvl-3"><p>一个例程(如中断处理程序)中的错误可能会破坏进程控制块，进而破坏系统对受影响进 程的管理能力。</p></li><li class="lvl-3"><p>进程控制块结构或语义中的设计变化可能会影响到操作系统中的许多模块。</p></li></ol><p>这些问题可要求操作系统中的所有例程都通过一个处理程序例程来解决，即处理程序例程的任 务仅是保护进程控制块，且是读写这些块的唯一仲裁程序。使用这类进程时，需要在性能和其他系统软件结其的信任度之间进行折中。</p><h2 id="进程控制">进程控制</h2><h3 id="执行模式">执行模式</h3><p>这玩意应该被讲烂了。。。某些指令只能在特权模式下运行，包括读取或改变诸如程序状态字之类的控制寄存器的指令、原始I/O指令和与内存 管理相关的指令。另外，部分内存区域仅能在特权模式下访问。</p><p>非特权模式通常称为用户模式(user mode),因为用户程序通常在该模式下运行；特权模式称为系统模式（system mode）、控制模式（control mode）或内核模式（kernel mode）,内核模式指的是操作系统的内核，它是操作系统中包含重要系统功能的部分。</p><p><strong>使用两种模式的原因是保护操作系统和重要的操作系统表（如进程控制块〉不受用户程序的千 扰。在内核模式下，软件会完全控制处理器及其所有指令、寄存器和内存。</strong></p><h4 id="处理器如何才能知道它正在什么模式下执行？模式如何变化？">处理器如何才能知道它正在什么模式下执行？模式如何变化？</h4><p>程序状态字中通常存在一个指示执行模式的位，该位会因事件的改变而变化。典型情况下，当用户调用一个操作系统服务或中断来触发系统例程的执行时，执行模式将被置为内核模式；而当从系统服务返回到用户进程时，执行模式则置为用户模式。</p><blockquote><p>比如UCORE的LAB1，就有一个包含2位CPL （Current Privilege Level,当前特权级别）字段的处理器状态寄存 器（PSR）o级别0是最高特权级别，级别3是最低特权级別。多数操作系统（如Linux）为内核模式 使用级别0,为用户模式使用其他级别。发生中断时，处理器会清空PSR中的大部分位，包括CPL字 段。这会自动地将CPL设置为级别0。中断处理例程末尾的最后一个指令是IRT （Interrupt Return,中 断返回），它会使得处理器恢复中断程序的PSR,即恢复该程序的特权级别。应用程序进行系统调用 时，会出现类似的顺序。对于Itanium而言，应用程序通过如下方式实现系统调用：将系统调用标识 符和参数放到一个预定义的区域，然后执行一个特殊指令中断用户模式下的程序执行，将控制权交给内核。</p></blockquote><h2 id="进程切换">进程切换</h2><h3 id="何时切换进程">何时切换进程</h3><p>系统中断：分为中断和陷阱。中断就是与外部事件相关，陷阱就是错误。对于普通中断（interrupt），控制权首先 转给中断处理器，中断处理器完成一些基本的辅助工作后，再将控制权转给与已发生的特定中断相关的操作系统例程。<br><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/osk2-9.png" alt=""></p><h3 id="进程状态的变化">进程状态的变化</h3><p>完整的进程切换步 骤如下：</p><ol><li class="lvl-3"><p>保存处理器的上下文，包括程序计数器和其他寄存器。</p></li><li class="lvl-3"><p>更新当前处于运行态进程的进程控制块，包括把进程的状态改变为另一状态（就绪态、阻塞 态、就绪/挂起态或退出态〉。还须更新其他相关的字段，包括退出运行态的原因和记账信息。</p></li><li class="lvl-3"><p>把该进程的进程控制块移到相应的队列（就绪、在事件/处阻塞、就绪/挂起）。</p></li><li class="lvl-3"><p>选择另一个进程执行，详见第四部分的讨论。</p></li><li class="lvl-3"><p>更新所选进程的进程控制块，包括把进程的状态改为运行态。</p></li><li class="lvl-3"><p>更新内存管理数据结构。是否需要更新取决于管理地址转换的方式。</p></li><li class="lvl-3"><p>载入程序计数器和其他寄存器先前的值，将处理器的上下文恢复为所选进程上次退出运行 态时的上下文。</p></li></ol><h1>调度</h1><p>主要介绍单处理器调度多道程序设计的关键是调度。实际上典型的调度有4种（见表9.1〉，其中I/O调度将在第11章 介绍（讲述有关I/O的问题）。其他三种调度类型属于处理器调度。</p><table><thead><tr><th style="text-align:center">种类</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">长程调度</td><td style="text-align:center">决定加入待执行进程池</td></tr><tr><td style="text-align:center">中程调度</td><td style="text-align:center">决定加入部分或全部位于内存中的进程集合</td></tr><tr><td style="text-align:center">短程调度</td><td style="text-align:center">决定处理器执行哪个可运行进程</td></tr><tr><td style="text-align:center">I/O调度</td><td style="text-align:center">决定可用I/O设备处埋哪个进程挂起的I/O请求</td></tr></tbody></table><p>这里直接放一个表，因为累了。。。后面的内容下一篇再写<img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/osk2-10.png" alt=""><br>大概就是这么集中经典算法，在知道的情况下，理解并掌握优缺点即可。</p>]]></content>
      
      
      <categories>
          
          <category> cs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> knowledge </tag>
            
            <tag> os </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm Week1</title>
      <link href="/post/fc8df832.html"/>
      <url>/post/fc8df832.html</url>
      
        <content type="html"><![CDATA[<h1>写在最前</h1><p>本篇博客为<code>躬行之路</code>中week1的对应博客，主要记录我学习到的算法还有在leetcode上做的题。学数据结构、算法，甚至是计算机科学，甚至我认为包括一切理工科，只看书不动手是不行的。很遗憾在大学的前两年浪费了太多的时光，因此C++没有很好的基础，同时也没有学习算法，使得自己至今不会程序设计，很遗憾。不过万幸，<code>悟已往之不谏，知来者之可追。实迷途其未远，觉今是而昨非。</code> 同时，我再次引用陆游的诗。</p><blockquote><p>《冬夜读书示子聿》（宋）陆游古人学问无遗力，少壮工夫老始成。纸上得来终觉浅，绝知此事要躬行。</p></blockquote><h1>一些前言</h1><p><code>躬行之路</code>的周更博客中并不会写一些被其他人写烂了的内容，抄教材并不是什么优秀且值得骄傲的行为。由于这是互联网形式，因此，所有我在学习时所看的资料，都会以链接的形式直接贴在博客当中。关于我所学的内容本身，我只会写一些自己的想法和心得体会在博客里面。所有算法都会尝试用C<ins>和python两种语言实现，并且尽量在python中压行，一行解决问题。不过重心仍然放在C</ins>之上，一方面是因为面试几乎都是用C++，另一方面也是python底层也不知道在干什么，也没有什么自己需要实现的数据结构，同时我认为python主要是用来快速上手、快速实现功能的语言，不适合练习算法。关于py只是做一些练习，希望自己以后写的神经网络不要太丑了。</p><h1>本周内容</h1><h2 id="STL">STL</h2><p>熟悉了一下STL是咋回事，以及vector这玩意怎么用，<sub>顺便进行C++康复训练，因为C++水平过低已经被松子桂鱼瞧不起了</sub>。。。</p><h2 id="算法">算法</h2><h3 id="线段树">线段树</h3><p>首先学了线段树<sub>（松子桂鱼大佬浇我线段树）</sub>，目前还没做题，只做了洛谷P3372的板子。不过这个题很有启发性，我开始尝试在我的程序中大量使用位运算来加快我的程序。确实是非常快的速度。</p><p>周日晚上学了KMP算法，这玩意好像挺巧的，值得学一学。</p><h3 id="前缀">前缀</h3><p>一个小小的trick，并不是算法。不过这个小trick很有意思，算是数组操作的基础了。本质上是以空间换时间，这样可以规避两层for循环带来的$O(n^2)$级别的时间复杂度。很有趣。要不是学了前缀我还真没法学KMP。有点意思。本周完成的题目如下：</p><ul class="lvl-0"><li class="lvl-2"><p>2319</p></li><li class="lvl-2"><p>238</p></li><li class="lvl-2"><p>523</p></li><li class="lvl-2"><p>洛谷线段树模板</p></li><li class="lvl-2"><p>洛谷KMP模板</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>computer-network-lab2</title>
      <link href="/post/8fe793fe.html"/>
      <url>/post/8fe793fe.html</url>
      
        <content type="html"><![CDATA[<h1>第二个实验</h1><p>NKU COMPUTER NETWORK LAB2 计算机网络实验二<br>lab2不难，用wireshark抓包然后分析这些东西。</p><h2 id="实验过程">实验过程</h2><h3 id="编写HTML">编写HTML</h3><p>首先我们需要写一个HTML，在软件安全那个课上应该已经学过了，没学过也应该不难学。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>TephrocactusHC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你的学号xxxx 你的姓名 你的专业<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">你的图片.jpg</span>&quot;/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="搭建服务器">搭建服务器</h3><p>然后将HTML部署在你的服务器上。这里很多人不知道怎么部署服务器，我的建议是用软件安全的虚拟机里面的PHPNow那一套东西，把你的HTML文件部署到阿帕奇的hosts文件夹底下。上学期软件安全都学过了。不会的话自己查查。。。</p><p>也可以使用其他集成开发环境，什么xmapp还是什么的，反正带着阿帕奇就行。然后很多人应该都有华为的代金券，如果没过期，可以去华为租一个服务器也行。</p><p>我不建议写一个HTML然后在本地用edge浏览器直接打开这个文件，那样你用我在底下写的命令找不到那个HTTP，那你可能做错了啊。。。</p><h3 id="抓包过程">抓包过程</h3><p>接下来继续，先打开Wireshark，然后选择你要监控的网卡，选VM的那个，接着在本机上访问你的HTML文件，网址为xxxxxxxxxx(虚拟机的IP)/yourhtml.html</p><p>这时候wireshark上应该有一大堆东西了，这时候就能开始分析了。</p><p>这时候需要一个命令输在过滤器里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http contains &quot;xxxxxxx&quot;||tcp contains &quot;xxxxxx&quot;  //xxxx是你的学号</span><br></pre></td></tr></table></figure><p>如果操作正确，此时你的WIRESHARK里应该只有一个内容了。打开分析即可。这波操作比较秀，因为contains这个关键字在过滤器里不自动补全，好像不存在似的，但你一用就发现还真能用，嘿嘿。</p><p>其他的你就找三次握手、四次挥手、HTTP和那个图片的请求这四个东西就行了。</p><p>如果是本地搞的话，需要使用ip.addr和端口来过滤一下，不然太多了。整体上很简单。</p><h2 id="有以下几点需要注意">有以下几点需要注意</h2><h3 id="界面">界面</h3><p>千万别卷，这玩意卷了没用，就最基本的功能就行。这实验要是再卷没天理了吧。。。</p><h3 id="图片">图片</h3><p>就本地图片，千万别弄什么图床链接，那样要分析更多东西。。。</p><h3 id="三次握手">三次握手</h3><p>三次握手需要找到。要会讲，助教会问，必问。</p><h3 id="四次挥手">四次挥手</h3><p>需要抓取完整，有的人抓不完整，好像是需要等到服务器的响应时间到了结束了才行。助教会问，必问。</p><h3 id="HTTP和图片">HTTP和图片</h3><p>要能找到HTTP那一条信息，还有后边的GET请求获取图片。这个过程要讲一下。</p><h3 id="一些其他">一些其他</h3><p>不同助教不一样，有的会问一些标志位，比如SYN、ACK、SEQ、PSH、FIN都是什么，要搞清楚。然后还有比如双端口现象是怎么回事，要搞清楚。一般情况都是HTTP1.1，要搞清楚HTTP1.1和别的有啥不一样的。可能不同的浏览器会有一些不同的东西，我建议就edge，虚拟机里搞IE，别弄花里胡哨的浏览器。还有的甚至关注你怎么搭的服务器，不过应该是不影响给分的。<strong>整个三次握手四次挥手的过程要搞清楚，这是本次实验最重要的内容。</strong></p><h2 id="写在最后">写在最后</h2><p>又是一个小实验，很离谱，在没有实验指导书的情况下其实不太清楚怎么分析这一大堆东西。只能先看学长学姐们的实验报告。然后在老师明确说不要卷的情况下，一群人弄了CSS的东西美化界面，真是蚌埠住了。。。</p><p><a href="https://github.com/TephrocactusHC/netweork">github仓库</a></p>]]></content>
      
      
      <categories>
          
          <category> cs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer network </tag>
            
            <tag> lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>os-lab</title>
      <link href="/post/3add9906.html"/>
      <url>/post/3add9906.html</url>
      
        <content type="html"><![CDATA[<p>#ucore-lab2<br>大概就是记录一下lab2这些东西，前面的代码基本上是阅读得到的结果，主要写写自己怎么实现的伙伴系统就完了（</p><h2 id="ex1">ex1</h2><p>首先需要掌握关于ucore里边双向链表的东西，<a href="https://chyyuu.gitbooks.io/ucore_os_docs/content/lab0/lab0_2_6_2_1_linked_list.html">这里直接贴实验指导书的内容</a>，这一部分就是关于ucore的数据结构的知识。这个空闲块链表实际上是将各个块首页的指针集合（由prev和next构成）的指针（或者说指针集合所在地址）相连。这块需要看懂。<strong>说实话这玩意挺巧的。。。</strong></p><p>然后就可以看本次实验了。ex1很水，就改几行，但是自己要懂原理。也就这个能自己写出来</p><h2 id="ex2-ex3">ex2 ex3</h2><p>一个比一个恶心了。得先看书，把内存管理那块看懂，不然绝对看裂开。其实明白了内存管理，然后再看注释，可能自己也差不多能写出来了，但是考虑到要自己调试，基本上要裂开一定的过程，就算了，阅读代码即可。</p><h2 id="ch1">ch1</h2><h3 id="写在前面">写在前面</h3><p>伙伴系统，一个被人实现了快烂了的东西。大概有三种数据结构可以写这个东西，分别是<code>队列数组</code>、<code>树状数组</code>和<code>线段树</code>。我采用线段树实现。当然，由于伙伴系统的优美特性，是满二叉树的结构，那么其实可以采用zkw线段树实现，代码更少更优美。据网络上说随着<code>zkw线段树</code>的普及，基本上没人用树状数组了，树状数组这玩意不会也行。</p><p>网上教程很多，采用链表（队列数组）被认为是最接近操作系统实现的。但是你一看这个结构，肯定率先想线段树（zkw线段树），因此这样写虽然性能不一定最优，但一定非常自然。</p><p>然后在我况吃况吃写了两天之后，我实现的破玩意越来越丑但思想越来越像zkw线段树，虽然能跑了但始终有地方不太优美，被迫去学了一下zkw线段树。后来发现也有人这么实现过，是个清华的佬，因此参考了一些他的代码。<sub>其实一开始用普通的线段树的思想已经实现了，但是测试一直有一些案例过不去，也不知道为什么我编样本的能力这么强。。。最后改来改去就开始逼近zkw线段树了</sub>**（这个过程略草，非常难蚌，在此处不宜展开，尤其不能说我经历了什么以及最后我是怎么知道这玩意是zkw线段树的。只能说没有金刚钻别揽瓷器活，在没研究过算法的情况下我建议先刷刷洛谷、乐扣、牛客。）**最后，由于代码经过多次迭代，部分内容仍有不可更改、不可解释的现象，请自行查找资料进行优化。。。</p><p>下面先介绍线段树和zkw线段树，已经会的和不感兴趣的可以直接跳过看最后的代码。</p><h3 id="线段树">线段树</h3><p>首先，我们要介绍一下线段树这种书上没写、课上没讲但是很牛很有用的数据结构。跪谢松子桂鱼大佬花了俩小时给我讲这个玩意。<a href="https://www.cnblogs.com/xenny/p/9801703.html">这里的部分讲解和图片参考了这个博客</a></p><h4 id="首先什么是线段树">首先什么是线段树</h4><p>线段树是一种二叉搜索树，什么叫做二叉搜索树，首先满足二叉树，每个结点度小于等于二，即每个结点最多有两颗子树，何为搜索，我们要知道，线段树的每个结点都存储了一个区间，也可以理解成一个线段，而搜索，就是在这些线段上进行搜索操作得到你想要的答案。</p><h4 id="线段树能够解决什么样的问题">线段树能够解决什么样的问题</h4><p>这里不展开具体内容，只是说线段树的适用范围很广，线段树由于本身是专门用来处理区间问题的，可以在线维护修改以及查询区间上的最值，求和。线段树的每一个节点都储存着一段区间$[L,R]$的信息。它的大致思想是：将一段大区间平均地划分成2个小区间，每一个小区间都再平均分成2个更小区间……以此类推，直到每一个区间的$L$等于$R$（这样这个区间仅包含一个节点的信息，无法被划分）。通过对这些区间进行修改、查询，来实现对大区间的修改、查询。以P3372模板题为例，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">如题，已知一个数列，你需要进行下面两种操作：</span><br><span class="line"></span><br><span class="line">将某区间每一个数加上 kk。</span><br><span class="line">求出某区间每一个数的和。</span><br><span class="line"></span><br><span class="line">输入格式</span><br><span class="line">第一行包含两个整数 n, mn,m，分别表示该数列数字的个数和操作的总个数。</span><br><span class="line"></span><br><span class="line">第二行包含 nn 个用空格分隔的整数，其中第 ii 个数字表示数列第 ii 项的初始值。</span><br><span class="line"></span><br><span class="line">接下来 mm 行每行包含 33 或 44 个整数，表示一个操作，具体如下：</span><br><span class="line"></span><br><span class="line">1 x y k：将区间 [x, y][x,y] 内每个数加上 kk。</span><br><span class="line">2 x y：输出区间 [x, y][x,y] 内每个数的和。</span><br><span class="line">输出格式</span><br><span class="line">输出包含若干行整数，即为所有操作 2 的结果。</span><br><span class="line"></span><br><span class="line">输入</span><br><span class="line">5 5</span><br><span class="line">1 5 4 2 3</span><br><span class="line">2 2 4</span><br><span class="line">1 2 3 2</span><br><span class="line">2 3 4</span><br><span class="line">1 1 5 1</span><br><span class="line">2 1 4</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">11</span><br><span class="line">8</span><br><span class="line">20</span><br></pre></td></tr></table></figure><p>如上所示，是一个数列$[1,5,4,2,3]$，我们希望对其中某一端数字进行区间操作，比如对下标1到5即$a[0],a[4]$都加上1，然后查询区间$a[1]+a[2]+a[3]+a[4]$的和。</p><p>这就是<code>区间加法</code>，即对于一个区间$[L,R]$上的问题，可以通过$[L,M]$和$[M+1,R]$的分别处理来实现。可以看出线段树就是分块思想的树化，类似于算法导论里扔瓶子的问题，使原来使用for循环遍历的$O(N)$的复杂度下降到$O(logN)$这个级别。</p><p>首先说一个节点都有什么（其实除了区间，想加什么就加什么）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> l,r;<span class="comment">//l,r代表区间[l,r]</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> sum;<span class="comment">//是区间和，如果是叶子节点，就是那个数列里这个位置的数值</span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> flag;<span class="comment">//据说叫懒惰标记，很深，很巧，用处很大</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>下面讲一下建树的过程</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(ll i,ll l,ll r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(l==r)&#123;list[i]=a[l];<span class="keyword">return</span> ;&#125;<span class="comment">//如果左右区间相同，那么必然是叶子节点，只有叶子节点是被真实赋值的</span></span><br><span class="line">  ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">  <span class="built_in">build</span>(<span class="built_in">ls</span>(p),l,mid);</span><br><span class="line">  <span class="built_in">build</span>(<span class="built_in">rs</span>(p),mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="comment">//此处由于我们采用的是二叉树，所以对于整个结构来说，可以用二分来降低复杂度，否则树形结构则没有什么明显的优化</span></span><br><span class="line"><span class="comment">//啥意思也没太懂，反正网上这么写我也这么解释</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这里关于这个位运算要解释一下是怎么回事，其实就是一个加快的操作。先看图1<img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/oslab2-1.jpg" alt="图1"><br>可以发现每个节点的左儿子都是父节点的二倍，右儿子是二倍加一再看图2<img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/oslab2-2.jpg" alt="图2"><br>然后他们在二进制下长这样。二倍就直接左移，二倍加一就左移再和1逻辑或，由于左移完了末位是0，相当于加一了。为啥不直接加一呢，因为汇编告诉我们都用逻辑运算会非常快，本人亲测快一倍的样子。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(ll i,ll l,ll r)</span></span></span><br><span class="line"><span class="function">  <span class="title">if</span><span class="params">(l==r)</span></span>&#123;list[i]=mynode[i];<span class="keyword">return</span> ;&#125;<span class="comment">//如果左右区间相同，那么必然是叶子节点，只有叶子节点是被真实赋值的</span></span><br><span class="line">  ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">  <span class="built_in">build</span>(i,l,mid);</span><br><span class="line">  <span class="built_in">build</span>(i,mid+<span class="number">1</span>,r);</span><br><span class="line">  mynode[i].sum=mynode[i&lt;&lt;<span class="number">1</span>].sum+mynode[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;<span class="comment">//此处应该有个update()函数，不过我没写，哈哈</span></span><br><span class="line"><span class="comment">//此处由于我们采用的是二叉树，所以对于整个结构来说，可以用二分来降低复杂度，否则树形结构则没有什么明显的优化</span></span><br><span class="line"><span class="comment">//啥意思也没太懂，反正网上这么写我也这么解释</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>下面是pushdown操作，用于区间更新的，等于我不给每个节点都更新，等用到了我再往下传。本次实验用处不大，过些日子我总结算法重新写这些东西再解释。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(mynode[i].flag==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        mynode[<span class="number">2</span>*i].sum+=mynode[i].flag*(mynode[<span class="number">2</span>*i].r-mynode[<span class="number">2</span>*i].l+<span class="number">1</span>);</span><br><span class="line">        mynode[<span class="number">2</span>*i+<span class="number">1</span>].sum+=mynode[i].flag*(mynode[<span class="number">2</span>*i+<span class="number">1</span>].r-mynode[<span class="number">2</span>*i+<span class="number">1</span>].l+<span class="number">1</span>);</span><br><span class="line">        mynode[<span class="number">2</span>*i].flag+=mynode[i].flag;</span><br><span class="line">        mynode[<span class="number">2</span>*i+<span class="number">1</span>].flag+=mynode[i].flag;</span><br><span class="line">        mynode[i].flag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后区间修改。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> j,<span class="type">int</span> lef,<span class="type">int</span> rig,<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef&lt;=mynode[i].l&amp;&amp;mynode[i].r&lt;=rig)&#123;</span><br><span class="line">        mynode[i].flag+=j;</span><br><span class="line">        mynode[i].sum+=j*(mynode[i].r-mynode[i].l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(lef&gt;mynode[i].r||rig&lt;mynode[i].l)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(i);</span><br><span class="line">        <span class="built_in">add</span>(j,lef,rig,<span class="number">2</span>*i);</span><br><span class="line">        <span class="built_in">add</span>(j,lef,rig,<span class="number">2</span>*i+<span class="number">1</span>);</span><br><span class="line">        mynode[i].sum=mynode[<span class="number">2</span>*i].sum+mynode[<span class="number">2</span>*i+<span class="number">1</span>].sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后查询</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> lef,<span class="type">int</span> rig, <span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lef&lt;=mynode[i].l&amp;&amp;mynode[i].r&lt;=rig)&#123;</span><br><span class="line">        ac+=mynode[i].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((lef&gt;mynode[i].r)||(rig&lt;mynode[i].l))&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(i);</span><br><span class="line">        <span class="built_in">ask</span>(lef,rig,<span class="number">2</span>*i);</span><br><span class="line">        <span class="built_in">ask</span>(lef,rig,<span class="number">2</span>*i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就完事了。当然这玩意还有各种骚操作，有兴趣可以看<a href="https://blog.csdn.net/huangzihaoal/article/details/81813454">这篇博客</a>。</p><h3 id="然后介绍本次实验的重头戏——zkw线段树">然后介绍本次实验的重头戏——zkw线段树</h3><p>由大神zkw自己提出来的数据结构。zkw线段树的结构是一个满二叉树的形式。可以定义$M$表示最后一层的叶节点数，显然$M≥n$ ，非叶节点有$M−1$个。但是我们在区间修改时，需要多2个节点$0$和$n+1$（好像有人证明n+1是没有必要的，经过我自己简单实验确实是这样），因此$M≥n+1$，那么第 i 个叶节点编号就为M+i。而且好处就是代码量特别短，一个功能一行就能实现。接下来全文照搬<a href="https://blog.csdn.net/keshuqi/article/details/52205884">blog</a>。</p><p>查询区间[1,n]，先建树</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n,M,q;<span class="type">int</span> d[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Build</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(M=<span class="number">1</span>;M&lt;n;M&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=M+<span class="number">1</span>;i&lt;=M+n;i++) d[i]=<span class="built_in">in</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>维护区间和</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=M<span class="number">-1</span>;i;--i) d[i]=d[i&lt;&lt;<span class="number">1</span>]+d[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>维护最大值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=M<span class="number">-1</span>;i;--i) d[i]=<span class="built_in">max</span>(d[i&lt;&lt;<span class="number">1</span>],d[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>维护最小值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=M<span class="number">-1</span>;i;--i) d[i]=<span class="built_in">min</span>(d[i&lt;&lt;<span class="number">1</span>],d[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>然后是单点操作单点修改</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Change</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    d[M+x]+=v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只是这么简单？当然不是，跟线段树一样，我们要更新它的父节点！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Change</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    d[x=M+x]+=v;</span><br><span class="line">    <span class="keyword">while</span>(x) d[x&gt;&gt;=<span class="number">1</span>]=d[x&lt;&lt;<span class="number">1</span>]+d[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没了？没了。</p><p>单点查询(差分思想，后面会用到)<br>把d维护的值修改一下，变成维护它与父节点的差值建树的过程就要修改一下咯！</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Build</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(M=<span class="number">1</span>;M&lt;=n+<span class="number">1</span>;M&lt;&lt;=<span class="number">1</span>);<span class="keyword">for</span>(<span class="type">int</span> i=M+<span class="number">1</span>;i&lt;=M+n;i++) d[i]=<span class="built_in">in</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=M<span class="number">-1</span>;i;--i) d[i]=<span class="built_in">min</span>(d[i&lt;&lt;<span class="number">1</span>],d[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]),d[i&lt;&lt;<span class="number">1</span>]-=d[i],d[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]-=d[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在当前情况下的查询</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">Sum</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> res=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x) res+=d[x],x&gt;&gt;=<span class="number">1</span>;<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区间那块不太需要了。此处不写了。</p><h3 id="代码实现">代码实现</h3><p>代码本身没啥可说的其实，有几点要注意。在明白了zkw线段树的建树过程之后，我们知道，我们会申请一个数组去存放需要存的页。注意，这里我们需要先探测一下有多少内存空间再申请数组，一上来duang一下申请一个固定的数组而且还是1w肯定是不对的（比如某位学长的，16384个页他只申请了10000长度的区间，逗我呢。天问之路那个猛人和清华17级的一个人写的是对的）</p><p>释放的维护我抄了一下，不然自己写的话，要写很多行。其他的不需要，尤其是pushdown操作。当我们要分配某一个节点的时候，把他变成零就好，因为遍历的时候到零就停了，他的子孙节点并不需要被更新。<sub>一开始还写了这破玩意，导致后面维护几乎不可能，极其难蚌。</sub></p><p>整体代码不难，因为zkw线段树本身就是非常优美的数据结构，而且本身代码量就短。</p><p>然后我再写一点分析大佬的代码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buddy_page = (<span class="type">unsigned</span> <span class="type">int</span>*)<span class="built_in">KADDR</span>(<span class="built_in">page2pa</span>(base));</span><br></pre></td></tr></table></figure><p>这一行背后的内容很多。他利用了物理页在内存空间中是通过一维数组管理的这个特性。首先，由于初始时内存空间是连续的，那么将基址转化成物理地址，这一步实际上自动把所有页连接好通过一维数组管理了，这就是为什么他的init函数不写任何内容的原因。然后转化成内核地址。这样就靠物理页的数组来管理zkw线段树了。不过他这样是不是有点危险？我也搞不太懂，等我过两天写完os近期的knowledge总结再说。其实后面还有一段就是他说保留了33个页给伙伴系统，这一点我认为应该是由ucore自动完成的，不应该是自己写的，不知道我理解的正不正确。不过我没按照他这么做，一样能通过，所以，暂时假设我说的是对的。</p>]]></content>
      
      
      <categories>
          
          <category> cs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
            <tag> lab </tag>
            
            <tag> os </tag>
            
            <tag> data structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出Embedding-1</title>
      <link href="/post/cf647385.html"/>
      <url>/post/cf647385.html</url>
      
        <content type="html"><![CDATA[<h1>写在前面</h1><p>本文为阅读《深入浅出Embedding》系列读书笔记的第一篇。这本书本身并不算很精品，只能算作质量还好的科普，但是它引用的博客都写的很不错，对很多模型写得很细致，讲得很清楚，可以进去看看。</p><h1>Embedding</h1><p>Embedding最早是在NLP领域中被提出，前面一些部分将浅浅写一下NLP的原始内容。</p><h2 id="传统方法">传统方法</h2><p>事实上，在近代的NLP问题当中，核心问题只有一个 <strong>Representation(文本表示)</strong> 。因为我们知道，文本是一种非结构化数据，是以固定的编码方式存储的一段字符串。而这样的存储方式，意味着我们无法对其进行计算。那么，早期的语言模型，主要提出了<code>独热编码</code>和<code>整数编码</code>两种对文本的表示方式。这两种方法较为基础，在此并不做更多介绍了。在本文的参考链接中，可以看到这两种方法的信息。总的来说，Embedding之前的方法，无法展示出文本之间的关联和内在信息，在可解释性上也面临较大困难。</p><h2 id="word2vector">word2vector</h2><p>Word2Vec是语言模型中的一种，它是从大量文本预料中以无监督方式学习语义知识的模型，被广泛地应用于自然语言处理中。2013年横空出世。这里附上原始论文。<a href="https://www.researchgate.net/publication/234131319_Efficient_Estimation_of_Word_Representations_in_Vector_Space">(PDF) Efficient Estimation of Word Representations in Vector Space (researchgate.net)</a></p><h3 id="省流——直接给结论">省流——直接给结论</h3><p>单从结果来说，word2vec就是希望，通过某种方式，<strong>用一个高维向量来表示一个单词</strong>（也可以拓展成一个词组甚至一个句子）。就是用一个数字来表示一个单词，在具体的程序中，我们给每一个不同点单词一个索引（可以理解为身份证号），然后这个唯一确定的索引对应一个唯一的高维向量。这样，这个单词就转变为高维向量，也就是计算机可计算的内容了。同时，由于将这些单词嵌入到一个高维空间中进行表示，这些词语在高维空间之中的分布可以较好地反映单词之间的内在联系，例如，大名鼎鼎的$Vector_{King}+Vector_{Man}+Vector_{Woman}\approx Vector_{Queen}$</p><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/emb1-1.jpg" alt="如图所示"></p><p>图片中，向量都是以男女做区分的一对单词。事实上，我们可以直观地看出在图上，不同性别的单词所反映的一对单词，都呈现出与男人-女人类似的分布规律，如果将他们对男人-女人的向量做类似的操作，可以得到相同的结论。<br><em><strong>ps: 记住这个图，我最近做的一个内容和这张图所反映的现象有关，后续将进行更新。</strong></em><br><em>pps: 事实上词向量的分布所反映的内容还有很多很多，比如随着欧美政治正确进入学术圈，在ACL2022的一篇论文，就描述了这样一种现象：工程师等单词在空间中的分布与男人更接近，而护士就与女性更接近。</em></p><p>当然这个现象，后来被成为<code>词类比</code>。上图是将高维向量降维到二维后进行可视化的结果，可以清晰地看出单词之间的分布，能够得出我们的结论。由于类似的结论非常符合我们人类的直觉和观感，因此Word Embedding比以前的诸多方法具有更好的解释性，即我们的词向量通过某些数学上的衡量方式，能够直接体现真实的语言之间的内在联系。</p><h3 id="Word2vec-的-2-种训练模式">Word2vec 的 2 种训练模式</h3><p>CBOW(Continuous Bag-of-Words Model)和Skip-gram (Continuous Skip-gram Model)，是Word2vec 的两种训练模式。下面简单做一下解释：</p><h4 id="CBOW">CBOW</h4><p>通过上下文来预测当前值。相当于一句话中扣掉一个词，让你猜这个词是什么。</p><h4 id="Skip-gram">Skip-gram</h4><p>用当前词来预测上下文。相当于给你一个词，让你猜前面和后面可能出现什么词。</p><h4 id="优化方法">优化方法</h4><p>由于Embedding大多是由onh-hot形式的稀疏矩阵得到的，为了提高速度，Word2vec 经常采用 2 种加速方式：</p><ol><li class="lvl-4"><p>Negative Sample（负采样）</p></li><li class="lvl-4"><p>Hierarchical Softmax</p></li></ol><p>具体算法内容考虑过些日子闲下来了写在文中，毕竟静态嵌入也在近两年逐渐被淘汰了（也可能会无限鸽下去）。可以看参考链接进行学习。</p><h2 id="万物皆可Embedding">万物皆可Embedding</h2><p>由于Word Embedding在NLP中取得了惊人的成果（几乎在所有榜单屠榜），因此其他一些领域也开始采用Embedding的思想进行<code>表示学习</code>，即将一个物体或一个行为或一种关系，由一个高维向量进行表示，然后进行机器学习和深度学习。这里出现了Item Embedding, Entity Embedding, Graph Embedding等等，被广泛地应用于推荐系统、知识图谱、自然语言处理和各种序列问题、分类问题。由于Embedding非常好地体现了被表示内容之间的内在联系，因此整个人工智能领域开始突飞猛进的发展。</p><p><strong>事实上，任何离散的内容，都可以通过Embedding来表示。</strong> 只不过我们不能保证可解释性和模型效果。当然，在程序中，我们只需要给我们所要表示的内容，先初始化一个指定维度的向量，然后通过反向传播去更新这个向量，最终得到我们满意的Embedding层，而不是通过word2vec的方法进行训练了。</p><h2 id="Embedding的一些问题">Embedding的一些问题</h2><p>主要有两个问题</p><h3 id="静态">静态</h3><p>Embedding一旦生成，就是确定的向量了，这是一个完全静态的数值。这就造成Embedding无法解决一词多义的问题，例如英文中的“Don’t trouble trouble”，可翻译为 “别烦恼了”，其中trouble这个词就属于一词多义。如果用word2vec 模型训练后，trouble只对应一个向量，显然无法区别这个trouble的两个含义。而一词多义，不论是在英语、中文还是在其他语言中，都是普遍存在的问题。不光在NLP领域，在一个物体或者一个行为，在不同环境中也会表现出不同的内容，这是静态数值无法解决的问题。<br><strong>因此，在2018年开始出现预训练模型，即动态Embedding。我们将在后续文章之中介绍</strong></p><h3 id="超参数">超参数</h3><p>Embedding要人类手动给出高维空间的维度，即你希望用一个多少维的向量表示一个单词。这个维度并不是越大越好，主流采用的数值在50-300之间。超参数是深度学习中永远的问题，主要依赖经验进行调参，并且给可解释性问题带来巨大困难。</p><h3 id="一些哲学小思考">一些哲学小思考</h3><p>事实上，尽管国内很多文科人为了生存大谈人工智能的社会的改变和冲击，甚至渲染“智械危机”，但其实这坨人压根不知道Embedding是个什么东西（因为看不懂代码），可能连个多层感知机都不明白。这一点国外的学者领先国内至少30年。</p><p>不过，某种程度上Embedding背后其实反映了一个并不浪漫的事实，即在计算机的世界中，一个向量就能代表一个单词、一个行为、一个物体，区区256维的Tensor在计算机中甚至占不到1kb的存储空间，却能表示一个人（的全部）。同时，由于维度是超参数，我们可以继续追问，多少个维度（维度可以理解为特征）就能表示一个单词甚至一个人了？一个人只有256个特征或者品质吗？真的有无限可能吗？</p><h2 id="Embedding的意义">Embedding的意义</h2><p>Embedding是第一次很好地解决了用数值表示非数值化数据的问题，其优美的结论和良好的可解释性，使得其迅速风靡整个AI领域。在我看来，Embedding是推动AI发展的第一功臣，其重要性甚至超过硬件的发展对AI的影响。我们第一次初步解决了表示学习这个巨大的问题，从此之后，任何离散信息我们都可以通过Embedding的方式进行表示。甚至Embedding的出现，间接地消灭了特征工程这个传统机器学习领域最困难的部分。可以说，无论如何高度评价Embedding都不为过。具体应该结合代码，深入理解Embedding的过程和对效果的提升。</p><h1>参考链接</h1><p><a href="https://easyai.tech/ai-definition/word-embedding/">一文看懂词嵌入 word embedding（2种主流算法+与其他文本表示比较） (easyai.tech)</a></p><p><a href="https://zhuanlan.zhihu.com/p/114538417">深入浅出Word2Vec原理解析 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> cs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Embedding </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>os knowledge1</title>
      <link href="/post/f071790c.html"/>
      <url>/post/f071790c.html</url>
      
        <content type="html"><![CDATA[<p>主要根据自学的《操作系统：精髓与设计原理》和《现代操作系统》(指定教材——黑砖)所写</p><h1>基础知识</h1><p>这部分主要是计算机组成的内容，万幸用的不深，哪怕去年计组摆了依然能看懂</p><h2 id="冯诺依曼结构">冯诺依曼结构</h2><p>计算机由处理器、存储器和输入/输出部件组成，每类部件都有一个或多个模块。这些部件以某种方式互连，以实现计算机执行程序的主要功能。因此，计算机有4个主要的结构化部件：</p><ul class="lvl-0"><li class="lvl-2"><p>处理器(Processor)：控制计算机的操作，执行数据处理功能。只有一个处理器时，它通常指中央处理器(CPU)。</p></li><li class="lvl-2"><p>内存(Main memory):存储数据和程序。此类存储器通常是易失性的，即当计算机关机时， 存储器的内容会丢失。相对于此的是磁盘存储器，当计算机关机时，它的内容不会丢失。内存通常也称为实存储器(real memory)或主存储器(primary memory )</p></li><li class="lvl-2"><p>输入/输出模块(I/O modules): 在计算机和外部环境之间移动数据。外部环境由各种外部设 备组成，包括辅助存储器设备(如硬盘)、通信设备和终端。</p></li><li class="lvl-2"><p>系统总线(System bus)：在处理器、内存和输入/输出模块间提供通信的设施。</p></li></ul><h2 id="一些寄存器">一些寄存器</h2><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/os1-1.png" alt="主要需要了解一下图片中的内容"></p><p>当然还要学习指令的相关知识。包括取指令和执行。</p><h2 id="中断">中断</h2><p><strong>非常重要的内容</strong><br>主要原因是I/O太慢而CPU太快所导致的。利用中断功能，处理器可以在I/O操作的执行过程中执行其他指令。</p><p>从用户程序的角度来看，中断打断了正常执行的序列。中断处理完成后，再恢复执行。</p><h3 id="中断处理">中断处理</h3><p><img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/os1-2.png" alt="这里主要了解这张图片"></p><p><em>其中psw中包含了当前运行进程的状态信息.包括内存使用信息、条件码和其他诸如允许中断/禁止中断位、内核/用户模式位等状态信息</em></p><h3 id="多个中断">多个中断</h3><p>处理多个中断有两种方法。第一种方法是正在处理一个中断时，禁止再发生中断。禁止中断的 意思是处理器将对任何新的中断请求信号不予理睬。如果在这期间发生了中断，通常中断保持挂起, 当处理器再次允许中断吋，再由处理器检査。<br><strong>上述方法的缺点是，未考虑相对优先级和时间限制的要求。例如，当來自通信线的输入到达时， 可能需要快速接收，以便为更多的输入让出空间。如果在第二批输入到达时第一批输入还未处理完, 就有可能由于I/O设备的缓冲区装满或溢出而丢失数据。</strong><br>第二种方法是定义中断优先级。允许髙优先级中断打断低优先级中断的运行。</p><h2 id="存储器的层次结构">存储器的层次结构</h2><p>计组八大思想的内容，也是当时一个小重点，内容应该与OS有相当重合<img src="https://raw.githubusercontent.com/TephrocactusHC/mybolgimg/master/os1-3.png" alt="简单理解就是这个金字塔，还有cache那一套东西"><br>在进行虚拟存储器和磁盘卨速缓冲设计时，还须解决类似的设计问题。这些问题可分为以下几类：</p><ul class="lvl-0"><li class="lvl-2"><p>置换算法</p></li><li class="lvl-2"><p>写策略</p></li><li class="lvl-2"><p>高速缓存的级数</p></li><li class="lvl-2"><p>高速缓存大小</p></li><li class="lvl-2"><p>块大小</p></li><li class="lvl-2"><p>映射函数</p></li></ul><h2 id="直接内存存取">直接内存存取</h2><p>执行I/O操作的技术有三种：可编程I/O、中断驱动I/O和直接内存存取(DMA)</p><ol><li class="lvl-3"><p>当处理器正在执行程序并遇到一个与I/O相关的指令时，它会通过给相应的I/O模块发命令來 执行这个指令。使用可编程I/O操作(programmed I/0)时，I/0模块执行请求的动作并设置I/O状 态寄存器中相应的位，但它并不会进一步通知处理器，尤其是它并不会中断处理器。因此处理器在 执行I/O指令后，还要定期检査I/O模块的状态，以确定I/O操作是否已经完成。 <strong>可编程I/O的问题是，处理器通常必须等待很长的时间，以确定1/0模块是否做好了接收或发 送更多数据的准备。处理器在等待期间必须不断地询问I/O模块的状态，因此会严重降低整个系统 的性能。</strong></p></li><li class="lvl-3"><p>另 种选择是中断驱动I/O (interrupt-driven I/O)。由处理器给I/O模块发送I/O命令.然后处理器继续做其他一些有用的工作。当V0模块准备好与处理器交换数据时，它将打断处理器的执行 并请求服务。处理器和前面一样执行数据传送，然后恢复处理器以前的执行过程， 尽管中断驱动I/O比简单的可编程I/O更有效，但处理器仍然需要主动干预在存储器和I/0模 块之间的数据传送，并且任何数据传送都必须完全通过处理器。</p></li></ol><p><strong>总的来说，上述两种方法有以下问题：</strong></p><ol><li class="lvl-3"><p>I/O传送速度受限于处理器测试设备和提供服务的速度。</p></li><li class="lvl-3"><p>处理器忙于管理I/O传送的工作，必须执行很多指令以完成I/O传送。</p></li></ol><p>因此有了新的技术：<strong>直接内存存取（Direct Memory Access, DMA）</strong>。<br>DMA功能可以由系统总线中的一个独立模块完成，也可以并入一个I/O模块中。无论采用何种形式， 该技术的工作方式均是在处理器读或写一块数据时，给DMA模块产生一条命令，发送以下信息：</p><ul class="lvl-0"><li class="lvl-2"><p>是否请求一次读或写</p></li><li class="lvl-2"><p>所涉I/O设备的地址</p></li><li class="lvl-2"><p>开始读或写的存储器单元</p></li><li class="lvl-2"><p>需要读或写的字数 之后处理器继续其他工作。</p></li></ul><p>处理器把这个操作委托给DMA模块负责处理。DMA模块直接与存储器 交互，传送整个数据块，每次传送一个字。这个过程不需要处理器参与。传送完成后，DMA模块向 处理器发一个中断信号。因此.只有在开始传送和传送结束时处理器才会参与。</p><p>总的来说，就是I/O太慢，而CPU太快导致</p><h2 id="多核与多处理器">多核与多处理器</h2><p>没什么太可说的，可以看两本书的参考资料和附录。 有一句很有意思的话，操作系统本身不太可能运行在GPU上。</p><h1>操作系统</h1><h2 id="概念">概念</h2><p>操作系统是控制应用程序执行的程序，是应用程序和计算机硬件间的接口。或者说操作系统是一个软件，很特殊的软件。操作系统的实际客户是应用程序。因此，操作系统有以下目标：</p><ul class="lvl-0"><li class="lvl-2"><p>方便：操作系统使计算机更易于使用。</p></li><li class="lvl-2"><p>有效：操作系统允许以更有效的方式使用计算机系统资源。</p></li><li class="lvl-2"><p>扩展能力：在构造操作系统时，应允许在不妨碍服务的前提下，有效地开发、测试和引入新 的系统功能。</p></li></ul><p>操作系统的设计，体现了计组八大思想中的抽象。操作系统为程序员屏蔽了硬件细节，并为程序员使用系统提供了方便 的接口。它可作为中介，使程序员及应用程序更容易地访问与使用这些功能和服务。</p><p>典型计算机系统中的三种重要接口：</p><ul class="lvl-0"><li class="lvl-2"><p>指令系统体系结构（ISA）:定义了计算机遵循的机器语言指令系统，该接口是硬件与软件 的分界线。注意，应用程序和实用程序都可直接访问ISA,这些程序使用指令系统的一个子 集（用户级ISA）。操作系统能使用其他一些操作系统资源的机器语言指令（系统级ISA）。</p></li><li class="lvl-2"><p>应用程序二进制接口（ABI）:这种接口定义了程序间二进制可移植性的标准。AB1定义T 操作系统的系统调用接口，以及在系统中通过ISA能使用的硬件资源和服务。</p></li><li class="lvl-2"><p>应用程序编程接口（API〉： API允许应用程序访问系统的硬件资源和服务，这些服务由用户 级ISA和高级语言库（HLL）调用来提供。使用API能让应用软件更容易重新编译并移植 到具有相同API的其他系统中。</p></li></ul><h2 id="资源管理者">资源管理者</h2><p>操作系统通常提供了以下几个方面的服务：</p><ul class="lvl-0"><li class="lvl-2"><p>程序开发</p></li><li class="lvl-2"><p>程序运行</p></li><li class="lvl-2"><p>I/O设备访问</p></li><li class="lvl-2"><p>文件访问控制</p></li><li class="lvl-2"><p>系统访问</p></li><li class="lvl-2"><p>错误检測和晌应</p></li><li class="lvl-2"><p>记账</p></li></ul><p>一台计算机就是一组资源，这些资源用于移动、存储和处理数据，并对这些功能进行控制，而 操作系统负责管理这些资源。操作系统的一部分在内存中，包括内核程序（kernel 或nucleus）和当前正在使用的其他操作系统程序，内核程序包含操作系统中最常使用的功能。</p><h2 id="发展历史及问题和解决方案">发展历史及问题和解决方案</h2><h3 id="串行">串行</h3><ul class="lvl-0"><li class="lvl-2"><p>调度：大多数装置都使用硬拷贝登记表来预订机器时间。通常，用户可以以半小时为单位登 记一段吋间。有时，用户登记了 1小时而仅用45分钟就完成了工作，剩下的时间里计算机 只能闲置，这时就会导致浪费。另一方面，用户因遇到问题而未在分配的时间内完成工作， 则在解决问题前会被强制停止。</p></li><li class="lvl-2"><p>准备时间：称为作业的单个程序，可能会向内存中加载编译器和髙级语言程序（源程序）， 保存编译好的程序（目标程序），然后加载目标程序和公用函数并进行链接。每个步骤都可 能需要安装或拆卸磁带，或准备卡片组。若在此期间发生了错误，则用户只能全部重新幵始。 因此，在程序运行前的准备工作需要花费大量的时间。</p></li></ul><p>这种操作模式称为串行处理，它反映了用户必须顺序访问计算机的事实。后来，为使串行处理 更加有效，人们开发了各种各样的系统软件工具，包括公用函数库、链接器、加载器、调试器和I/O 驱动程序，它们作为公用软件可为所有用户使用。</p><h3 id="简单批处理">简单批处理</h3><p>简单批处理方案的中心思想是使用一个称为<strong>监控程序（monitor）</strong> 的软件。通过使用这类操作系 统，用户不再直接访问机器，相反，用户把卡片或磁带中的作业提交给计算机操作员，由操作员把 这些作业按顺序组织成批，并将整个批作业放在输入设备上，供监控程序使用。每个程序完成处理 后返回到监控程序，同时监控程序自动加载下一个程序。</p><p>可以看出，监控程序或批处理操作系统，只是一个简单的计算机程序。它依赖于处理器可从 内存的不同部分取指令的能力，交替地获取或释放控制权。此外，还考虑到了其他硬件功能：</p><ul class="lvl-0"><li class="lvl-2"><p>内存保护：当用户程序正在运行时，不能改变包含监控程序的内存区域。若试图这样做，处理器硬件将发现错误，并将控制权转移给监控程序，监控程序取消这个作业，输出错误信息， 并加载下一个作业。</p></li><li class="lvl-2"><p>定时器：定时器用于防止一个作业独占系统。在每个作业开始时，设置定时器，若定时器时 间到，就会停止用户程序，控制权返回给监控程序。</p></li><li class="lvl-2"><p>特权指令：某些机器指令被设计成特权指令，只能由监控程序执行。处理器在运行一个用 户程序时遇到这类指令，会发生错误，并将控制权转移给监控程序。I/0指令属于特权指 令，因此监控程序可以控制所有1/0设备，此外还可避免用户程序意外地读到下一个作业 中的作业控制指令。用户程序希望执行I/O时，须请求监控程序为自己执行这一操作。</p></li><li class="lvl-2"><p>中断：早期的计算机模型并没有中断能力。这个特征使得操作系统在让用户程序放弃控制权 或从用户程序获得控制权时，具有更大的灵活性。</p></li></ul><p>由内存保护和特权级引出了运行模式的概念。用户程序以用户模式（usermode）执行，此时有些 内存区域是受保护的，特权指令也不允许执行。监控程序以系统态或内核模式（kernel mode）执行， 此时不仅可以执行特权指令，而且可以访问受保护的内存区域。比如我们熟知的ring0和ring3</p><h3 id="多道批处理系统">多道批处理系统</h3><p>多道程序设计 (multiprogramming)或多任务处理(multitasking), 它是现代操作系统的主要方案。</p><p>多道程序设计操作系统要比单个程序或单道程序设计(uniprogramming)系统复杂。待运行的 多个作业须保留在内存中，因此需要内存管理(memory management)。此外，准备运行多个作业时， 处理器必须决定运行哪个作业，因此需要某种调度算法。</p><h3 id="分时系统">分时系统</h3><p>较原始，总体思想就是不能让CPU闲着。</p><h2 id="操作系统的成就">操作系统的成就</h2><p>操作系统幵发中的4个重要理论进展：</p><ul class="lvl-0"><li class="lvl-2"><p>进程</p></li><li class="lvl-2"><p>信息保护和安全</p></li><li class="lvl-2"><p>内存管理</p></li><li class="lvl-2"><p>调度和资源管理</p></li></ul><p>具体内容将在后续章节中涉及，《操作系统：精髓与设计原理》中做了基本的介绍。</p><h2 id="现代操作系统的特征">现代操作系统的特征</h2><p>在实验操作系统和商用操作系统中，设计人员采用了很多 不同的方法和设计要素，它们大致可分为以下几类：</p><ul class="lvl-0"><li class="lvl-2"><p>微内核体系结构</p></li><li class="lvl-2"><p>分布式操作系统</p></li><li class="lvl-2"><p>多线程</p></li><li class="lvl-2"><p>面向对象设计</p></li><li class="lvl-2"><p>对称多处理</p></li></ul><p>还有具体的WINDOWS和LINUX还有ANDROID系统的一些介绍，这里不放了（我没看）。</p>]]></content>
      
      
      <categories>
          
          <category> cs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> knowledge </tag>
            
            <tag> os </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美国家书</title>
      <link href="/post/e4ded38c.html"/>
      <url>/post/e4ded38c.html</url>
      
        <content type="html"><![CDATA[<h1>美国家书</h1><h2 id="写在前面">写在前面</h2><p>介绍是选取了45位美国名人的书信，大约几十封的样子。本书应该是没有所谓英文版，而是由中文译者直接摘录部分书信集合而成。我去谷歌上搜索书中的书信，大多数不能找到英文的电子版原版（可能方法错误），不过相当一部分显示收录在档案馆或者资料室中，因此暂时判断内容都是真实的，而不是国内瞎出的鸡汤文。</p><h2 id="评价">评价</h2><p>书里虽然分了几个主题，但是其实每个主题之下的书信关系并不大，因此并不需要在意本书的编排顺序。首先要说的是，翻译的水平还是在线的，没有出现明显的翻译腔。而且部分句子翻译的很符合中文里金句的特点。就内容而言，有的信长，有的信短，但都非常真挚。这本书的推荐语叫中国的傅雷家书，实际上傅雷家书那种虚伪而恶心的东西和真挚的书信一比就高下立判。（傅雷自己特意留存信件，说是目的是将自己的信件集成书传下来，成为后世教育人的典范。**尼玛，自己的家书居然是写给外人看的，那你写信干嘛，发报纸上让孩子订报纸不就得了。垃圾中的垃圾，近代爹味说教祖师爷。**万幸，傅雷求锤得锤，他远在英国的儿子烦透他了有段时间根本不搭理他。）</p><p>下面是我个人喜欢的其中一些内容：伊丽莎白·卡迪·斯坦顿写给玛格丽特·L·斯坦顿的信。</p><p>弗雷德里克·劳·奥姆斯特德写给小弗雷德里克·劳·奥姆斯特德的信</p><blockquote><p>我唯一的疑问是，你的常规学业安排是否过满了，还能否有时间学习课业以外的东西？除了大学课程，我希望你安排出恰当的时间，系统地思考、管理其他方面的一些学习事项。…。针对一个主题，我希望你保持定期的、有条理的阅读和思考。我是说，至少每周花五个小时。四年后，你若读遍有关这个主题的英语、法语和德语经典，我估计你会成为这世上就这个门类最博览群书的人。</p></blockquote><p>舍伍德·安德森写给约翰·安德森的信。</p><blockquote><p>最重要的是，不要听从那些愚人的建议，他们压根不懂自己在讲什么。很多小生意人只会说：“学学我的样子。”他们觉得自己只要攒了一点小钱，在某个圈子里有了一席之地，就够格指点别人了他。真是异想天开。</p></blockquote><p>理查德·E·伯德写给小理查德·E·伯德的信，非常感人的一篇</p><blockquote><p>你若结婚，看在上帝的份上，请不要娶一个不喜欢你母亲的妻子，或者一个会干预你和母亲关系的妻子。女人们总是相互嫉妒。特别是在母亲和妻子之间。千万不要仓促成婚。</p></blockquote><p>笑死了，美国人婆媳关系和中国人一样。</p><p>安娜·艾莉诺·罗斯福写给詹姆斯·罗斯福的信。讲了仪式感的重要性。</p><p>尤金·奥尼尔的信，展示了求学的道理。</p><blockquote><p>我举得，你的问题还是在于太过依赖别人。你对外界期望过多，而对自己要求太少。你希望别人把每件事都给你安排得顺顺当当。可是，你已经这么大了，也见过了不少市面，应该能够明白，过分依赖别人只会让自己一事无成。对于你生命中真正重要的决定，其他人是帮不上忙的。因为傻瓜都知道，在你期望有所建树的领域全情投入，是通往幸福的唯一道路。</p></blockquote><p>弗朗西斯·斯科特·基·菲茨杰拉德写给弗朗西斯·斯科蒂·菲茨杰拉德的信。写了一些关于三观的建议。</p><p>威廉·劳埃德·加里森写给小威廉·劳埃德·加里森的信。对希望把孩子培养成什么样的人，对品格，有着一定的期许。</p><p>约翰·亚当斯，他本人精通七门语言，儿子们也都是三四种，真实精英家庭。而林肯·斯蒂芬斯也提到，建议孩子多学外语。</p><p>最后查尔斯·富兰克林·施文写给上大学的孩子们的信，很值得一看。他描绘的就是理想的大学甚至人生的生活。</p><p>ps: 在美国人的文化里，宗教真的很重要，几乎每一篇书信都有上帝和教堂。<br>pps: 有不少句子不错，可以摘抄一下日后拿出来用。豆瓣上有人发过类似的东西，这里就不写了。不过由于目前查不到这些书信的英文原版，这些句子在引用的时候，还是得慎重。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>computer-network-lab1</title>
      <link href="/post/16eec244.html"/>
      <url>/post/16eec244.html</url>
      
        <content type="html"><![CDATA[<h1>要求和基本步骤</h1><p>NKU COMPUTER NETWORK LAB1</p><h2 id="实验要求">实验要求</h2><p>使用流式Socket，设计一个两人聊天协议，要求聊天信息带有时间标签。请完整地说明交互消息的类型、语法、语义、时序等具体的消息处理方式。</p><h2 id="具体实现">具体实现</h2><h3 id="关于协议">关于协议</h3><p>这一点个人随意设计，大致思路是，除了聊天所发出的消息，加上一些其他的字段，比如源IP和目标IP，或者随便加点什么然后称这个字段是检验位。也可以搞一些编码转换或者和IP有关的的东西。</p><h3 id="具体实现-2">具体实现</h3><p>单纯的二人聊天比较简单，就是按照老师的PPT或者网上可参考的程序，在server端调用socket, bind, listen, accept, 在client端调用socket, connect, 然后再在while循环中调用send, recv 即可。当然，这里需要注意的是，此时的聊天程序只能是one by one的聊天，并不能实现一个人发送多条消息，而且也不能接收多条消息，甚至只能由某一端先说话，是一种比较笨的实现方式。这主要是由于阻塞问题。如果非要这样实现，可行的方式是在时间上进行调整，使缓冲区重新变为空。</p><p>解决方法是采用多线程的方式，将发送和接收消息写成两个线程，这样双方互不干扰，就不会有阻塞的问题。</p><p>当然，如果要实现多人聊天，那么情况就会变得复杂，server端此时要实现转发的功能，而且在某个客户端上线或者下线，以及随之带来的标号变化都需要考虑一下。同时，如果像18级丁神考虑了私聊和群发的话，也是有很多新东西要考虑。这时如果设计的不好又会再次出现阻塞这个问题，这样会导致只有每一个客户端都发完消息，消息才会被显示，总之各种小坑。</p><p>所需函数均已在PPT中给出，但是这门课的实验，一没有实验指导书，二没有代码框架，如果只看PPT其实是很难顺利完成实验的，因为这门课对实验的设计显然是非常不完备的。</p><p>附上一些老师给出的代码，完整代码将在课程结束后一并放出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">WSAStartup</span>(wVersionRequested, &amp;wsaData);</span><br><span class="line"></span><br><span class="line">SOCKET sockClient = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">connect</span>(sockClient, (SOCKADDR*)&amp;addrSrv, <span class="built_in">sizeof</span>(SOCKADDR));</span><br><span class="line"></span><br><span class="line"><span class="built_in">recv</span>(sockClient, recvBuf, <span class="number">50</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">send</span>(sockClient, <span class="string">&quot;hello&quot;</span>, sendlen, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">closesocket</span>(sockClient);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">WSAStartup</span>(wVersionRequested, &amp;wsaData);</span><br><span class="line">SOCKET sockSrv = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">bind</span>(sockSrv, (SOCKADDR*)&amp;addrSrv, <span class="built_in">sizeof</span>(SOCKADDR));</span><br><span class="line"><span class="built_in">listen</span>(sockSrv, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">SOCKET sockConn = <span class="built_in">accept</span>(sockSrv, (SOCKADDR*)&amp;addrClient, &amp;len);</span><br><span class="line">hThread = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>, handlerRequest,<span class="built_in">LPVOID</span>(sockConn), <span class="number">0</span>, &amp;dwThreadId);</span><br><span class="line"><span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">closesocket</span>(sockSrv);</span><br><span class="line"><span class="built_in">WSACleanup</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">handlerRequest</span><span class="params">(LPVOID lparam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SOCKET ClientSocket = (SOCKET)(LPVOID)lparam;</span><br><span class="line"><span class="built_in">send</span>(ClientSocket, sendBuf, strlen, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">recv</span>(ClientSocket, recvBuf, <span class="number">50</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">closesocket</span>(ClientSocket);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>ps: 老师给的这个多线程server端并不好，建议重构。</em></p><p>附上一些参考链接，有助于从零开始理解和写出程序：<a href="http://c.biancheng.net/socket/">一个讲解原理的</a><a href="https://blog.csdn.net/qq_34888036/article/details/81062071">一个csdn的博客</a><br>B站上也有一些视频也不错，都是很值得推荐的，跟着做绝对能做出来。</p><p><strong>如果你想要自己完成，那么看到这里已经够了。</strong> 如果你想要采取某些技巧完成这个作业，然后拿出更多时间干更有意义的事情，请往下看。</p><h1>我的程序</h1><p>分了三个版本，3.0最难但仍然没有拿到满分，不过考虑到本身实验也占比不多，就无所谓了，拿出时间去学学uCORE是更有意义的事情。</p><h2 id="1-0">1.0</h2><p>初代版本比较简单，所实现的功能非常简陋。</p><p>具体介绍如下：</p><ul class="lvl-0"><li class="lvl-2"><p>采用server和client对话，并不需要转发</p></li><li class="lvl-2"><p>只能由一端先开始发送，另一端必须在接收消息之后才能发送</p></li><li class="lvl-2"><p>一次只能发送一条，不能连续发送消息</p></li><li class="lvl-2"><p>也不能连续接收消息</p></li><li class="lvl-2"><p><em>但是很简单，交了能拿90分，也挺好的</em></p></li></ul><p>代码很简单，只需要小幅度老师给的程序修改即可。里面写了一些注释，用于说明。</p><p>首先是一段改变控制台的颜色的代码，我也不懂具体什么原理，反正确实能用，如果像弄懂，请把代码直接复制到搜索引擎进行搜索，应该第一个csdn的博客就是。并不需要在程序中实现这种花里胡哨的功能，我当时仅仅是为了分开发送和接收才加的，都是白色的看着太累了。</p><figure class="highlight c++"><figcaption><span>Client</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetColor</span><span class="params">(<span class="type">int</span> fore=<span class="number">7</span>,<span class="type">int</span> back=<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> m_color = fore;</span><br><span class="line">    m_color += (back &lt;&lt; <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">SetConsoleTextAttribute</span>(<span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE), m_color);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面进入正文了朋友们。</p><figure class="highlight c++"><figcaption><span>Client</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> FIRST_JUDGE;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    FIRST_JUDGE = <span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="comment">//指定版本wVersionRequested=MAKEWORD(a,b)。MAKEWORD()是一个宏把两个数字组合成一个WORD，无符号的短整型</span></span><br><span class="line">    <span class="keyword">if</span> (FIRST_JUDGE != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//等于没有链接成功，失败了。</span></span><br><span class="line">        <span class="built_in">SetColor</span>(<span class="number">0</span>,<span class="number">12</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;初始化socket都失败了宝贝儿，你穆哥建议还是先回家再好好学学吧！(￢_￢)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建socket。这里我们使用流式socket。</span></span><br><span class="line">    socket_client1 = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化客户端地址</span></span><br><span class="line">    addr_client1.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);<span class="comment">//把我们本机的地址转换成网络字节二进制值序</span></span><br><span class="line">    addr_client1.sin_family = AF_INET;<span class="comment">//使用ipv4</span></span><br><span class="line">    addr_client1.sin_port = <span class="built_in">htons</span>(<span class="number">8000</span>);<span class="comment">//转换函数，也是转换成网络字节序。</span></span><br><span class="line">    <span class="comment">//初始化地址</span></span><br><span class="line">    addr_serve1.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;10.130.122.241&quot;</span>);<span class="comment">//把我们本机的地址转换成网络字节二进制值序</span></span><br><span class="line">    addr_serve1.sin_family = AF_INET;<span class="comment">//使用ipv4</span></span><br><span class="line">    addr_serve1.sin_port = <span class="built_in">htons</span>(<span class="number">8000</span>);<span class="comment">//转换函数，也是转换成网络字节序。</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">connect</span>(socket_client1,(SOCKADDR *) &amp;addr_serve1,<span class="built_in">sizeof</span>(addr_serve1) )!=SOCKET_ERROR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(send_buf1, <span class="string">&quot;你好啊！我是客户端！我已经连接到你了！&quot;</span>);</span><br><span class="line">        <span class="built_in">send</span>(socket_client1, send_buf1, <span class="number">2048</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">SetColor</span>(<span class="number">0</span>,<span class="number">12</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;连接失败了宝贝儿，快查查是不是没启动服务端呢？|_(._.)_|&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">SetColor</span>(<span class="number">0</span>,<span class="number">12</span>);</span><br><span class="line">        <span class="built_in">recv</span>(socket_client1,receive_buf1,<span class="built_in">sizeof</span>(receive_buf1),<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//判断是否对方要退出</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strlen</span>(receive_buf1) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;服务器选择结束聊天了！再见哟！（//▽//）&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">time_t</span> now_time = <span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">            tm *t_tm = <span class="built_in">localtime</span>(&amp;now_time);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;服务端发的：&quot;</span> &lt;&lt; receive_buf1 &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; <span class="string">&quot;收到时间: &quot;</span> &lt;&lt; <span class="built_in">asctime</span>(t_tm);</span><br><span class="line">        &#125;</span><br><span class="line">        cin.<span class="built_in">getline</span>(input_buf1, <span class="number">2048</span>, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(<span class="string">&quot;quit&quot;</span>, input_buf1))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">send</span>(socket_client1, &#123;&#125;, <span class="number">2048</span>, <span class="number">0</span>);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;您已选择结束聊天！（//▽//）&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(send_buf1, input_buf1);</span><br><span class="line">        <span class="built_in">send</span>(socket_client1, send_buf1, <span class="number">2048</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Sleep</span>(<span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">closesocket</span>(socket_client1);</span><br><span class="line">    <span class="built_in">WSACleanup</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>Server</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> FIRST_JUDGE;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    FIRST_JUDGE = <span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="comment">//指定版本wVersionRequested=MAKEWORD(a,b)。MAKEWORD()是一个宏把两个数字组合成一个WORD，无符号的短整型</span></span><br><span class="line">    <span class="keyword">if</span> (FIRST_JUDGE != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//如果失败了</span></span><br><span class="line">        <span class="built_in">SetColor</span>(<span class="number">0</span>,<span class="number">12</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;初始化socket都失败了宝贝儿，建议还是先回家再好好学学吧！(￢_￢)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建socket。这里我们使用流式socket。</span></span><br><span class="line">    socket_serve = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//初始化客户端地址</span></span><br><span class="line">    addr_serve.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;10.130.122.241&quot;</span>);<span class="comment">//把我们本机的地址转换成网络字节二进制值序</span></span><br><span class="line">    addr_serve.sin_family = AF_INET;<span class="comment">//使用ipv4</span></span><br><span class="line">    addr_serve.sin_port = <span class="built_in">htons</span>(<span class="number">8000</span>);<span class="comment">//转换函数，也是转换成网络字节序。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">bind</span>(socket_serve, (SOCKADDR *) &amp;addr_serve, <span class="built_in">sizeof</span>(SOCKADDR)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">SetColor</span>(<span class="number">0</span>,<span class="number">12</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;绑定这一步都失败了宝贝儿，建议还是先回家再好好学学吧！(￢_￢)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//绑定</span></span><br><span class="line">    <span class="built_in">bind</span>(socket_serve, (SOCKADDR *) &amp;addr_serve, <span class="built_in">sizeof</span>(SOCKADDR));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听</span></span><br><span class="line">    <span class="built_in">listen</span>(socket_serve, <span class="number">5</span>);</span><br><span class="line">    socket_client = <span class="built_in">accept</span>(socket_serve, (SOCKADDR *) &amp;addr_client, &amp;size_addr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接受，返回的是一个socket</span></span><br><span class="line">    <span class="keyword">if</span> (socket_client != INVALID_SOCKET)<span class="comment">//判断连接成功</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">SetColor</span>(<span class="number">0</span>,<span class="number">12</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;LOGGING: 成功连接上啦！(^_^)&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//        strcpy(send_buf, &quot;你好啊！我是客户端！你已经连接到我了！&quot;);</span></span><br><span class="line"><span class="comment">//        send(socket_client, send_buf, 2048, 0);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">SetColor</span>(<span class="number">0</span>,<span class="number">12</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;连接失败了宝贝儿，快查查是不是没启动客户端呢？|_(._.)_|&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">char</span> receive_buf_loop[buf_size]=&#123;&#125;;</span><br><span class="line"><span class="comment">//        int NetTimeout = 500; //超时时长</span></span><br><span class="line"><span class="comment">//        setsockopt(socket_client, SOL_SOCKET,SO_RCVTIMEO,(char *)&amp;NetTimeout,sizeof(int));</span></span><br><span class="line">        <span class="built_in">recv</span>(socket_client, receive_buf_loop,<span class="number">2048</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//判断是否对方要退出</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strlen</span>(receive_buf_loop) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;客户端选择结束聊天了！再见哟！（//▽//）&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">time_t</span> now_time = <span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">            tm *t_tm = <span class="built_in">localtime</span>(&amp;now_time);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;客户端发的：&quot;</span> &lt;&lt; receive_buf_loop &lt;&lt; <span class="string">&quot;  &quot;</span> &lt;&lt; <span class="string">&quot;自己收到时间: &quot;</span> &lt;&lt; <span class="built_in">asctime</span>(t_tm);</span><br><span class="line">        &#125;</span><br><span class="line">        cin.<span class="built_in">getline</span>(input_buf, <span class="number">2048</span>, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(<span class="string">&quot;quit&quot;</span>, input_buf))</span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">//            strcpy(send_buf, &#x27;\0&#x27;);</span></span><br><span class="line">            <span class="built_in">send</span>(socket_client, &#123;&#125;, <span class="number">2048</span>, <span class="number">0</span>);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;您已选择结束聊天！（//▽//）&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(send_buf, input_buf);</span><br><span class="line">        <span class="built_in">send</span>(socket_client, send_buf, <span class="number">2048</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Sleep</span>(<span class="number">30</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">closesocket</span>(socket_serve);</span><br><span class="line">    <span class="built_in">WSACleanup</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是基本功能，如果大三上编译和操作系统还有体系结构或者恶意代码的压力很大的话，直接改改我这个就好了。计网这些实验都不算精品，没有经过精心的设计，因此不值得认真研究。看看uCORE吧朋友们，那玩意很深。</p><h2 id="2-0">2.0</h2><p>2.0版本依旧是二人对话，而且依旧是服务端和客户端对话，唯一的区别就是弄了多线程，而且自己假模假式的设计了一个协议——随便加了点字符上去。这样每一个人都可以开始发送和接收，而且发送接收多条都可以，很随心所欲。</p><p>首先是一个解析报文的函数。就是在所发送的消息之前随便加了个字段，然后就发出去了，这样在接收那边就要用这个解析一下。</p><figure class="highlight c++"><figcaption><span>Parse</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">string <span class="title">parseMessage</span> <span class="params">(<span class="type">char</span> *s)</span> </span>&#123;</span><br><span class="line">    <span class="function">string <span class="title">str</span><span class="params">(s)</span></span>;</span><br><span class="line">    <span class="type">int</span> pos = str.<span class="built_in">find</span> ( <span class="string">&quot;mycNB!&quot;</span> , <span class="number">0</span> , <span class="number">6</span>) ;</span><br><span class="line">    <span class="keyword">if</span> ( pos == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    string chat = str.<span class="built_in">substr</span> (pos + <span class="number">6</span>,str.<span class="built_in">length</span> ()) ;</span><br><span class="line">    <span class="keyword">return</span> chat ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把两个线程的内容放上来，哪一端都是这俩线程函数。主函数和1.0都大差不差的，不放上来了。</p><figure class="highlight c++"><figcaption><span>Send</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">Send</span><span class="params">(LPVOID thesocket)</span> </span>&#123;</span><br><span class="line">    SOCKET * sock = (SOCKET*)thesocket;</span><br><span class="line">    <span class="type">char</span> sendBuf[BUF_SIZE] = &#123;&#125;;</span><br><span class="line">    <span class="type">char</span> inputBuf[BUF_SIZE] = &#123;&#125;;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//printf(&quot;Input a string: &quot;);</span></span><br><span class="line">        cin.<span class="built_in">getline</span>(inputBuf, <span class="number">2048</span>, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(sendBuf, <span class="string">&quot;mycNB!&quot;</span>);</span><br><span class="line">        <span class="built_in">strcat</span>(sendBuf, inputBuf);</span><br><span class="line">        <span class="type">int</span> t = <span class="built_in">send</span>(*sock, sendBuf, <span class="built_in">strlen</span>(sendBuf), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(inputBuf, <span class="string">&quot;imquit&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            SYSTEMTIME st = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">            <span class="built_in">GetLocalTime</span>(&amp;st);</span><br><span class="line">            <span class="built_in">closesocket</span>(*sock);</span><br><span class="line">            <span class="built_in">SetColor</span>(<span class="number">0</span>,<span class="number">12</span>);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;您已于&quot;</span> &lt;&lt; st.wHour &lt;&lt; <span class="string">&quot;时&quot;</span> &lt;&lt; st.wMinute &lt;&lt; <span class="string">&quot;分&quot;</span> &lt;&lt; st.wSecond &lt;&lt; <span class="string">&quot;秒选择结束聊天了！再见哟！（//▽//）&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="comment">//printf(&quot;您已于%s时%s分%s秒选择结束聊天了！再见哟！（//▽//）&quot;,st.wHour,st.wMinute,st.wSecond);</span></span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">SetColor</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">            SYSTEMTIME st = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">            <span class="built_in">GetLocalTime</span>(&amp;st);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;消息已于&quot;</span> &lt;&lt; st.wHour &lt;&lt; <span class="string">&quot;时&quot;</span> &lt;&lt; st.wMinute &lt;&lt; <span class="string">&quot;分&quot;</span> &lt;&lt; st.wSecond &lt;&lt; <span class="string">&quot;秒成功发送\n&quot;</span> ;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;-------------------------------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(sendBuf, <span class="number">0</span>, BUF_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>Recv</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">Recv</span><span class="params">(LPVOID thesocket)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> recvBuf[BUF_SIZE] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    SOCKET *sock = (SOCKET*)thesocket;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">SetColor</span>();</span><br><span class="line">        <span class="type">int</span> t = <span class="built_in">recv</span>(*sock, recvBuf, BUF_SIZE, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="built_in">parseMessage</span> (recvBuf).<span class="built_in">data</span>(), <span class="string">&quot;imquit&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">SetColor</span>(<span class="number">0</span>,<span class="number">12</span>);</span><br><span class="line">            SYSTEMTIME st = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">            <span class="built_in">GetLocalTime</span>(&amp;st);</span><br><span class="line">            <span class="built_in">closesocket</span>(*sock);</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;您的小宝贝(服务端)已于&quot;</span> &lt;&lt; st.wMonth &lt;&lt;<span class="string">&quot;月&quot;</span>&lt;&lt; st.wDay &lt;&lt; <span class="string">&quot;日&quot;</span> &lt;&lt; st.wHour &lt;&lt; <span class="string">&quot;时&quot;</span> &lt;&lt; st.wMinute &lt;&lt; <span class="string">&quot;分&quot;</span> &lt;&lt; st.wSecond &lt;&lt; <span class="string">&quot;秒选择结束聊天了！再见哟！（//▽//）&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">time_t</span> now_time = <span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">            tm *t_tm = <span class="built_in">localtime</span>(&amp;now_time);</span><br><span class="line">            <span class="built_in">SetColor</span>(<span class="number">14</span>,<span class="number">0</span>);</span><br><span class="line">            cout &lt;&lt; <span class="built_in">asctime</span>(t_tm) &lt;&lt; <span class="string">&quot;收到您的小可爱(客户端)发来的消息:&quot;</span>;</span><br><span class="line">            cout&lt;&lt;<span class="built_in">parseMessage</span> (recvBuf)&lt;&lt;endl;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;-------------------------------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(recvBuf, <span class="number">0</span>, BUF_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个版本借鉴 <sub>（抄袭）</sub> 了朱学长的代码，可以去git上参考他的，写的比较直观，没有我这些魔改内容。</p><h2 id="3-0">3.0</h2><p>好吧，这个就是自己重写的了，因为这种有加分项的开放东西贼恶心，因此被动卷了一波，不过还是写了个群发就收手了。</p><p>这里有几点，必须先指定需要多少人聊天，然后等每一个人都加入聊天室才能开始聊天。同时，退出功能也不太完美，一个退出会导致所有人一起退出（这是我就这么设计的，因为本身这个多人聊天是从二人聊天扩展过来的，二人的聊天一旦一个人退出了你说另一个人不退出他要干嘛？更主要的原因是更合理的退出方式还需要改一些新东西，没啥时间了quq）。</p><h3 id="首先是个结构体">首先是个结构体</h3><p>本质上这玩意和2.0的解析函数一样，只不过对OOP那一套不熟悉，所以用一些结构体的东西来表示了。<em>ps: 为什么不能用python语言，python的函数就可以返回多个值，就不用写这破玩意了。python你不让调库不是一样很难，非得用Cpp锻炼？黑砖的题就是python的啊，很不理解。</em></p><figure class="highlight c++"><figcaption><span>Parse</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">message</span> &#123;</span><br><span class="line">    string id;</span><br><span class="line">    string chat;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">message</span> <span class="built_in">parseMessage</span>(<span class="type">char</span> *s) &#123;</span><br><span class="line">    message msg;</span><br><span class="line">    <span class="function">string <span class="title">str</span><span class="params">(s)</span></span>;</span><br><span class="line">    <span class="type">int</span> pos = str.<span class="built_in">find</span>(<span class="string">&quot;mycNB!&quot;</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line">    msg.id = str.<span class="built_in">substr</span>(pos + <span class="number">6</span>, <span class="number">1</span>);</span><br><span class="line">    msg.chat = str.<span class="built_in">substr</span>(pos + <span class="number">7</span>, str.<span class="built_in">length</span>());</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相信我不需要做过多解释，就是拆字符串。。。</p><h3 id="然后是线程">然后是线程</h3><p>客户端与2.0相同，在此不做说明，服务端改成一个线程，专门负责转发。其中一些判定相信看看就明白了，在此也不做过多说明了。</p><figure class="highlight c++"><figcaption><span>Transmit</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DWORD WINAPI <span class="title">Recv</span><span class="params">(LPVOID thesocket)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> recvBuf[BUF_SIZE] = &#123;&#125;;</span><br><span class="line">    SOCKET sock = sockConn[(<span class="type">long</span> <span class="type">long</span>) thesocket];</span><br><span class="line">    <span class="keyword">if</span> (sock != INVALID_SOCKET) &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">recv</span>(sock, recvBuf, BUF_SIZE, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (recvBuf[<span class="number">0</span>]) &#123;</span><br><span class="line">            message msg = <span class="built_in">parseMessage</span>(recvBuf);</span><br><span class="line">            <span class="built_in">SetColor</span>(<span class="number">14</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">strcmp</span>(msg.chat.<span class="built_in">data</span>(), <span class="string">&quot;imquit&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                cout &lt;&lt;<span class="string">&quot;有一位用户选择下线(*_*)，会议结束&quot;</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; chatnumber; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (sock != sockConn[i]) &#123;</span><br><span class="line">                        <span class="built_in">send</span>(sockConn[i], recvBuf, <span class="number">2048</span>, <span class="number">0</span>);&#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">closesocket</span>(sockConn[(<span class="type">long</span> <span class="type">long</span>) thesocket]);</span><br><span class="line">                <span class="built_in">closesocket</span>(sock);</span><br><span class="line">                sockConn[(<span class="type">long</span> <span class="type">long</span>) thesocket]=INVALID_SOCKET;</span><br><span class="line">                <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">time_t</span> now_time = <span class="built_in">time</span>(<span class="literal">NULL</span>);</span><br><span class="line">                tm *t_tm = <span class="built_in">localtime</span>(&amp;now_time);</span><br><span class="line">                cout &lt;&lt; <span class="built_in">asctime</span>(t_tm) &lt;&lt; <span class="string">&quot;收到您的小可爱&quot;</span>&lt;&lt;msg.id&lt;&lt;<span class="string">&quot;号发来的消息:&quot;</span>;</span><br><span class="line">                cout&lt;&lt;msg.chat&lt;&lt;endl;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;-----------------------------------------------&quot;</span>&lt;&lt;endl;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; chatnumber; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (sock != sockConn[i]) &#123;</span><br><span class="line">                        <span class="built_in">send</span>(sockConn[i], recvBuf, <span class="number">2048</span>, <span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">memset</span>(recvBuf,<span class="number">0</span>,BUF_SIZE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主函数">主函数</h3><p>server的主函数在此展示出来，主要是一些初始化和监听的内容。</p><figure class="highlight c++"><figcaption><span>ServerMain</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">SetColor</span>(<span class="number">0</span>, <span class="number">12</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;需要&quot;</span> &lt;&lt;chatnumber&lt;&lt;<span class="string">&quot;位用户才能开始聊天哦亲！(^-^)&quot;</span>&lt;&lt; endl;</span><br><span class="line">    <span class="built_in">SetColor</span>();</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData) ==</span><br><span class="line">        <span class="number">0</span>) <span class="comment">//指定版本wVersionRequested=MAKEWORD(a,b)。MAKEWORD()是一个宏把两个数字组合成一个WORD，无符号的短整型</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">SetColor</span>(<span class="number">0</span>, <span class="number">12</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;初始化socket成功了亲&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">SetColor</span>(<span class="number">0</span>, <span class="number">12</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;初始化socket都失败了宝贝儿，你穆哥建议还是先回家再好好学学吧！(￢_￢)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建套接字</span></span><br><span class="line">    SOCKET sockSrv = <span class="built_in">socket</span>(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    sockaddr_in addrSrv;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;addrSrv, <span class="number">0</span>, <span class="built_in">sizeof</span>(addrSrv));  <span class="comment">//每个字节都用0填充</span></span><br><span class="line">    addrSrv.sin_family = AF_INET;  <span class="comment">//使用IPv4地址</span></span><br><span class="line">    addrSrv.sin_addr.s_addr = <span class="built_in">inet_addr</span>(<span class="string">&quot;127.0.0.1&quot;</span>);  <span class="comment">//把我们本机的地址转换成网络字节二进制值序</span></span><br><span class="line">    addrSrv.sin_port = <span class="built_in">htons</span>(<span class="number">8000</span>);  <span class="comment">//端口,好像是在一个区间之内就可以.//转换函数，也是转换成网络字节序</span></span><br><span class="line">    <span class="type">int</span> z = <span class="built_in">bind</span>(sockSrv, (SOCKADDR *) &amp;addrSrv, <span class="built_in">sizeof</span>(addrSrv));</span><br><span class="line">    <span class="keyword">if</span> (z == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">SetColor</span>(<span class="number">0</span>, <span class="number">12</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;绑定这一步都失败了宝贝儿，建议还是先回家再好好学学吧！(￢_￢)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">SetColor</span>(<span class="number">0</span>, <span class="number">12</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;绑定成功了亲(^_^)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//进入监听状态</span></span><br><span class="line">    <span class="comment">//接收客户端请求</span></span><br><span class="line">    SOCKADDR addrCli[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> nSize = <span class="built_in">sizeof</span>(SOCKADDR);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">listen</span>(sockSrv, <span class="number">5</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">SetColor</span>(<span class="number">0</span>, <span class="number">12</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;正在监听之中哦亲(^_^)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; chatnumber; i++) &#123;</span><br><span class="line">            <span class="comment">//为每个客户端分配一个socket连接，将客户端的相关信息存储在addrCli中</span></span><br><span class="line">            sockConn[i] = <span class="built_in">accept</span>(sockSrv, (SOCKADDR *) &amp;addrCli[i], &amp;nSize);</span><br><span class="line">            <span class="keyword">if</span> (sockConn[i] != INVALID_SOCKET)</span><br><span class="line">            &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;用户&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;进入聊天&quot;</span> &lt;&lt; endl;</span><br><span class="line">                <span class="type">char</span> buf[<span class="number">12</span>] = <span class="string">&quot;你的id是：&quot;</span>;</span><br><span class="line">                buf[<span class="number">10</span>] = <span class="number">48</span> + i;</span><br><span class="line">                buf[<span class="number">11</span>] = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">send</span>(sockConn[i], buf, <span class="number">50</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">SetColor</span>(<span class="number">0</span>, <span class="number">12</span>);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;监听都失败了宝贝儿，你穆哥建议还是先回家再好好学学吧！(￢_￢)&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开启多线程</span></span><br><span class="line">    HANDLE hThread;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; chatnumber; i++) &#123;</span><br><span class="line">                hThread = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, Recv, <span class="built_in">LPVOID</span>(i), <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">                <span class="built_in">WaitForSingleObject</span>(hThread, <span class="number">2000</span>);</span><br><span class="line">                <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">closesocket</span>(sockSrv);</span><br><span class="line">    <span class="built_in">WSACleanup</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小小总结">小小总结</h2><p>以上就是我所写的三个版本的全部内容。需要注意的是，博客之中并没有给出变量的声明和对变量的具体说明这种内容，<sub>同时由于我非常糟糕的变量命名习惯</sub>，需要去看源码，以免造成什么误解。</p><p>整体来说，计算机网络这门课的第一个实验并不难，也不深，甚至学不到什么东西，就是调用了一堆你也不太明白底层在干什么的函数，然后写了一些乱七八糟的内容，反正最后能聊天了。基本上找一个可以参考的内容，按部就班地做下来，也就没问题了。网络上可供参考的内容太多。整体上来说小的坑、绊人的地方还是有一些，尤其是对于多线程那块，如果之前没学过可能会报一些意想不到的错误。由于本作业经历多次迭代，已经陷入到一种不可修改的地步，修改任何一行都有可能造成程序的崩溃，因此我在实现了群发之后，也就收手了。</p><h1>写在最后</h1><p>如果3.0仍不满足你对分数的要求，可以自行探索相关内容或者顺着我的github上follow的那些人，他们之中有很多大神，都开源了自己的代码。希望本篇博客对你有帮助。<a href="https://github.com/TephrocactusHC/netweork">我开源了自己的代码</a>，如果对你有帮助的话，<strong>请给我STAR！谢谢！</strong></p><p>对于本课程，我想说实验的质量确实有待提高，虽然我校的大多数课的实验都不是很完备，但是连个实验指导书都没有就非常过分了。因此，我的建议还是自学，因为也不查重，只要看懂代码，稍作修改然后在给助教讲的时候讲清楚并正确回答问题即可。只要别很头铁地直接复制粘贴然后也不看代码，都能很轻松的通过。那么，把时间腾出来，去做更有意义的事情，才是大三上这个关键时期要做的。</p><p><a href="https://github.com/TephrocactusHC/netweork">github仓库</a></p>]]></content>
      
      
      <categories>
          
          <category> cs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer network </tag>
            
            <tag> lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>the people of the abyss</title>
      <link href="/post/a82a7cad.html"/>
      <url>/post/a82a7cad.html</url>
      
        <content type="html"><![CDATA[<h1>深渊居民</h1><h2 id="作者介绍">作者介绍</h2><p>杰克·伦敦，美国作家。他的创作思想较为复杂，受到过马克思、斯宾塞、尼采等多人影响，具有浓重的社会主义倾向，不过其本人是无政府主义者。他的思想倾向或许和他的生平有关，他农民出身，早年从事重体力劳动，后来当了记者和职业作家。有一段经历或许可以体现某种社会制度的本质，以及解释他的思想根源：“奥克兰电车公司录用了他，每天在地下室铲煤13个小时，全年无休，月薪30美元。仅仅干了一个月，杰克已经严重消瘦筋疲力尽。他听说这原是2个人干的活儿，现在他一人干，工资却还不到一半。没多久，被他顶替的工人中的一个，因为无力养活妻儿，自杀了。”</p><h2 id="关于本书">关于本书</h2><p>是一部纪实文学，作者深入伦敦东区，考察当地人的生活，写下这部震撼世界的作品。书中有很多内容是值得我们深思的，当时世界上最强大的大英帝国，为什么在繁华的伦敦却有几十万人连温饱都很勉强？而当时还并不是世界一极的美国，即使在几年前经历过经济危机和衰退，人们的平均收入和生活水平却远远超过当时的大英帝国伦敦东区的人们。书中描述情景之惨烈，使人不忍心看第二遍。具有深意的是，书中描绘了深渊之中的人们只能不断下坠和堕落的可悲场景，而一场小小的变故则会急剧加快这个过程。但是更可悲的是，百年前的惨状在两个甲子之后却在世界上另一个强大的国家上演了。</p><h2 id="一些摘抄和思考">一些摘抄和思考</h2><h3 id="这是书的前几章，开始描写一些底层人民的悲惨生活">这是书的前几章，开始描写一些底层人民的悲惨生活</h3><blockquote><p>When before I inquired the way of a policeman, I was usually asked, “Bus or ’ansom, sir?”   But now the query became, “Walk or ride?”   Also, at the railway stations, a third-class ticket was now shoved out to me as a matter of course.</p></blockquote><p>看来哪都一样。</p><blockquote><p>His two daughters beat him home from church—and pretty girls they were in their Sunday dresses; withal it was the certain weak and delicate prettiness which characterises the Cockney lasses, a prettiness which is no more than a promise with no grip on time, and doomed to fade quickly away like the colour from a sunset sky.</p></blockquote><blockquote><p>for one appears to be considered sufficient for a poor man’s family in which to cook and eat and sleep.   When I asked for two rooms, the sublettees looked at me very much in the manner,y … Not only did the houses I investigated have no bath-tubs, but I learned that there were no bath-tubs in all the thousands of houses I had seen.   Under the circumstances, with my wife and babies and a couple of lodgers suffering from the too great spaciousness of one room, taking a bath in a tin wash-basin would be an unfeasible undertaking.</p></blockquote><p>作者经历过贫困生活，显然大概了解美国底层群众的生活。然而，即使是穷人，在那个时代的美国，已经摆脱了一个房间用来吃饭、睡觉、做饭，而且家里有浴缸。那个时代最富有的国家，真是难以想象。</p><blockquote><p>And then she explained the process of saturation, by which the rental value of a neighbourhood went up, while its tone went down.“You see, sir, our kind are not used to crowding in the way the others do.   We need more room.   The others, the foreigners and lower-class people, can get five and six families into this house, where we only get one.   So they can pay more rent for the house than we can afford. …”</p></blockquote><p>这部分在120年后还是这么写实，呵呵。。。</p><blockquote><p>“Up at half-past five,” “to bed the last thing at night,” “workin’ fit ter drop,” thirteen years of it, and for reward, grey hairs, frowzy clothes, stooped shoulders, slatternly figure, unending toil in a foul and noisome coffee-house that faced on an alley ten feet between the walls, and a waterside environment that was ugly and sickening, to say the least.</p></blockquote><p>不知道那时候英国有没有人指责杰克·伦敦恶意写实</p><blockquote><p>He had never learned to read, and had never felt the need for it—a vain and useless accomplishment, he held, at least for a man of his station in life…And in the course of this he had also hammered out a philosophy of life, an ugly and repulsive philosophy, but withal a very logical and sensible one from his point of view.</p></blockquote><p>真是看到这已经没法往下看了。。。</p><blockquote><p>a missus rowin’, kids squallin’, no coal t’ make the kettle sing, an’ the kettle up the spout, that’s wot I’d get.  … Jest take my counsel, matey, an’ don’t ’ave ’em.  … The word “home” aroused nothing but unpleasant associations.   In the low wages of his father, and of other men in the same walk in life, he found sufficient reason for branding wife and children as encumbrances and causes of masculine misery.   An unconscious hedonist, utterly unmoral and materialistic, he sought the greatest possible happiness for himself, and found it in drink.</p></blockquote><p>贫贱夫妻百事哀</p><blockquote><p>yet I was forced to confess that he was right in not marrying on four pounds ten in London Town. … <strong>And day by day I became convinced that not only is it unwise, but it is criminal for the people of the Abyss to marry.</strong> hey are the stones by the builder rejected.   There is no place for them, in the social fabric, while all the forces of society drive them downward till they perish.   At the bottom of the Abyss they are feeble, besotted, and imbecile.   If they reproduce, the life is so cheap that perforce it perishes of itself.   The work of the world goes on above them, and they do not care to take part in it, nor are they able.   Moreover, the work of the world does not need them.   There are plenty, far fitter than they, clinging to the steep slope above, and struggling frantically to slide no more.</p></blockquote><p>百年前的英国工人，不愿意结婚生孩子了。即使是杰克伦敦，也认为他是对的。这些人将不断下滑。。。</p><blockquote><p>In short, the London Abyss is a vast shambles.   Year by year, and decade after decade, rural England pours in a flood of vigorous strong life, that not only does not renew itself, but perishes by the third generation.   Competent authorities aver that the London workman whose parents and grand-parents were born in London is so remarkable a specimen that he is rarely found.</p></blockquote><p>你要不说是伦敦我还以为你说的是那个哪儿呢，真像，真像</p><blockquote><p>Witness last saw her alive on the previous Monday.   She lived quite alone.   Mr. Francis Birch, relieving officer for the Holborn district, stated that deceased had occupied the room in question for thirty-five years.   When witness was called, on the 1st, he found the old woman in a terrible state, and the ambulance and coachman had to be disinfected after the removal.   Dr. Chase Fennell said death was due to blood-poisoning from bed-sores, due to self-neglect and filthy surroundings, and the jury returned a verdict to that effect.</p></blockquote><p>这段也有意思，越看越像了</p><h3 id="后面杰克伦敦开始反复阐述下滑这个观点">后面杰克伦敦开始反复阐述下滑这个观点</h3><blockquote><p>The content of these people is manifestly great, for, relative to the wretchedness that encompasses them, they are well off.<br>But at the best, it is a dull, animal happiness, the content of the full belly.   The dominant note of their lives is materialistic.   They are stupid and heavy, without imagination.   The Abyss seems to exude a stupefying atmosphere of torpor, which wraps about them and deadens them. … <strong>This would not be so bad if it were all; but it is not all.   The satisfied torpor in which they are sunk is the deadly inertia that precedes dissolution.   There is no progress, and with them not to progress is to fall back and into the Abyss.   In their own lives they may only start to fall, leaving the fall to be completed by their children and their children’s children.   Man always gets less than he demands from life; and so little do they demand, that the less than little they get cannot save them.</strong></p></blockquote><blockquote><p>At the best, city life is an unnatural life for the human; but the city life of London is so utterly unnatural that the average workman or workwoman cannot stand it.   Mind and body are sapped by the undermining influences ceaselessly at work.   Moral and physical stamina are broken, and the good workman, fresh from the soil, becomes in the first city generation a poor workman; and by the second city generation, devoid of push and go and initiative, and actually unable physically to perform the labour his father did, he is well on the way to the shambles at the bottom of the Abyss.If nothing else, the air he breathes, and from which he never escapes, is sufficient to weaken him mentally and physically, so that he becomes unable to compete with the fresh virile life from the country hastening on to London Town to destroy and be destroyed.</p></blockquote><p>又是一段悲惨现实，到底说哪呢，是伦敦吗？</p><blockquote><p><strong>They, at least, are dying, that is the point; while these have yet to go through the slow and preliminary pangs extending through two and even three generations.</strong></p></blockquote><h3 id="然后是一些工作环境的描写">然后是一些工作环境的描写</h3><p>由于不太清楚那个时代的平均收入水平和换算关系，确实无法了解到底有多苦，不过从杰克伦敦笔下来看，那些人的工资实在是低的可怜，然而他们每天至少工作10小时，这已经是少的了。更可恶的是，恶劣的居住环境、破旧的衣物、量少质劣的食物。</p><blockquote><p>and this, between six and seven o’clock in the evening of August 20, year of our Lord 1902, in the heart of the greatest, wealthiest, and most powerful empire the world has ever seen</p></blockquote><p>如果是这样，即使日不落又有什么意义呢？</p><blockquote><p><strong>Their advice, by the way, was brief, and to the point; it was to get out of the country.</strong></p></blockquote><p>那个年代就流行润学了。</p><blockquote><p>Several men in the line had been to the United States, and they were wishing that they had remained there, and were cursing themselves for their folly in ever having left.   England had become a prison to them, a prison from which there was no hope of escape. … They envied me my youth and strength, which would sooner or later get me out of the country.   These they no longer possessed.</p></blockquote><p>人们羡慕可以润的人</p><blockquote><p>while the men themselves ascribe their homelessness to foreign immigration, especially of Polish and Russian Jews, who take their places at lower wages and establish the sweating system.</p></blockquote><p>就这样伦敦这点地方还有移民进来卷。。。</p><blockquote><p>From all of which I drew the conclusion that a poorhouse porter, who commonly draws a yearly salary of from seven to nine pounds, is a very finicky and important personage, and cannot be treated too fastidiously by—paupers.</p></blockquote><blockquote><p>I cannot convey by printed speech the insufferable way in which he said this.   He seemed to me to revel in that he was a man in authority, able to say to half a thousand ragged wretches, “you may eat or go hungry, as I elect.”</p></blockquote><p>还有一些小鬼难缠的案例，看来哪都不缺这样的人</p><blockquote><p><strong>the men who … and too inured to hell on earth to be frightened by hell to come.</strong></p></blockquote><h3 id="又是一些惨状">又是一些惨状</h3><blockquote><p>Seven and twenty centuries agone!   And it is all as true and apposite to-day in the innermost centre of this Christian civilisation whereof Edward VII. is king.</p></blockquote><blockquote><p>impressed with the ungratefulness of the poor.</p></blockquote><p>这句话真可笑</p><blockquote><p>England has sent forth “the best she breeds” for so long, and has destroyed those that remained so fiercely…It could not be otherwise.   The most complacent Britisher cannot hope to draw off the life-blood, and underfeed, and keep it up forever.</p></blockquote><h3 id="接下来作者开始阐述想法">接下来作者开始阐述想法</h3><blockquote><p>when two men were after the one job wages were bound to fall.   Had he gone deeper into the matter, he would have found that even the union, say twenty thousand strong, could not hold up wages if twenty thousand idle men were trying to displace the union men…<br>when two men were after the one job wages were bound to fall.   Had he gone deeper into the matter, he would have found that even the union, say twenty thousand strong, could not hold up wages if twenty thousand idle men were trying to displace the union men…<br>There is a general decline in wages throughout the land, which, giving rise to labour disputes and strikes, is taken advantage of by the unemployed, who gladly pick up the tools thrown down by the strikers.Sweating, starvation wages, armies of unemployed, and great numbers of the homeless and shelterless are inevitable when there are more men to do work than there is</p></blockquote><p><strong>这里其实说了一个问题，就是工会并不是与资本家斗争的，工会的本质是排斥其他工人，这样才能改变供需关系进而提高工人工资。</strong></p><p>然后作者又提及了堕落的问题。整个17章都是作者的观点。</p><h3 id="18章开始举数字说明情况，说明英国工人的收入水平很低，维持生活极为困难。">18章开始举数字说明情况，说明英国工人的收入水平很低，维持生活极为困难。</h3><p>接下来是一些有意思的内容</p><blockquote><p>No human of an African village would allow such a promiscuous mixing of young men and women, boys and girls.<br>咱也不知道这是说哪呢，是说伦敦吗？</p></blockquote><p>然后又阐述了堕落的现象。紧接着说了女性相对于男性的从属地位。</p><blockquote><p>To me, at least, it would be enough to condemn modern society as hardly an advance on slavery or serfdom, if the permanent condition of industry were to be that which we behold, that ninety per cent. of the actual producers of wealth have no home that they can call their own beyond the end of the week; have no bit of soil, or so much as a room that belongs to them; have nothing of value of any kind, except as much old furniture as will go into a cart; have the precarious chance of weekly wages, which barely suffice to keep them in health; are housed, for the most part, in places that no man thinks fit for his horse; are separated by so narrow a margin from destitution that a month of bad trade, sickness, or unexpected loss brings them face to face with hunger and pauperism . . .</p></blockquote><p>这段是作者引用另一个英国历史学家的话，其实也说明了那个时代就有很多人开始思考这种不合理性。</p><blockquote><p>Now I contend that the least a man who does his day’s work should have is a room to himself, where he can lock the door and be safe in his possessions; where he can sit down and read by a window or look out; where he can come and go whenever he wishes; where he can accumulate a few personal belongings other than those he carries about with him on his back and in his pockets; where he can hang up pictures of his mother, sister, sweet-heart, ballet dancers, or bulldogs, as his heart listeth—in short, one place of his own on the earth of which he can say: “This is mine, my castle; the world stops at the threshold; here am I lord and master.”   He will be a better citizen, this man; and he will do a better day’s work.</p></blockquote><p>再次直接表达观点。现在发达国家已经基本实现这种生活了。</p><blockquote><p>But there is no need further to multiply instances.   In London the slaughter of the innocents goes on on a scale more stupendous than any before in the history of the world. …Also, at times, so peculiarly are they made, they will take half a million of these rents and profits and send it away to educate the black boys of the Soudan.</p></blockquote><p>现在这些来到了世界上另一片土地了，确实挺像的。。。</p><h3 id="作者更深的思考">作者更深的思考</h3><p>整本书的第26、27章应该全文通读，因此不做引用。</p><p><strong>我们是否让一般人过得更好了？</strong> 都能算得上是诛心之问了。</p><h3 id="Somebody’s-Opinion">Somebody’s Opinion</h3><p>120年前，当时最强大的国家——大英帝国——的首都——伦敦——的东区的贫困居民，过着凄惨的生活。应该说，所有人都认为这个制度出现了问题。这就不是一种好的制度，更不是文明的体现。值得庆幸的是，随着时间的流逝，欧美发达国家都拜托了这种落后的“挖人矿”的发展模式，成为了世界上最幸福而且最富强的国家。然而，两个甲子之前的惨状，却在世界上另一个角落再次发生了。真是一种幻灭。然而：“英国资产阶级竭力向民众灌输这样一种意识:资本家的财富就是整个民族的财富,资本家的事业就是全民族的事业,垄断资本的对外扩张被当作全民族的利益,‘伦敦东区最贫困的爱国者, 只要一想起英国的工业和财富,也会不由自主地挺起胸膛’。”</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 名著 </tag>
            
            <tag> 读后感 </tag>
            
            <tag> 社科 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络共和国</title>
      <link href="/post/a20b3140.html"/>
      <url>/post/a20b3140.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>本书作者是桑斯坦，著名法学教授。作者长期观察社交媒体对社会方面的影响以及对法律带来的变化，著名的“<code>信息茧房</code>”和“<code>回音壁效应</code>”就是作者在另一本书（《信息乌托邦》）中提出的。本书出版较早，英文版大概是20世纪出末尾出版的，因此有一些现象在当今略显过时（那些现象作者在《标签——社交媒体时代的众声喧哗》这本书中做了详细的介绍）。</p><h2 id="内容">内容</h2><p>在本书第一章，作者以“<code>我的日报</code>”开篇，引出的个人订制信息的现象，然后浅浅讨论了一下言论自由与信息过滤的关系。而后，作者指出了过滤信息对公众讨论的重大影响，尤其是进一步影响了言论自由以及民主政治（商议的民主）。</p><p><em>我的日报，大意是与传统报纸相对，我的日报可以自由选择自己想看的内容，形成自己的报纸。</em></p><p>桑斯坦认为，这种“我的日报”式的自由选择信息的行为会导致信息茧房的形成。而信息茧房危害无穷。当一个人长期生活在信息茧房中，他会失去接触不同观点和事物的机会，也会逐步沉浸在系统的推荐算法之中。因此，他的个人生活和思维方式会趋于程式化、趋于机械。</p><p>这会带来两个严重问题：第一，信息茧房会加剧极端思想，先入为主的观念将在“<code>回音室</code>”之中逐渐根深蒂固并进一步强化。更进一步，<code>虚拟串联</code>和<code>团体认同</code>催生了大量的仇恨团体和极端组织。这就涉及到第二点，<code>群体极化</code>和<code>分裂</code>。由于公众在信息过滤中迅速分裂成不同的群体，群体与群体之间的共识越来越少，对<code>社会粘性</code>而言，这将是毁灭性的打击。作者认为，这主要是<code>消费者主权</code>造成的，即消费者可以完全根据自己的喜好自由决定信息的过滤与否。</p><p>桑斯坦对此深感不安，在他看来，言论自由是保持民主和社会公平的重要的机制。为此，作者提出<code>凝聚性商品</code>和公共空间讨论两种方法，将网络空间视为公共空间，将信息作为公共财产，希望增加已经日益减少的公民之间的信息和经验分享。同时，桑斯坦对公民提出了新的要求，“公民可以找出一个和消费选择无关的市场，支持一个可以同时促进自由和民主的机制”。具体而言，在第八章，作者阐述了一些自己设想的，可以解决信息茧房以及一系列衍生问题的方案。</p><p>在后半部分，作者还讨论了一下言论自由和管制之间的关系。这部分的讨论比较显然是倾向于管制的，世上并不存在绝对的自由。关于这个话题，本书并不是专业和权威的作品，不多赘述。</p><h2 id="他人书评">他人书评</h2><p>下面直接引用一段他人的书评作为小小的总结：“桑斯坦认为，新的传播技术并不会使公众缺乏好奇心或街谈巷议者从此消失。相反，公众越来越好奇，对街谈巷议的需求也持续升高。网络化虽带来更多资讯选择，看似更加自由，但在“个人本位”的理念下，势必蕴藏着对自由的潜在破坏。当个人忽略公共媒体而对观点和话题进行自我设限时，这样的机制其实存在着许多危机，愈来愈多的人只听到他们自己的回音，这样的情形比分裂来得更糟糕。当然，桑斯坦也认为，随着每个人获得广泛分散的他人所拥有的信息，而且信息传播技术的发展，使积累知识的发展更快、更便捷，人类要摆脱居住在信息茧房所带来的梦魇，可以通过集体的产品——由公众自由参与信息发布与维护的维基等载体形式，自由、积极地向社会贡献自己的信息，使社会广泛而复杂的信息得以聚合，使信息真实全面、准确客观，既影响私人行为也影响公共行为。”</p><h2 id="一些想法">一些想法</h2><p>美国的互联网发展较早，且商业模式更为成熟，因此桑斯坦和本领域的其他学者，在很早就已经预见到信息茧房的出现，并讨论了其所带来的一系列影响。然而，不幸的是，尽管桑斯坦提出了众多解决方法，却作用寥寥，反而群体极化和分裂这样的灾难性后果在包括美国在内的很多国家都愈演愈烈，或许这是互联网发展到这个阶段的一种必然现象吧。当然，我们要看到，桑斯坦所提出的公共空间的讨论，由于和自由冲突，在立法上并没有被明确规定，而在实际上也因为消费者主权的存在，导致公共空间事实上不能建立起来。在我看来，公共空间是一个比较可能的解决方案。在《标签》这本书中，桑斯坦延续了其一贯的思想脉络，总结了《网络共和国》《网络共和国2.0》《信息乌托邦》等诸多著作，并根据时代发展和社会变化，做出一定的修改和更新，更多的细节问题，将在《标签》的读后感中写一写。然而其知识体系的框架，大概在本书就已经搭建完成了。</p><p>最后，用书中一段话作为结语：</p><blockquote><p>一个表达自由的完善机制必须符合两个不同的要件。第一，人们应该置身于任何信息之下，而不应实现被筛选。······第二，大部分公民应该拥有一定程度的共同经验。······这两项要件在异质性高、偶尔面临社会分裂危机的国家里尤其重要。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 社科 </tag>
            
            <tag> 法学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建站及使用</title>
      <link href="/post/5611cdab.html"/>
      <url>/post/5611cdab.html</url>
      
        <content type="html"><![CDATA[<h1>建站及使用</h1><p>使用hexo搭建，这里给出hexo的<a href="https://hexo.io/zh-cn/docs/">官方文档</a>。</p><h1>主题</h1><p>需要自己选择一个喜欢的主题，我选择的是<a href="https://butterfly.js.org/">butterfly</a>主题。</p><h1>github使用方法</h1><p>如果不喜欢hexo的一键部署方式，可以了解如下的github使用方法</p><h1>Git</h1><h2 id="配置">配置</h2><p>查看本地配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --system --list</span><br></pre></td></tr></table></figure><p>查看全局配置，将会获得git用户信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure><p>更改配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;用户名&quot;</span><br><span class="line">git config --global user.email &quot;邮箱&quot;</span><br></pre></td></tr></table></figure><h2 id="项目搭建">项目搭建</h2><p>初始化项目，在当前文件夹位置创建.git文件夹及其内部文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>克隆复制一个github项目到当前文件夹位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone github项目的URL地址</span><br></pre></td></tr></table></figure><h2 id="文件基础操作">文件基础操作</h2><p>给出某次commit的具体信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show &lt;commit&gt;</span><br></pre></td></tr></table></figure><p>查看当前文件夹中所有文件是否在暂存区。主要查看是否文件已被修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>查看指定文件是否在暂存区。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status 文件名</span><br></pre></td></tr></table></figure><p>添加一个文件到暂存区，跟踪此文件的修改状态。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 被跟踪文件地址</span><br></pre></td></tr></table></figure><p>添加当前文件夹下的所有文件到暂存区。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>删除暂存区文件，如果需要删除仓库中的文件，需要删除暂存区文件之后再提交一次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm 文件名</span><br></pre></td></tr></table></figure><p>比较工作区和暂存区文件的区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><p>将工作区文件恢复成暂存区文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore 文件名</span><br></pre></td></tr></table></figure><p>提交暂存区的指定文件到本地仓库，如果文件名不写，默认所有文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit 文件名 -m &quot;说明信息&quot;</span><br></pre></td></tr></table></figure><h2 id="文件忽略">文件忽略</h2><p>.gitignore生效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config core.excludesfile .gitignore</span><br></pre></td></tr></table></figure><p>在主目录下填写.gitignore文件，内部语法为如下，被指定的文件将不会被纳入版本管理。但是对于已经进行跟踪的文件，gitignore不生效。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 注释</span><br><span class="line">*.txt # 忽略所有 .txt 结尾的文件。</span><br><span class="line">/*.txt # 忽略当前目录下的以 .txt 结尾的文件</span><br><span class="line">temp/ # 忽略 temp 文件夹下的所有文件，temp 必须是一个文件夹，不能是一个文件。</span><br><span class="line">!abc.txt # 不忽略 abc.txt 文件</span><br></pre></td></tr></table></figure><h2 id="分支与版本控制">分支与版本控制</h2><p>查看某分支的所有更改，分支名不写默认当前分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">git log 分支名</span><br><span class="line"></span><br><span class="line">git long -- GIT.md</span><br><span class="line">把修改了文件GIT.md的commit列出来，注意--和GIT.md之间一定要有空格</span><br><span class="line"></span><br><span class="line">git log --author=&quot;小明&quot;</span><br><span class="line">查看作者</span><br><span class="line"></span><br><span class="line">git log --before=&quot;2021.4.16&quot;</span><br><span class="line">git log --after=&quot;2021.4.16&quot;</span><br><span class="line">查看日期</span><br><span class="line"></span><br><span class="line">git log --grep=&quot;Initial&quot;</span><br><span class="line">查找字符串</span><br><span class="line"></span><br><span class="line">git log --oneline</span><br><span class="line">简化输出信息</span><br><span class="line"></span><br><span class="line">git log -S &quot;Hello, World!&quot;</span><br><span class="line">当你想要知道 Hello, World! 字符串是什么时候加到项目中哪个文件中去的</span><br><span class="line"></span><br><span class="line">git log --stat</span><br><span class="line">显示详细信息</span><br></pre></td></tr></table></figure><p>查看所有操作记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p>返回某个版本，参数为 --mixed，表示将版本树退回到某个版本，并且更改应用到暂存区，但是工作区的代码不会变化；–soft，表示将版本树退回到某个版本，但工作区和暂存区的代码都不会发生变化；–hard，表示将版本树退回到某个版本，同时工作区和暂存区的代码都发生变化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset 参数 版本哈希值</span><br></pre></td></tr></table></figure><p>新建分支，如果模板分支名不填写，则默认是当前所在分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 分支名 模板分支名</span><br></pre></td></tr></table></figure><p>删除某个分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 分支名</span><br></pre></td></tr></table></figure><p>进入某个分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure><p>查看所有分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>合并分支，如果出现被合并的分支中改变了原分支的代码，则会产生冲突，需要手动解决冲突，增加代码不会产生冲突。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge 被合并分支名；与git fecth是经典组合</span><br></pre></td></tr></table></figure><h2 id="远程同步">远程同步</h2><p>提交到远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin(远程主机名) 本地分支:远程分支</span><br></pre></td></tr></table></figure><p>强制提交到远程仓库，覆盖原本的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f</span><br></pre></td></tr></table></figure><p>将远程仓库的分支和本地仓库的分支同步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin 远程分支:本地分支</span><br></pre></td></tr></table></figure><p>如果本地新建分支，而远端没有，则需要使用如下指令，在远程仓库创建此分支的远程版本，之后再提交到远程仓库才能提交成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin 分支名</span><br></pre></td></tr></table></figure><p>查看远程仓库的分支，查看到的分支可以直接使用checkout来进入此分支。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure><p>更新基础分支，将原分支上的修改按照时间先后应用到新分支的commit中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase 原分支名</span><br></pre></td></tr></table></figure><h1>Github</h1><h2 id="issue">issue</h2><p>用于讨论问题</p><h2 id="fork">fork</h2><p>复制一个独立的仓库到自己的账户中，修改完以后可以申请Pull Request来和原本的仓库合并。</p>]]></content>
      
      
      <categories>
          
          <category> 技术流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>菜根谭</title>
      <link href="/post/fe872a8f.html"/>
      <url>/post/fe872a8f.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刑法罗盘</title>
      <link href="/post/e7404524.html"/>
      <url>/post/e7404524.html</url>
      
        <content type="html"><![CDATA[<p>本书是罗老师比较新的一部作品，从选取的案例上讲和罗老师另一本畅销书《圆圈正义》有着较大的重合度，所表达的法律思想重中之重是<strong>对公权力的限制</strong>，其次是表达对刑法的谦抑性的追求，以及对于个人道德和公众道德的思考，当然尤其增加了对妇女权利保护相关的一部分章节，毕竟罗老师是研究性犯罪的。<br>比起《圆圈正义》那种随笔，这本书对法律技术问题的论述就明显增多了，大多数文章的主要结构大概可以总结为：</p><ol><li class="lvl-3">描述基本案情</li><li class="lvl-3">介绍本案相关的《刑法》法条，并提出本案的争议和疑难之处</li><li class="lvl-3">介绍相关的司法解释，进行论证，辅以介绍司法精神和刑法原则</li><li class="lvl-3">阐述个人观点</li><li class="lvl-3">结尾引用著名法学家、思想家的名言或著名戏剧、故事中的语句，表达并升华本文的中心思想</li></ol><p>内容上，本书适合在学习刑法的同时进行阅读，尤其是在案例分析时，本书大部分章节可以作为入门，但是我并没有看到最近学界力推德国刑法三阶层分析的痕迹，而是带有一种四要件分析的感觉，也许是本书的定位并不是严肃的法学读物，而是偏向科普性质所导致。应该说，罗老师是一位勇敢的人，他自己说“勇敢是他的词典里最重的词”，他的书中频繁出现对公权力的限制的追求就可以看出。同时，他并不用带着傲慢的怜悯来看待底层的穷困群众，而是带着“温度”，这可能和他的亲身经历有关，这也是他受到欢迎的一个重要原因。本书中有大量语句适合摘抄和引用，罗老师的思想深度和文字功底都是极为不凡的。最后的最后，我自己将会并强烈建议读者顺着罗老师的书单去阅读那些名著，真的是很有价值。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 法学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权利的成本</title>
      <link href="/post/312ce72d.html"/>
      <url>/post/312ce72d.html</url>
      
        <content type="html"><![CDATA[<h1>权利的公共性</h1><p>美国学者史蒂芬·霍尔姆斯和桑斯坦所著《权利的成本——为什么自由依赖于税》一书系统而全面地阐述了作者对于权利所持的观点与态度。作者的观点，既批驳了古典自由主义者——即美国保守派——所宣称的“消极权利”，也不同于美国自由左派的立场，似乎只能将之称为自由中间派。然而，本文认为，无论持何种立场，真正对权利的分歧应该只有一个——对稀缺公共资源的合理分配方式。</p><h2 id="一、权利的本质：公共资源保护的利益">一、权利的本质：公共资源保护的利益</h2><p>哲学家以塞亚·伯林首创将自由分为“积极自由”和“消极自由”。由此，自然地产生了与之对应的“积极权利”和“消极权利”的划分。所谓“消极权利”，即要求国家不必对自由权做任何的行为，一般认为其来源于启蒙思想家关于“天赋人权”的表述。启蒙运动早期思想家霍布斯曾说：“著作家们一般称之为自然权利的，就是每一个人按照自己所愿意的方式运用自己的力量保全自己的天性——也就是保全自己的生命——的自由”。[[[] 【英】托马斯·霍布斯：《利维坦》，黎思复、黎廷弼译，商务印书馆1986年版，第97页。]]而“积极权利”完全相反，要求政府采取积极的措施介入私人领域来保证权利。然而，《权利的成本——为什么自由依赖于税》一书认为，所有的权利都是“积极权利”。这里的权利，是描述的（或称为实证的）权利，与自然权利或道德的权利有本质区别。书中将权利视为在有效的法律体系下用集体资源加以保护的利益。由此引出了作者的核心论点：权利是有成本的。在现实中，不存在未经过政府确定并加以保护就由私人所天生享有的权利。这是因为，如果权利的边界、内容、实施形式等得不到法律上的确定，公共资源也就无法对个人权利进行具体的保护。这意味着在此情境下每位公民都可能在无时无刻地被侵权，也可能无时无刻地实施了侵权。如此，个人就从不曾真正地享受权利，也就不曾拥有任何权利。即便是自由——某些语境下被认为是最重要的权利——如果没有法律所确立和依赖公共资源提供的保护，那么个人的自由也无从谈起。耶林表示：“权利自身不外是一个在法律上受保护的利益。”[[[] 【德】鲁道夫·冯·耶林：《为权利而斗争》，郑永流译，商务印书馆2016年版，第24页。]]事实上，本文认为书中关于成本的观点可以看作脱胎于社会契约论。早在十七世纪，英国启蒙思想家洛克就曾写道：“人们在参加社会时放弃他们在自然状态中所享有的平等、自由和执行权，而把它们交给社会……这一切没有别的目的，只是为了人民的和平、安全和公众福利。”[[[] 【英】约翰·洛克：《政府论——论政府的真正起源、范围和目的》，叶启芳、瞿菊农译，商务印书馆1996年版，第79-80页。]]而权利是“法律的产物”也并非作者首创。洛克的描述为：“法律按其真正的含义而言与其说是限制还不如说是指导一个自由而有智慧的人去追求他的正当利益。”，“法律的目的不是废除或限制自由，而是保护和扩大自由……哪里没有法律，那里就没有自由。”[[[] 【英】约翰·洛克：《政府论——论政府的真正起源、范围和目的》，叶启芳、瞿菊农译，商务印书馆1996年版，第35-36页。]]可见我们所拥有的权利，是以政府的存在为前提，以积极的政府为保障的，而作者更是将其直接概括并总结为本书的副标题“自由依赖于税”。本段对启蒙思想家们的著作大量的引用，意在说明早在启蒙运动初期，人们（至少是思想家）就已经意识到权利是有成本的，每一个人都向政府支付了保护权利的税。近代以来哪怕激进的自由主义者也认为保持一个最低存在程度和基本执行力的政府是必要的，否则他们最喜爱的自由市场将不复存在，书中认为最好的例子就是经济学不言自明地以一个积极的、可靠的刑事司法体制为存在的前提。因为实证的权利在中文语境中可以解释为“权利和利益”，所以权利（或权力）是极可能在个人主张权利的过程中被有意或无意地滥用的。只有权力才能对抗被滥用的权力。没有强大执行能力的政府，是不可能保护权利的，则权利只会停留在繁杂的法条之中而不被个人所真正地享有。然而在当今的美国，这个观点总是被某些人或派别刻意地淡化了。作者将权利的本质重新唤回到公众视野，使人们关注到权利对政府的依赖性而非单单是理想主义的崇高性，不仅仅是纠正了广泛传播的具有误导性的观点，还将对公民更好地实施权利和政府更高效地组织产生深远的影响。</p><h2 id="二、权利的成本：深谋远虑的经济考量">二、权利的成本：深谋远虑的经济考量</h2><p>既然权利是有成本的，那么最重要的问题便由此产生：有限的公共资源如何进行合理配置以保护权利。首先，税收的重要性就是不言而喻的。美国法做出了关于“税”和“费”的区分。“税”是对整个社会征收的，“费”只向特定的受益者征收。近代德国法学家京特表示：“只有当单个的个体被定义为群体的必要因素时——只是因为他的必要性，他才拥有为能够满足他的义务所必须的条件。”[[[] 【德】京特·雅科布斯：《规范·人格体·社会》，冯军译，法律出版社2001年版，第103页。]]所以缴纳赋税在当今被认为是天经地义的公民义务。这就回答了向谁收税的问题。但是，收多少税的问题也随之而来。古今中外，围绕着反对苛捐杂税的斗争屡见不鲜，近代的资产阶级革命几乎都是由此爆发，美国独立战争就是因为英国殖民者征收重税而直接导致的。可见，税的收取必须合理，既不能造成沉重的负担，又要保证政府有足够的执行力。这是个两难的处境。从政府角度来看，权利的预算成本已经是昂贵的。作者在书中列举的数据显示，尽管美国从联邦机关到各州机构为了保护权利花费甚巨，却仍然有大量的私人权利得不到很好地保护。但征税不能无限加重，如果政府为了尽善尽美地保护每一项权利而大幅度提高赋税，可能将取走公民的大部分甚至全部财产。如果公民贡献了所有的财产来保护自己的私有财产，无疑是荒唐的。权利的物质性不得不被仔细地考虑。其次，社会成本也被计入了权利的成本之中，正是如此，深谋远虑的经济考量是政府制订政策时的重中之重。众所周知，政府几乎是没有盈利能力的。本书作者将政府视为资源共同体，即一定程度上政府代表了公民组成的社会。而从长远来讲，对政府最理想的情况就是扩大税基并减少未来可能的开支，这也是能促使整个社会获益。实现这一目的的最现实的方法，就是保护最重要的权利。权利已经是在当时政治和司法下价值很高的利益，最珍贵的权利更是如此。例如，财产权是公民最珍视的权利。正如孟子所言：“民之为道也，有恒产者有恒心，无恒产者无恒心。苟无恒心，放辟邪侈，无不为已。”私有财产鼓励劳动、鼓励创造，能够激发每一个人的工作热情。这无疑会扩大政府的税基。而拥有私有财产的个人和稳定的社会之间有着深刻的联系，长远来看财产权得到保护更会减少政府打击犯罪的开支，并给整个社会带来巨额的财富。再比如，言论自由被美国人视为最“重要的宪法权利之一”，因为享有言论自由的公民不光可以反抗政府暴政，还可以揭露社会上的种种不公。如此，从预算成本来看，政府只保护了一项权利，却间接地保护了其他权利而节省了大量社会成本。当然，正因为如此最重要的权利也往往是相对昂贵的。最后，以上文的分析为基础，公共资源合理的配置方式已经有了一些基本而重要的原则。我们可以肯定地说，不同的权利之间是有优先级的。权利的优先级取决于长远观点下进行的关于权利的成本的计算，尽管可能没人能给出详细的数据，但毫无疑问的是，当我们考虑了所有的预算成本和社会成本——包括对可扩大税基和未来可能减少的为保护权利的开支的计算——成本最低的权利将拥有最高的优先级，也应该是我们最先保护的权利。比如西方国家在反思资本主义制度后所大力提倡并实施的福利权，既可以使个人更好地工作以创造更多的财富，更可以提高人民的幸福感、获得感，减少犯罪活动，由此减少了权利的社会成本。所以，我们要把有限的公共资源优先保证用来保护那些优先级最高的权利，那是我们最重要的权利。</p><h2 id="三、权利的交易：复杂的权衡与道德义务">三、权利的交易：复杂的权衡与道德义务</h2><p>然而，复杂的现实世界中充斥着难以预料的变化，有时我们不得不面对一个尴尬的情况：在权利之间作出权衡。毕竟，由于成本的存在，“权利是被有选择地保护着”。同时，权利之间可能存在着冲突，但有时很难明确冲突权利之间的优先级。这时法律必须做出权衡，甚至必须用权利制衡权利。虽然在拥有财产的多少并不相同的情况下，不平等将难以避免。为了避免社会底层为争取平等而引发的社会动荡，社会上层不可避免地将权利进行交易。正如本书中所言：“用平等权交换社会合作是自由民主政治的核心。”“如何明智的福利设计是自由主义民主政治逃不脱的一部分。”社会效果从来都是法律所考虑的重点，一个得到大多数人认可并自愿配合的社会制度将远远胜过通过暴力勉强维持的制度。一旦个人彼此自制、服从平等适用于所有人的清晰规则并且齐心协力，社会就会昌盛。但同时，权利和道德可能存在的冲突也暴露出来。这可能是资本主义社会进入工业时代以来一个一直处于热点的话题。道德的滑坡是否与权利有关？或者义务是否与权利对立？历史上有一个著名的关于经济学和伦理学的问题，即“亚当·斯密问题”。德国历史学派的学者认为强调在道德上利他性的《道德情操论》与强调利己的《国富论》造成了亚当·斯密思想上的分裂和对立。但斯密自己认为：“出于对他人幸福的关心，我们形成正义和仁慈的美德；出于对他人幸福的关心，我们怀有谨慎的美德。”[[[] 【英】亚当·斯密：《道德情操论》，谢宗林译，中央编译出版社2008年版，第109页。]]大概已经足够解释道德和逐利之间辩证的关系了。而本书中也列举了详实、令人信服的数据，同样显示了以福利权为代表的权利的扩大，并没有显著带来美国普通民众大规模放弃承担义务的现象产生。显然道德并没有崩溃，相反，法律是由道德期望塑造的，使权利具有法律执行力也将有益于公众相信这些权利具有良好的道德基础。耶林对此有一句至理名言“权利是个人的道德的生存条件，主张它是对个人道德的自我维护。”[[[] 【德】鲁道夫·冯·耶林：《为权利而斗争》，郑永流译，商务印书馆2016年版，第27页。]]这实在是与我们今天权利和义务相统一的观点不谋而合。所以，当权衡权利和道德时，理想的状态是尽力使政治上可实施的权利与对他们而言的道德权利结合在一起。</p><h2 id="结论：权利的公共性">结论：权利的公共性</h2><p>通过本文的分析，权利完全依赖于公共资源的确定和保护，是维持社会这个资源共同体存在的必要条件，并最终产生对整个社会的效果。可见权利完全是公共的产物。对今天的人来说，从权利的成本来思考权利和政府的关系，具有极其重要的意义。本书在法律界乃至思想领域的影响将是广泛而具有启发性的。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 法学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>唐律与传统法文化</title>
      <link href="/post/8901b10b.html"/>
      <url>/post/8901b10b.html</url>
      
        <content type="html"><![CDATA[<h1>《唐律与传统法文化》读书报告</h1><p>通过阅读本书，我对唐律有了大致的了解。我认为，法律的本质是反应并调节社会关系（矛盾）的工具。那么，由此可以阐述我的想法。</p><h2 id="一、法与理的结合">一、法与理的结合</h2><p>相信每一个涉足过中国法制史这个领域的人，都会感受到“理”在法律中的重要性。那么，所谓理，其实在今天的解读有很多，如天理、义理、事理等。但唐律中的理，大致可以将其概括为天理、义理、情理。这三个理，其实影响着整个唐律的立法精神，也影响着我国古代的司法实践过程。书中第一篇即《唐律中的“理”》，这样的安排想必也是有深意的。</p><h3 id="（一）唐律的法理基础">（一）唐律的法理基础</h3><p>《唐律疏议》开篇即曰：“夫三才肇位，万象斯分。禀气含灵，人为称首。”这其实意在说明唐律的法理基础及其政治合法性。我们知道我国自汉代以来独尊儒术，儒家的法学理念深刻地影响着我国古代传统法文化。根据董仲舒的“君权神授”学说，皇帝的合法地位来自于神的承认和授权，也就是“天”。那么，皇帝或者说朝廷所颁布的法律，应该是政治的延续，自然也要是“天”的体现。所以，法律要顺应天理。<br>既然认为法律是调节社会关系的工具，虽然社会在不断发展，但是，如果法律想有权威性，就不能朝令夕改。在这一点上，唐律完美地解决了这个问题。正所谓“道之大原出于天,天不变,道亦不变”[ 出自于董仲舒《春秋繁露》]，唐律的法理基础是亘古不变的天理，不具有任何主观性，那么法律的稳定性也就得到了保障。天是不能质疑的，那么唐律也就是不能质疑的。这一点对维护封建社会的统治是至关重要的。同时，既然认为天理是完美的、自然的，所以任何立法上的问题其实理论上都应该有一个合理的答案，即最接近天理的。这样的理论会使得唐律的政治合法性在逻辑上自洽，并保留了法律技术上持续进步的空间。唐律的制定也确实是人们模仿自然、追求天理的一种体现。</p><h3 id="（二）义理">（二）义理</h3><p>唐律是以礼入法，即“道德法律化”和“法律道德化”。[ 书中《传统中国法的道德原理及其价值》观点]礼，以及后来的礼教，就是义理。义理是由圣人根据天理的规律所确定的，这其实也是一个外在的客观存在。因为圣人的智慧是后来人达不到的，所以义理也是不能质疑的。同时，圣人已死，那么义理也就是不变的了。这样，通过义理这个实际上唐律的第二个法源更进一步保证了唐律的权威与稳定。同时，义理成为法源，也是在可操作性上的一种补充。因为天理过于遥远，难以捉摸，但义理是人们可以接触到、学得懂的。那么，这其实也表现出唐律对人的一种期待：理想中的社会应该是圣人理想中的社会；法律希望每一个人都以圣人为标准对照自己。同时，义理其实给出了我认为的法律对社会最重要的作用：给人民一个判断是非的朴素的正义感。义理，规定了善与恶、对与错、美与丑等一切道德上的一般标准，这个功能其实是先于法律去实现而后才被法律所正式确定的。从这一步开始，法律开始参与构建社会秩序并规范人们的生活。</p><h3 id="（三）真正的法律">（三）真正的法律</h3><p>我们常说，法律的生命在于可以执行。但其实，法律的生命更在于被人们信服。而，情理才是人民信服法律的最直接的原因。广义上说，每一条法律都可以被认为是情理立法化的结果。人民的广泛共识，才是法律真正的根基所在。所以在唐律中，强调考虑情理的重要性。合情合理，在某种程度上是比合法更重要的。情理，直接关联人们的生活，也就成为了调节社会矛盾的依据。<br>这样，对照“三才”理论，可以得到三个理的逻辑关系。即：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph TB    天理 --- 天    情理 --- 人    义理 --- 地    subgraph     天理 --- 情理    情理 --- 义理    end    subgraph     天 --- 人    人 --- 地    end  </pre></div><p>当我们认为天是完美的，而义理可以理解为自然法，也是完美的，那么情理其实是一种修补和调和：法律永远不可能达到理论上那种理想的、完美的程度，所以由抽象入具体、从理论到实践，均由情理完成。所以只要法律合乎情理，我们认为这就达到了“人”所能达到的最好状态。天理是天，是法律政治合法性的直接来源；义理是地，是外在的普遍道理，是衡量法律好坏、判决对错的标准；而情理，上，承于天；下，学于义，是立法的根本原则，也是真正被使用的理论，这才是真正的法律。[ 书中《“守法”观念下的唐律文化》对“理”之间的关系进行了梳理，并从操作性上进行了论证]<br><br>我们也会看到，虽然我们认为天理、义理都是抽象的、客观的，但终究，解释权在当时的、也是真实的“人”手中。既然情理其实是由人来解释的，那么在面对理论问题时就具备了极大的可操作性，法律及其解释也就可以实施适度地变化。</p><h2 id="二、唐律的司法实践">二、唐律的司法实践</h2><h3 id="（一）确定性">（一）确定性</h3><p>良好的社会秩序，必须是稳定的。所以唐律选取了一种家国同构的模式，通过礼教确立法律，整个国家的法律就是家族法。法律承认人与人之间的等级秩序并加以保护。虽然随着社会进步，这样的理念被批判，但是在当时至少给人一个对结果的预期，这是有助于稳定的。同时，在一个社会内的和平，表现为利益分配结果的确定性使得权利主体之间相安无事的状态。所以，我们可以看到，唐律在财产归属、遗产继承，甚至是人身依附关系上有着详细的规定。而这些规定，其实都是由礼教所确定的等级秩序而来的。</p><h3 id="（二）司法权力的限制">（二）司法权力的限制</h3><p>《唐律疏议·名例律》有如下内容：“德礼为政教之本,刑罚为政教之用,犹昏晓阳秋相须而成者也。”这句话便是中国传统法律的精髓。刑罚的目的是为了教化百姓。所以一个有意思的现象是，体系严密的唐律，虽然严格限制了官员加重刑罚、罪刑擅断的权力，但是却并不严格限制行政官员减免刑罚、示仁爱以民的行为。这其实是儒家审刑慎罚观念的一种发展。<br>限制司法权力，在《“守法”观念下的唐律文化》一文中也有阐述。这篇文章认为，不得肆意修改法律、不突破法律的限制，其实是并非是对官员的限制，更多的是使皇帝不会因一时激愤而失信于天下，“守法”是皇帝取信于民的表现。这个观点恰恰印证了第一段关于唐律的法理逻辑的论证，即法律源于天道而印证于道德。所以，虽然我国古代仅有董仲舒“天人感应”的学说规劝皇帝，在制度上并没有对最高权力的限制，但其实皇帝也并不能为所欲为，任性的皇帝都是以失去天下为代价的。</p><h3 id="（三）判决中的理">（三）判决中的理</h3><p>无论是在唐律中，还是在真正的司法判决中，都可以看到一个细节，即断案要考虑犯罪人的主观条件。比如“故意”与“过失”，会极大影响断罪量刑。这显然是法律情理化、道德化的体现。同时，我们看到官员给出的判决理由更多侧重于说理，而不是引援法律。这是因为法律就是为调节社会矛盾而存在的，判决是给百姓听的，而不是给天地听的。如果判决不能取信于民，即使在逻辑上、在学理上说得通，也是不可取的。</p><h2 id="三、一点思考">三、一点思考</h2><p>经过分析，我们可以得出结论：法律的本质就是调节社会关系的工具。我们应该从法制史领域学到什么，这是一个值得深思的问题。法律既然是工具，那么自然有不好用的时候，自然有要更换的时候。法律可能永远都是一个过程，而不是结果。所以，如果执拗于去探究所谓学理、所谓理论，我想这只能陷入一种的误区。因为法律，更多的是一种经验[ 美国霍姆斯大法官：“法律的生命不是逻辑而是经验”]。万有引力定律放之四海皆准，但法律哪怕只是越过了国境线就不适用了。毕竟所谓客观真理，可能仅仅只是我们想象的产物，随着空间和时间的不同，那些我们认为是天经地义的事情也在变化。事实上早就有法学家对自然法进行了批判。[ 参见袁方：《法律实证主义者对自然法的批判及评析》]那么从社会共识而来的法律，自然也在变化。最好的例子就是大萧条后的美国人支持罗斯福新政，美国最高法的大法官完全失去了民意基础，而法学界“被迫”开始迎合民意。[ 法学界在20世纪30年代兴起法律现实主义运动，关注法律的实用功能，这一运动持续时间广，影响非常深远]<br><br>所以这样研究出的法理、学理只能反映并适用于古代社会，于今时今日几乎没有借鉴的意义。毕竟法律是服务于现实，并且仅仅服务于现实的（很难理解法律会服务于历史或者其他的理论）。一个只属于某时刻的理论是不能成为经典并得到发扬的。为什么经济史、思想史、科技史等都是史学领域，而单单法制史属于法律领域？这种困境其实迫使很多法制史的研究者放弃以法为切入点，转向训诂、考据，逐渐向史学研究者靠拢。<br>但我认为，法学仍能成为一种角度。当我们对传统法展开进一步的思考，法律中，到底什么是不变的？其实有很多。首先，我认为是立法的精神。无论哪一时期、哪一国家的法律，总体来说都是希望并促使社会不断向前发展的。这种人文的精神，其实是超越了法律技术本身得到不断传承的。以此为基础，我们的历史一脉相承，这种精神必定具有现实意义。另外，关注最原始或者说最本源的法律的观念，其实是这一领域独有的优势所在。其实，既然法学服务于社会，我们可以看到大量的定义、概念被修改、被补充或者被推广。随着时代的变化，那些被补充的、被推广过的内容，也就失去了现实价值。比如，法律的起源来自于复仇，那么，何不重新思考本源的法律？这样去研究法律史，在洗去铅华、去伪存真之后，传统法的研究应该更具有现实意义，这不正是所谓的波浪式前进、螺旋式上升吗？毕竟我们研究历史功利地说还是希望对现实有所帮助，那么这样去研究法制史，将对我们的未来的法律发展产生重要的影响。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 法学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>圆圈正义</title>
      <link href="/post/387e2a97.html"/>
      <url>/post/387e2a97.html</url>
      
        <content type="html"><![CDATA[<p>内容主要是罗翔老师所著的文章，是一部合集。整本书所讲述的主要观点大概可以分为对社会的思考、要求对公权力的制约、对个人的内省、一些社会问题带来的哲思等几个内容。除了一些表现罗老师自己的思考和理想的随笔之外，大多数文章所选题材主要来自于当时的社会热点事件，其实很多事件与法学的关系并不大，但是却对人的道德观念有着巨大的冲击。<br>从文章内容可以看出，<strong>罗老师阅读量之大、知识面之广，</strong> 我甚至打算顺着他的阅读体系将其引用的书籍和资料都进行阅读。因此，每一篇文章都属精品，同时也能透过文字体会到罗老师对很多社会问题、很多社会现象的研究是有一定的时间了，其见解是很深刻的。总体来说，大部分文章的主旨都非常鲜明地体现了罗老师独特的特点——“法学人的温度”。<br>当然，这种合集类的书籍，我向来是认为不适合一口气读完的，因为内容之间实际上并不连贯。这本书适合拆分成时评社评类的文章，在手机上阅读。如果非要说什么缺点，大概是本书的高销量部分原因是罗老师的名气导致，不过在畅销书之中本书已算得上是难得一见的佳作了。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 法学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为权利而斗争</title>
      <link href="/post/37a0d198.html"/>
      <url>/post/37a0d198.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>主张权利是精神上的自我保护的义务，完全放弃权利是精神上的自杀。</p></blockquote><p>一部伟大的法学作品，耶林在书中详细描述了他自己的法学观念。为权利而斗争就是为法律而斗争，权利与法律是一体两面的，正如二者在德文中共用一个Recht一样，<strong>法律是权利的主观抽象，权利是法律的客观具体</strong>。</p><blockquote><p><strong>法所要求的斗争，不是不幸，而是恩典。</strong></p></blockquote><p>当权利被侵犯的时候，我们是否有勇气站出来捍卫自己的权利？</p><blockquote><p><strong>法的本质是实际的实行</strong>。一个从未享用过的，或重又失去实行机会的法律规范，无权称为法律规范，它是一根松倦的弹簧，在法律机器中，不再一道工作了，人们可以不要它，丝毫无碍。</p></blockquote><p>金句太多，这本书可谓一字千金。</p><p><em>ps: 翻译真烂。</em></p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 法学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>法律人的明天会怎样</title>
      <link href="/post/56181909.html"/>
      <url>/post/56181909.html</url>
      
        <content type="html"><![CDATA[<h1>读后感</h1><blockquote><p>“未来已经到来，只是还未完全铺开”。</p></blockquote><h2 id="整体感受">整体感受</h2><p>本书的作者长期从事法律工作，根据其经历和感受，在书中提出了现在法律行业所面临的种种问题和困难。而后，话锋一转，描绘了一幅未来法律行业的蓝图，提出了振奋人心的前景，尤其是其对信息化、自动化的构想，远远超出了同时代很多人的局限。<br></p><h2 id="有关现状">有关现状</h2><p>作者在书中描绘了律所目前的最大困难之一“事多钱少”，这一点可谓当今法律行业的残酷现实。在读这本书之前，恰逢最近有一位清华法学生由于被知名律所辞退而自杀引起巨大波澜，令人惋惜。在通读之后，我赞同作者的观点，传统的金字塔模式应该是会被逐步取代的。我个人认为这一过程可能正在发生并在某个时间后骤然加快。同时，作者对于律所和法务部门传统的经营、管理方式感到不满，并认为其不可持续。这一见解在作者刚刚从事法律行业时就已提出，在当时可谓是振聋发聩。时至今日，大多数律所（主要是中小型）也确实感到盈利的困难，并积极找寻变革方式，然而某些顶级律所改革起来却步伐缓慢。<br></p><h2 id="计算机相关">计算机相关</h2><p>考虑到作者的教育背景以及工作履历，我认为作者应该是亲自使用过种种前沿的现代化办公的软件或者一些先进的“专家系统”（本来是AI领域的专有名词，放在这里并不符合其原本定义，但我确实想不到其他更精确的词汇），甚至可能深入了解过NLP的原理及其在法律行业的应用，并且对计算机所引起的管理学上的变革有着深刻认识和独到见解。作者在书中预测21世纪20年代他所预言的变革就会到来（本书出版于2016年），那么在2022年审视现状，我们发现其预言的相当一部分已经成真，比如在线庭审、诉讼、电子证据提交、电子协作、法律问答系统、ML/DL模型判案等等。不过考虑到时代背景，部分原因是新冠疫情大大加快了这一步骤，尤其是我国在世界上对信息化办公的接纳速度是比较快的，我个人认为如果没有疫情，那么他所预言的时间节点实际上比现实早了可能十年时间，这或许反映了作者对法律行业与计算机科学深度融合的乐观态度，也包括其对传统法律行业的工作模式和法律行业的客户市场的一种不看好的态度。当然，他所预言的律所和公司法务的转型在2022年这个时间节点并没有大面积开始，十种新的法律职业（角色）也没有明显的标志证明其出现。对于上述这些变革是否会在21世纪20年代真的发生，让我们拭目以待。<br></p><h2 id="一些思考">一些思考</h2><p>在上世纪80年代，连成熟的office都还没有面世，稳定的Windows系统也没有面世，甚至个人计算机都没有大量普及，更遑论互联网和近些年大热的人工智能了。而在那个时候，作者的研究主题就是法律与计算机的交叉内容，不得不说作者眼光的长远。当然，作者对于计算机行业前沿的了解和长期对于热点的追踪，使他真的深入了解计算机的现状尤其是NLP对法律行业的影响，这样他才会得出较为准确的结论，而不是像有的学者翻翻而谈人工智能哲学和人工智能伦理学之类在我看来有点可笑的内容。（这一点要着重说明，人工智能至少到现在，并没有真的“智能”，传统的模型依赖于大量标注数据、大样本，后来发展到海量参数的大模型——预训练，而尽管近年来有少样本学习、元学习、零学习的提出，希望神经网络真的可以像人一样拥有学习和思考能力，但SOTA的结果在复杂任务上距离人类水平仍有较大距离，以至于学界部分学者认为我们是否真的能做出“人工智能”。）<br>其对于年轻法律人的建议和对法律行业的变革的预言，我个人认为具有参考价值，至少其对待变革的态度是非常正确的，即积极面对变革！当然，考虑当今社会的现状，对于在21世纪20年代毕业的法学生和有志于从事这个行业的人来说，传统的学习和工作路线仍然占有重要地位，并不可轻易转向或由于交叉学科、交叉培养的宏伟叙事而草率投身其中。<br>对于人工智能是否最终能够取代法律工作者，我认为现在考虑有些杞人忧天，从可预见的未来来看，人工智能并不会完全取代法律工作者，甚至在很长一段时间内都仅仅是辅助地位而不占据主导地位。其实人工智能所冲击的（或者是还未但有可能冲击的），也远远不是法律行业这一个行业。比如，在医学图像识别领域，尽管榜单每年都被刷新（有时是大幅度刷新），CV方向的工作者备受鼓舞，认为以后再也不需要培养读CT图像的医生，可是从2015年到现在“却没有任何一名医生失业了”。所以我认为对人工智能的担心为时过早。但是，由于近年来人工智能技术的飞速发展，以及法律行业工作方式的变化，我认为大量的重复性、低难度劳动可能会被人工智能取代，比如文书阅读和整理、观点提取（文本摘要）、构成要件的判定等基础工作和涉及岗位在10-20年后可能会面临岌岌可危的境地。到了那时，大批法律工作者可能也会像被机器优化的工人、被大数据优化的分析师、被办公软件优化的会计、被自助机优化的收银员一样。我想，对未来，无论哪个行业，如果不掌握一定的计算机技术，就像新时代的文盲一样。</p><p>一个人的命运，不光要靠个人努力，也要考虑历史的进程。</p><blockquote><p>When one door closes, another opens; but we often look so long and so regretfully upon the closed door that we do not see the one which has opened for us.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 法学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洞穴奇案</title>
      <link href="/post/a4f290f7.html"/>
      <url>/post/a4f290f7.html</url>
      
        <content type="html"><![CDATA[<h1>读后感</h1><h2 id="简介">简介</h2><p>本书是作者根据一个真实案例所设想的假象公案，并自己撰写了五位大法官的判词，在多年后，新的作者假设条件有变，续写了九位大法官的判词。最终，本书展现了14位法官的判词。通过这14为法官的判词，这本书展示了20世纪主流的法学流派或者说法理学流派的观点，通过说理更是向我们展现了这些流派的思考方式，是一本极其优秀的入门读物。</p><h2 id="一些思考">一些思考</h2><p>在此说明，我无意展现我更赞同哪一种观点，也不想对其他观点做出批评。我只想在此写下一些我的思考。<br>首先，关于判决。其实我认为，很多篇判词只是在强行说理，“法官们”也许并没有严格遵循三段论进行论证而后做出判决，而是先在自己心中得出答案，然后进行论证。或许在面对很多疑难案件时，我们真的无法从法律、从规范、从制度之中得到明确的答案，我们内心的纠结，其实不光是定罪量刑的困难，也有我们心中道德的拷问。</p><p>其次，关于法的定义和边界。这十四篇判词，都是文采飞扬的，但是我认为其中有部分“法官”，他们的说理，已经完全超出了我认为的法律的边界，试图通过生命、道德、秩序，甚至是国家的本质、暴力的本质、权利的本质和哲学去探讨这一问题。我想，在现实中，法律所面临的困境也在此体现。法律，能否处理一切问题？法律的边界又在哪里？法律能否给所有问题下一个定义？比如，美国3G1A问题中的婚姻的问题为例，法学工作者是否能定义婚姻？如何定义？法学的论证，是仅限于法学的条条框框之中，还是可以诉诸哲学、社会学、伦理学和宗教？这都是我们该去思考的。<br>最后，写下一些与法学无关的内容。本书我们所带入的角色是法官，其实换个角度，在这样的案件之中，如果把自己带入涉案人员会怎么样？比如，你是否会为了生存选择吃下自己的同伴？顺着某篇观点，我们还可以思考秩序和暴力的关系。比如著名的鲁荣渔案，就是一个在公权力投射不到的地方，发生的恶性案件。也许，这就是一个通过暴力重新确立秩序的过程。那种临时的秩序，在回到社会中，又会带来怎样的冲突呢？</p><p>我想，面对这样的问题，我们不要给出一个答案，可能也永远没有确定的答案，我们只是多把自己带入涉案人，想想你当时会怎么选？多把自己带入法官，想想你会怎么判？在漫长的人生之中，反复的审视自己的选择，你是否会有改变呢？</p><p><em>ps:最近新出版了一本《再审洞穴奇案》，好像又有新的变化，有空会拜读。</em></p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 法学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>想点大事&amp;西窗法雨</title>
      <link href="/post/9f5038d5.html"/>
      <url>/post/9f5038d5.html</url>
      
        <content type="html"><![CDATA[<h1>法学启蒙/入门读物</h1><p>两本书都是法学启蒙和入门读物，因此一并写下读后感。</p><h2 id="西窗法雨">西窗法雨</h2><h3 id="简介">简介</h3><p>这本书是一本出版年代比较早的图书了，作者从专业背景上看，也并不是长期从事法律工作和研究的专业人士，但是这本书为法学启蒙读物，还是很适合法学新生和其他对法学有兴趣的人去阅读的。这本书是一系列小文的合集形式，原因是当初每篇文章都是在报纸上连载，因此“一是可以减少阅读成本，二是可以引发阅读乐趣。所以小文不能过长，不能晦涩艰深”。因此，读完这本书还是比较容易的，大概两个小时即可阅读完成。年龄较长的法学教授往往会推荐这本书进行入门。<br></p><h3 id="评价">评价</h3><p>由于本书是启蒙读物，那么通俗易懂是第一位的，因此阅读难度不高，但是其内容确实麻雀虽小五脏俱全，基本上介绍了西方法律状况的常识，包括法的源流、分类，西方著名判例等等，并对我国的一些司法和社会现状做了一些思考。总体来说，作为入门读物是不错的，对于之前完全不了解法学的同学来说，看完这本书应该会产生一些对法学的兴趣，并明白法学的复杂和深刻。当然，本书也有一些不足，首先是深度远远不够，当然这可能是受时代所限因此选题较为简单；其次就是一些西方案例的引用没有标注，在查阅的时候造成一定困难，这在学术规范上不太严谨；最后就是本书比较散，没有特别明确的总线，读完以后对法学的整体认识恐怕不足。</p><h2 id="想点大事">想点大事</h2><h3 id="简介-2">简介</h3><p>这本书是我在大一时的法理学教师孙竞超向我们推荐的，作者是现在清华大学的教授刘晗。作者的教育背景相当耀眼，因此本书在深度和广度上都远远超过《西窗法雨》。内容虽然是刘晗教授在得到APP上开的课程的合集，但是非常充分，并且脉络清晰。应该是近年来最优秀的一部中文的法学入门/启蒙读物了。<br></p><h3 id="评价-2">评价</h3><p>这本书的脉络是比较清晰的，其目标并不在于普法，而在于试图传授法律思维——一种独特的、属于法律工作者的思维。本书作者的水平是非常高的，从基本法律思维开始讲起，然后介绍法律的种种。我是在读《西窗法雨》之前看的这本书，这本书也是我的入门书籍。在我看来，如果读者在之前对法律完全没有了解，那么读完这本书还是能有较大启发的，甚至其中大量的法谚和法学名言，对我产生较大冲击。我个人认为，这本书的写作技巧是很高的，毕竟是以一个付费课程为基础，因此对大众来说很有吸引力。最重要的一点，在介绍法律思维上，特意选取了一些争议性案例、疑难案例，来说明法律思维和民众对法学朴素的观念和认识的巨大不同，并试图说明这些法律思维的本质和内涵，而且论据充分、说理详实，深入浅出地讲解了很多道理，整体上是优秀的作品。<br></p><h2 id="总评">总评</h2><p>法学入门书中外都有很多，除了我上述提及的两本之外，还有《法学野渡》《送法下乡》《政法笔记》，外国的《法的门前》（《法律之门》）等等作品，当然我只读过本篇所写的两本。作为入门书籍，仅仅需要浅显易懂，甚至介绍详实都不是必须条件，但重在说理和思维，不能沦为普法读物，几乎不会出现具体的法条。因此，大多数法学入门书籍在作者经过取舍后都是比较优秀的。更进一步，也正是因为入门书籍的优秀，很多书籍都比较经典，反复再版，这也导致了这个领域很少会有大量作品出现。<br>不过，总体来说，这类法学书籍都有类似的特点，比如讲解的内容大多数是从法的起源、分类开始，然后介绍一些外行看起来多此一举、异想天开、不可理喻的案例，介绍更多的法律思维方式和实务处理方式，最后则是几乎全球的入门书籍的共性：通过选取争议性的（主要是与民众朴素的直觉不符的）案例，通过为什么这样判来介绍法律思维，即法律人的思考方式，以希望使法学新人迅速进入法律的思维方式之中。最后这点非常明显，比如著名的辛普森杀妻案，尤其要提到此案刑事和民事判决的不同，就是要介绍这种反直觉的、冲突的、戏剧性的案例，来打破法学新人此前对法律的偏见和桎梏。法学入门书籍所希望讲述的，就是法学不光有理论，还有实践，如果在读完之后仍然对法学理想化、标签化、片面化，我想这大概不算是成功的阅读经历。</p>]]></content>
      
      
      <categories>
          
          <category> 读后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读后感 </tag>
            
            <tag> 法学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HELLO WORLD!</title>
      <link href="/post/e53fb0b9.html"/>
      <url>/post/e53fb0b9.html</url>
      
        <content type="html"><![CDATA[<h1>HELLO WORLD!</h1><p>这是我的第一篇博客，从今日起这里将会成为我发布技术blog和想法随笔的地方！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
